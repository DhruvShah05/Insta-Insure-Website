Directory structure:
└── Insta-Insure-Website/
    ├── add_password_migration.sql
    ├── add_sum_insured_migration.sql
    ├── app.py
    ├── app_multiuser.py
    ├── auth.py
    ├── auth_decorators.py
    ├── batch_file_operations.py
    ├── cache_manager.py
    ├── check_user_role.py
    ├── check_users.py
    ├── claims_enhancement_migration.sql
    ├── claims_migration.sql
    ├── CLAIMS_SEARCH_ENHANCEMENT.md
    ├── clear_user_cache.py
    ├── clear_user_session.py
    ├── CLIENT_EXPORT_FEATURE.md
    ├── combined_app.py
    ├── config.py
    ├── config_optimized.py
    ├── create_test_pdf.py
    ├── custom_document_types_migration.sql
    ├── database.py
    ├── database.sql
    ├── database_pool.py
    ├── debug_role_issue.py
    ├── debug_user.py
    ├── debug_user_loading.py
    ├── deploy_multiuser.py
    ├── deploy_multiuser_windows.py
    ├── deploy_production.py
    ├── deploy_windows.bat
    ├── DEPLOYMENT_GUIDE.md
    ├── DYNAMIC_BRANDING_IMPLEMENTATION.md
    ├── dynamic_config.py
    ├── email_service.py
    ├── excel_service.py
    ├── excel_sync_service.py
    ├── FINANCIAL_YEAR_EXCEL_SYSTEM.md
    ├── floater_health_insurance_migration.sql
    ├── gunicorn_config.py
    ├── health_topup_migration.sql
    ├── IMPLEMENTATION_SUMMARY.md
    ├── insurance_data.xlsx
    ├── integration_example.py
    ├── make_admin.py
    ├── migrate_settings.py
    ├── models.py
    ├── monitoring.py
    ├── MULTIUSER_SCALING_GUIDE.md
    ├── nginx.conf
    ├── OPTIMIZATION_APPLIED.md
    ├── OPTIMIZED_FOR_2-4_USERS.md
    ├── POLICY_HISTORY_IMPLEMENTATION.md
    ├── policy_history_migration.sql
    ├── production_integration.py
    ├── realtime_cleanup_service.py
    ├── RENEWAL_FILE_CLEANUP.md
    ├── renewal_file_cleanup.py
    ├── renewal_service.py
    ├── requirements.txt
    ├── requirements_production.txt
    ├── run_daily_cleanup.py
    ├── run_whatsapp_migration.py
    ├── SETTINGS_CONFIGURATION_GUIDE.md
    ├── settings_service.py
    ├── SETTINGS_SYSTEM_GUIDE.md
    ├── settings_system_migration.sql
    ├── setup_admin_passwords.py
    ├── SIMPLE_AUTH_SETUP.md
    ├── start_multiuser.bat
    ├── start_optimized.bat
    ├── start_server.py
    ├── start_server_optimized.py
    ├── task_queue.py
    ├── TWILIO_WEBHOOK_FIXED.md
    ├── whatsapp_bot.py
    ├── whatsapp_bot_async.py
    ├── WHATSAPP_LOGS_FEATURE.md
    ├── whatsapp_logs_migration.sql
    ├── whatsapp_service.py
    ├── wsgi.py
    ├── .env.example
    ├── routes/
    │   ├── claims.py
    │   ├── client_export.py
    │   ├── dashboard.py
    │   ├── excel_routes.py
    │   ├── existing_policies.py
    │   ├── pending_policies.py
    │   ├── policies.py
    │   ├── renewal_routes.py
    │   ├── settings_routes.py
    │   ├── whatsapp_logs_routes.py
    │   └── whatsapp_routes.py
    ├── static/
    │   ├── dropdown_manager.js
    │   ├── product_manager.js
    │   ├── styles.css
    │   └── js/
    │       └── performance.js
    └── templates/
        ├── add_claim.html
        ├── add_pending_policy.html
        ├── add_policy.html
        ├── base.html
        ├── claims.html
        ├── claims_backup.html
        ├── complete_pending.html
        ├── dashboard.html
        ├── error.html
        ├── excel_dashboard.html
        ├── excel_setup.html
        ├── existing_policies.html
        ├── login.html
        ├── login_clerk_backup.html
        ├── login_simple.html
        ├── pending_policies.html
        ├── pending_policies_backup.html
        ├── policy_history.html
        ├── renewal_export.html
        ├── renewal_page.html
        ├── view_all_clients.html
        ├── view_all_policies.html
        ├── view_all_policies_backup.html
        ├── view_claim.html
        ├── view_policy.html
        ├── whatsapp_logs.html
        ├── email/
        │   ├── policy_issued_template.html
        │   └── renewal_reminder_template.html
        └── settings/
            └── index.html

================================================
FILE: add_password_migration.sql
================================================
-- Migration to add password field to users table
-- Run this in your Supabase SQL editor

ALTER TABLE public.users 
ADD COLUMN password_hash text;

-- Add index for better performance on email lookups
CREATE INDEX IF NOT EXISTS idx_users_email ON public.users(email);

-- Update existing admin users with a default password (change this immediately after running)
-- Default password will be "admin123" - CHANGE THIS IMMEDIATELY
UPDATE public.users 
SET password_hash = '$2b$12$LQv3c1yqBwEHFww.vHAuCOmqvWiZr4u5rFd8mPA.rV0pyFZ8Qo/Sq'
WHERE email IN (
    SELECT unnest(string_to_array('dhruv@instainsure.co.in,admin@instainsure.co.in', ','))
);

-- Note: The above hash is for password "admin123"
-- You should change this immediately after testing



================================================
FILE: add_sum_insured_migration.sql
================================================
-- Migration to add sum_insured field to policies and pending_policies tables
-- Run this SQL script in your Supabase SQL editor

-- Add sum_insured column to policies table
ALTER TABLE public.policies 
ADD COLUMN IF NOT EXISTS sum_insured NUMERIC(12,2) NULL;

-- Add sum_insured column to pending_policies table  
ALTER TABLE public.pending_policies 
ADD COLUMN IF NOT EXISTS sum_insured NUMERIC(12,2) NULL;

-- Add comments to document the new columns
COMMENT ON COLUMN public.policies.sum_insured IS 'General sum insured amount for non-health policies';
COMMENT ON COLUMN public.pending_policies.sum_insured IS 'General sum insured amount for non-health policies';

-- Create index on sum_insured for better query performance (optional)
CREATE INDEX IF NOT EXISTS idx_policies_sum_insured ON public.policies (sum_insured);
CREATE INDEX IF NOT EXISTS idx_pending_policies_sum_insured ON public.pending_policies (sum_insured);

-- Verify the changes
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name IN ('policies', 'pending_policies') 
AND column_name = 'sum_insured';



================================================
FILE: app.py
================================================
from flask import Flask, request, jsonify, render_template, session
from flask_login import LoginManager
from datetime import timedelta
from dynamic_config import Config
from auth import auth_bp  # Remove create_oauth import
from routes.dashboard import dashboard_bp
from routes.policies import policies_bp
from routes.pending_policies import pending_policies_bp
from routes.existing_policies import existing_policies_bp
from routes.whatsapp_routes import whatsapp_bp
from routes.whatsapp_logs_routes import whatsapp_logs_bp
from routes.renewal_routes import renewal_bp
from routes.client_export import client_export_bp
from routes.claims import claims_bp
from routes.settings_routes import settings_bp
import os
import logging
import threading
import time
from datetime import datetime, timedelta
from logging.handlers import RotatingFileHandler

# Import WhatsApp bot functionality
from whatsapp_bot import setup_whatsapp_webhook
from realtime_cleanup_service import start_realtime_cleanup_service

# Try to import Excel routes
try:
    from routes.excel_routes import excel_bp

    excel_routes_available = True
except ImportError as e:
    print(f"Excel routes not available: {e}")
    excel_routes_available = False
    excel_bp = None

# Create Flask app with production settings
app = Flask(__name__)
app.config.from_object(Config)

# Configure session to last until browser closes
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=8)  # Fallback timeout
app.config['SESSION_COOKIE_HTTPONLY'] = True  # Prevent XSS attacks
app.config['SESSION_COOKIE_SECURE'] = Config.FLASK_ENV == 'production'  # HTTPS only in production
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'  # CSRF protection

# Production-ready secret key
app.secret_key = os.getenv('SECRET_KEY', os.urandom(24))

# Session configuration for production multi-user environment
if Config.FLASK_ENV == "development":
    # Development: Relaxed cookie settings for local testing
    app.config.update(
        SESSION_COOKIE_SECURE=False,
        SESSION_COOKIE_HTTPONLY=True,
        SESSION_COOKIE_SAMESITE=None,  # Allow cross-origin for ngrok
        PERMANENT_SESSION_LIFETIME=timedelta(hours=8),  # Fallback timeout
        MAX_CONTENT_LENGTH=50 * 1024 * 1024,
    )
else:
    # Production: Secure but ngrok-compatible settings
    app.config.update(
        SESSION_COOKIE_SECURE=False,  # Keep False for HTTP ngrok
        SESSION_COOKIE_HTTPONLY=True,
        SESSION_COOKIE_SAMESITE=None,  # Allow cross-origin for ngrok access
        PERMANENT_SESSION_LIFETIME=timedelta(hours=8),  # Fallback timeout
        MAX_CONTENT_LENGTH=50 * 1024 * 1024,
    )

    # Multi-user optimization settings for production
    app.config.update(
        SESSION_REFRESH_EACH_REQUEST=True,  # Keep sessions active
        SEND_FILE_MAX_AGE_DEFAULT=timedelta(hours=1),  # Cache static files

        # Performance settings
        JSON_SORT_KEYS=False,  # Faster JSON responses
        JSONIFY_PRETTYPRINT_REGULAR=False,  # Compact JSON in production
    )

# Setup logging for production
if not app.debug:
    if not os.path.exists('logs'):
        os.mkdir('logs')

    file_handler = RotatingFileHandler('logs/insurance_portal.log',
                                       maxBytes=10240000, backupCount=10)
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
    ))
    file_handler.setLevel(logging.INFO)
    app.logger.addHandler(file_handler)
    app.logger.setLevel(logging.INFO)
    app.logger.info('Insurance Portal startup')

# Setup logger for use in functions
logger = logging.getLogger(__name__)

# Flask-Login setup
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "auth.login"
login_manager.login_message = "Please log in to access this page."
login_manager.login_message_category = "info"

from models import User


@login_manager.user_loader
def load_user(user_id):
    if user_id is None:
        return None
    
    # TEMPORARY FIX: Always load fresh from database to fix admin role issue
    # TODO: Re-enable caching after role issue is resolved
    try:
        from supabase import create_client
        supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
        result = supabase.table('users').select('*').eq('email', user_id).execute()
        if result.data:
            user_data = result.data[0]
            user = User(
                email=user_data['email'],
                name=user_data.get('name'),
                picture=user_data.get('picture'),
                user_id=user_data.get('id'),
                password_hash=user_data.get('password_hash'),
                role=user_data.get('role', 'member')  # Include role parameter
            )
            logger.info(f"User loaded: {user.email} with role: {user.role} (is_admin: {user.is_admin})")
            return user
    except Exception as e:
        logger.error(f"Error loading user: {e}")
    return None


# Make config available in templates
@app.context_processor
def inject_config():
    return {
        'config': {
            'PORTAL_NAME': Config.PORTAL_NAME,
            'PORTAL_TITLE': Config.PORTAL_TITLE,
            'LOGO_PATH': Config.LOGO_PATH,
            'COMPANY_NAME': Config.COMPANY_NAME
        }
    }


# Custom Jinja2 filter for Indian date format (DD/MM/YYYY)
@app.template_filter('indian_date')
def indian_date_filter(date_string):
    """Convert date from YYYY-MM-DD to DD/MM/YYYY format"""
    if not date_string:
        return 'N/A'

    try:
        # Handle different date formats
        if isinstance(date_string, str):
            # If it's already in DD/MM/YYYY format, return as is
            if '/' in date_string and len(date_string.split('/')) == 3:
                parts = date_string.split('/')
                if len(parts[0]) == 2 and len(parts[1]) == 2 and len(parts[2]) == 4:
                    return date_string

            # If it's in YYYY-MM-DD format, convert to DD/MM/YYYY
            if '-' in date_string and len(date_string.split('-')) == 3:
                parts = date_string.split('-')
                if len(parts[0]) == 4:  # YYYY-MM-DD format
                    return f"{parts[2]}/{parts[1]}/{parts[0]}"
                elif len(parts[2]) == 4:  # DD-MM-YYYY format
                    return f"{parts[0]}/{parts[1]}/{parts[2]}"

        # Try to parse as datetime object
        if hasattr(date_string, 'strftime'):
            return date_string.strftime('%d/%m/%Y')

        # Try to parse string as date
        try:
            date_obj = datetime.strptime(str(date_string), '%Y-%m-%d')
            return date_obj.strftime('%d/%m/%Y')
        except ValueError:
            try:
                date_obj = datetime.strptime(str(date_string), '%d/%m/%Y')
                return date_obj.strftime('%d/%m/%Y')
            except ValueError:
                pass

        return str(date_string)
    except Exception as e:
        print(f"Error formatting date {date_string}: {e}")
        return str(date_string)

# Custom filter for standardized N/A display
@app.template_filter('display_value')
def display_value_filter(value, default='N/A'):
    """Standardized display for values - shows default (N/A) for empty/null values"""
    if value is None or value == '' or value == 0:
        return default
    return str(value)

# Custom filter for currency display
@app.template_filter('currency')
def currency_filter(value):
    """Format currency values with proper display"""
    if value is None or value == '' or value == 0:
        return 'N/A'
    try:
        return f"₹{float(value):,.2f}"
    except (ValueError, TypeError):
        return str(value)

# Custom filter for policy status
@app.template_filter('policy_status')
def policy_status_filter(policy):
    """Determine policy status based on expiry date and payment status"""
    from datetime import datetime, timedelta
    
    # If no payment date, it's pending payment
    if not policy.get('payment_date'):
        return {'status': 'pending', 'label': 'Pending Payment', 'class': 'pending'}
    
    # If policy has expired
    policy_to = policy.get('policy_to')
    if policy_to:
        try:
            # Handle different date formats
            if isinstance(policy_to, str):
                if '-' in policy_to:
                    expiry_date = datetime.strptime(policy_to, '%Y-%m-%d').date()
                else:
                    expiry_date = datetime.strptime(policy_to, '%d/%m/%Y').date()
            else:
                expiry_date = policy_to
            
            today = datetime.today().date()
            days_until_expiry = (expiry_date - today).days
            
            # Policy has expired
            if days_until_expiry < 0:
                return {'status': 'expired', 'label': 'Expired', 'class': 'expired'}
            
            # Policy expiring within 30 days
            elif days_until_expiry <= 30:
                return {'status': 'expiring_soon', 'label': 'Expiring Soon', 'class': 'expiring-soon'}
            
            # Policy is active (more than 30 days until expiry)
            else:
                return {'status': 'active', 'label': 'Active', 'class': 'active'}
                
        except (ValueError, TypeError):
            pass
    
    # Default fallback
    return {'status': 'unknown', 'label': 'Unknown', 'class': 'unknown'}

# Security headers middleware
@app.after_request
def after_request(response):
    """Add security headers"""
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'DENY'
    response.headers['X-XSS-Protection'] = '1; mode=block'
    return response


# Session management middleware
@app.before_request
def manage_session():
    """Ensure sessions are properly managed and non-permanent"""
    # Force all sessions to be non-permanent
    session.permanent = False
    
    # Clear session if it's somehow marked as permanent
    if hasattr(session, '_permanent') and session._permanent:
        session.clear()
        session.permanent = False


# Request monitoring and rate limiting
request_counts = {}
request_lock = threading.Lock()


@app.before_request
def monitor_requests():
    """Monitor requests and implement basic rate limiting"""
    client_ip = request.remote_addr
    current_time = time.time()

    # Clean old entries (older than 1 minute)
    with request_lock:
        request_counts[client_ip] = [
            timestamp for timestamp in request_counts.get(client_ip, [])
            if current_time - timestamp < 60
        ]

        # Add current request
        request_counts[client_ip].append(current_time)

        # Rate limiting: max 120 requests per minute per IP
        if len(request_counts[client_ip]) > 120:
            app.logger.warning(f'Rate limit exceeded for IP: {client_ip}')
            return jsonify({'error': 'Rate limit exceeded'}), 429

    # Log request information for monitoring
    if not app.debug:
        app.logger.info(f'{client_ip} - {request.method} {request.url} - Active users: {len(request_counts)}')


# Register blueprints
app.register_blueprint(auth_bp)
app.register_blueprint(dashboard_bp)
app.register_blueprint(policies_bp)
app.register_blueprint(pending_policies_bp)
app.register_blueprint(existing_policies_bp)
app.register_blueprint(whatsapp_bp)  # WhatsApp routes
app.register_blueprint(whatsapp_logs_bp)  # WhatsApp logs
app.register_blueprint(renewal_bp)
app.register_blueprint(client_export_bp)  # Renewal routes
app.register_blueprint(claims_bp)  
app.register_blueprint(settings_bp)

# Register Excel blueprint if available
if excel_routes_available and excel_bp:
    app.register_blueprint(excel_bp)

    # Initialize Excel sync service in background
    try:
        from excel_sync_service import initialize_excel_sync

        initialize_excel_sync()
        app.logger.info("Excel sync service initialized")
    except Exception as e:
        app.logger.warning(f"Excel sync service not available: {e}")


# Test PDF route for WhatsApp template testing
@app.route('/test-policy.pdf')
def serve_test_pdf():
    """Serve test PDF for WhatsApp template validation"""
    from flask import send_file
    import os
    
    pdf_path = os.path.join(app.root_path, 'static', 'test_policy_document.pdf')
    
    # Create test PDF if it doesn't exist
    if not os.path.exists(pdf_path):
        try:
            from create_test_pdf import create_test_pdf
            create_test_pdf()
        except ImportError:
            # Fallback: create a simple text file if reportlab is not available
            os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
            with open(pdf_path.replace('.pdf', '.txt'), 'w') as f:
                f.write("Test Policy Document\n\nThis is a test file for WhatsApp template validation.\n\nInsta Insurance Consultancy")
            return "Test PDF creation requires reportlab. Please install: pip install reportlab", 500
    
    return send_file(pdf_path, 
                     as_attachment=False, 
                     download_name='test_policy_document.pdf',
                     mimetype='application/pdf')

# Route to serve renewal documents
@app.route('/static/renewals/<filename>')
def serve_renewal_document(filename):
    """Serve renewal documents for WhatsApp"""
    from flask import send_from_directory
    import os
    
    renewals_dir = os.path.join(app.root_path, 'static', 'renewals')
    
    if not os.path.exists(os.path.join(renewals_dir, filename)):
        return "File not found", 404
    
    return send_from_directory(renewals_dir, filename, mimetype='application/pdf')

# Error handlers
@app.errorhandler(404)
def not_found_error(error):
    return render_template('error.html',
                           error='Page Not Found',
                           message='The requested page could not be found.'), 404


@app.errorhandler(500)
def internal_error(error):
    app.logger.error(f'Server Error: {error}')
    return render_template('error.html',
                           error='Internal Server Error',
                           message='An internal server error occurred.'), 500


@app.errorhandler(413)
def too_large(error):
    return render_template('error.html',
                           error='File Too Large',
                           message='The uploaded file is too large. Maximum size is 50MB.'), 413


# Setup WhatsApp webhook
setup_whatsapp_webhook(app)

if __name__ == "__main__":
    # Check required environment variables
    required_vars = ['WHATSAPP_TOKEN', 'WHATSAPP_PHONE_ID', 'VERIFY_TOKEN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        print(f"⚠️  Warning: Missing WhatsApp variables: {', '.join(missing_vars)}")
        print("WhatsApp functionality will be disabled.")
    else:
        print("✅ WhatsApp integration enabled")

    # Check Excel functionality
    if excel_routes_available:
        print("✅ Excel integration enabled")
    else:
        print("⚠️  Excel functionality disabled - install: pip install pandas openpyxl numpy")

    # Check authentication configuration
    print("✅ Simple authentication enabled")
    print(f"📝 Admin emails: {', '.join(Config.ADMIN_EMAILS)}")

    print("🚀 Starting Insurance Portal with Full Integration...")
    print("📱 WhatsApp webhook: http://localhost:5050/webhook")
    print("📊 Excel sync: Real-time database → Google Drive")
    print("🌐 Web portal: http://localhost:5050/")
    print("🔐 Authentication: Email/Password")

    # Production settings
    port = int(os.environ.get("PORT", 5050))
    
    # Start real-time cleanup service
    print("🚀 Starting real-time file cleanup service...")
    start_realtime_cleanup_service(check_interval_seconds=60)
    print("✅ Real-time cleanup service started (checks every 60 seconds)")
    
    if Config.FLASK_ENV == "development":
        # Development mode
        app.run(
            host='0.0.0.0',
            port=port,
            debug=True,
            threaded=True,
            use_reloader=True
        )
    else:
        # Production mode - optimized for concurrent users
        app.run(
            host='0.0.0.0',
            port=port,
            debug=False,
            threaded=True,
            processes=1,  # Use threading, not multiprocessing for shared state
            use_reloader=False,
            # Performance optimizations
            request_handler=None,  # Use default optimized handler
        )


================================================
FILE: app_multiuser.py
================================================
"""
Multi-User Scaled Flask Application
Integrates all scaling components for concurrent user handling
"""
from flask import Flask, request, jsonify, render_template, g, session
from flask_login import LoginManager
from datetime import timedelta
from dynamic_config import Config
from auth import auth_bp
from routes.dashboard import dashboard_bp
from routes.policies import policies_bp
from routes.pending_policies import pending_policies_bp
from routes.existing_policies import existing_policies_bp
from routes.whatsapp_routes import whatsapp_bp
from routes.whatsapp_logs_routes import whatsapp_logs_bp
from routes.renewal_routes import renewal_bp
from routes.client_export import client_export_bp
from routes.claims import claims_bp
from routes.settings_routes import settings_bp
import os
import logging
import time
from datetime import datetime, timedelta
from logging.handlers import RotatingFileHandler

# Import multi-user scaling components
from database_pool import db_pool, check_database_health
from cache_manager import cache_manager, rate_limiter, session_manager, rate_limit
from task_queue import task_queue, get_queue_status
from batch_file_operations import batch_file_manager
from monitoring import metrics_collector, monitor_requests, create_health_check_blueprint
from whatsapp_bot_async import whatsapp_bot_async, handle_whatsapp_webhook_async
from whatsapp_bot import setup_whatsapp_webhook

# Try to import Excel routes
try:
    from routes.excel_routes import excel_bp
    excel_routes_available = True
except ImportError as e:
    print(f"Excel routes not available: {e}")
    excel_routes_available = False
    excel_bp = None

# Create Flask app with production settings
app = Flask(__name__)
app.config.from_object(Config)

# Configure session to last until browser closes
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=8)  # Fallback timeout
app.config['SESSION_COOKIE_HTTPONLY'] = True  # Prevent XSS attacks
app.config['SESSION_COOKIE_SECURE'] = Config.FLASK_ENV == 'production'  # HTTPS only in production
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'  # CSRF protection

# Production-ready secret key
app.secret_key = os.getenv('SECRET_KEY', os.urandom(24))

# Multi-user session configuration
app.config.update(
    SESSION_COOKIE_SECURE=False,  # Set to True in production with HTTPS
    SESSION_COOKIE_HTTPONLY=True,
    SESSION_COOKIE_SAMESITE='Lax',
    PERMANENT_SESSION_LIFETIME=timedelta(hours=8),  # Fallback timeout
    MAX_CONTENT_LENGTH=50 * 1024 * 1024,  # 50MB max file size
    
    # Performance optimizations for multi-user
    SESSION_REFRESH_EACH_REQUEST=True,
    SEND_FILE_MAX_AGE_DEFAULT=timedelta(hours=1),
    JSON_SORT_KEYS=False,
    JSONIFY_PRETTYPRINT_REGULAR=False,
    
    # Connection pool settings
    SQLALCHEMY_ENGINE_OPTIONS={
        'pool_size': 20,
        'pool_recycle': 3600,
        'pool_pre_ping': True,
        'max_overflow': 30
    }
)

# Setup enhanced logging for multi-user environment
if not os.path.exists('logs'):
    os.makedirs('logs')

# Configure structured logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        RotatingFileHandler('logs/multiuser_app.log', maxBytes=50*1024*1024, backupCount=10),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# Flask-Login setup with session management
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "auth.login"
login_manager.login_message = "Please log in to access this page."
login_manager.login_message_category = "info"

from models import User

@login_manager.user_loader
def load_user(user_id):
    if user_id is None:
        return None
    
    # TEMPORARY FIX: Always load fresh from database to fix admin role issue
    # TODO: Re-enable caching after role issue is resolved
    user = User.get_or_create(user_id)
    if user:
        logger.info(f"User loaded: {user.email} with role: {user.role} (is_admin: {user.is_admin})")
    
    return user

# Make config available in templates
@app.context_processor
def inject_config():
    return {
        'config': {
            'CLERK_PUBLISHABLE_KEY': Config.CLERK_PUBLISHABLE_KEY,
            'CLERK_FRONTEND_API': Config.CLERK_FRONTEND_API,
            'PORTAL_NAME': Config.PORTAL_NAME,
            'PORTAL_TITLE': Config.PORTAL_TITLE,
            'LOGO_PATH': Config.LOGO_PATH,
            'COMPANY_NAME': Config.COMPANY_NAME
        }
    }

# Custom Jinja2 filter for Indian date format
@app.template_filter('indian_date')
def indian_date_filter(date_string):
    """Convert date from YYYY-MM-DD to DD/MM/YYYY format"""
    if not date_string:
        return 'N/A'
    
    try:
        if isinstance(date_string, str):
            if '/' in date_string and len(date_string.split('/')) == 3:
                parts = date_string.split('/')
                if len(parts[0]) == 2 and len(parts[1]) == 2 and len(parts[2]) == 4:
                    return date_string
            
            if '-' in date_string and len(date_string.split('-')) == 3:
                parts = date_string.split('-')
                if len(parts[0]) == 4:
                    return f"{parts[2]}/{parts[1]}/{parts[0]}"
                elif len(parts[2]) == 4:
                    return f"{parts[0]}/{parts[1]}/{parts[2]}"
        
        if hasattr(date_string, 'strftime'):
            return date_string.strftime('%d/%m/%Y')
        
        try:
            date_obj = datetime.strptime(str(date_string), '%Y-%m-%d')
            return date_obj.strftime('%d/%m/%Y')
        except ValueError:
            try:
                date_obj = datetime.strptime(str(date_string), '%d/%m/%Y')
                return date_obj.strftime('%d/%m/%Y')
            except ValueError:
                pass
        
        return str(date_string)
    except Exception as e:
        logger.error(f"Error formatting date {date_string}: {e}")
        return str(date_string)

# Custom filter for standardized N/A display
@app.template_filter('display_value')
def display_value_filter(value, default='N/A'):
    """Standardized display for values - shows default (N/A) for empty/null values"""
    if value is None or value == '' or value == 0:
        return default
    return str(value)

# Custom filter for currency display
@app.template_filter('currency')
def currency_filter(value):
    """Format currency values with proper display"""
    if value is None or value == '' or value == 0:
        return 'N/A'
    try:
        return f"₹{float(value):,.2f}"
    except (ValueError, TypeError):
        return str(value)

# Custom filter for policy status
@app.template_filter('policy_status')
def policy_status_filter(policy):
    """Determine policy status based on expiry date and payment status"""
    from datetime import datetime, timedelta
    
    # If no payment date, it's pending payment
    if not policy.get('payment_date'):
        return {'status': 'pending', 'label': 'Pending Payment', 'class': 'pending'}
    
    # If policy has expired
    policy_to = policy.get('policy_to')
    if policy_to:
        try:
            # Handle different date formats
            if isinstance(policy_to, str):
                if '-' in policy_to:
                    expiry_date = datetime.strptime(policy_to, '%Y-%m-%d').date()
                else:
                    expiry_date = datetime.strptime(policy_to, '%d/%m/%Y').date()
            else:
                expiry_date = policy_to
            
            today = datetime.today().date()
            days_until_expiry = (expiry_date - today).days
            
            # Policy has expired
            if days_until_expiry < 0:
                return {'status': 'expired', 'label': 'Expired', 'class': 'expired'}
            
            # Policy expiring within 30 days
            elif days_until_expiry <= 30:
                return {'status': 'expiring_soon', 'label': 'Expiring Soon', 'class': 'expiring-soon'}
            
            # Policy is active (more than 30 days until expiry)
            else:
                return {'status': 'active', 'label': 'Active', 'class': 'active'}
                
        except (ValueError, TypeError):
            pass
    
    # Default fallback
    return {'status': 'unknown', 'label': 'Unknown', 'class': 'unknown'}

# Enhanced security headers for multi-user environment
@app.after_request
def after_request(response):
    """Add security headers and performance optimizations"""
    # Security headers
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'DENY'
    response.headers['X-XSS-Protection'] = '1; mode=block'
    response.headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'
    
    # Performance headers
    if request.endpoint and request.endpoint.startswith('static'):
        response.headers['Cache-Control'] = 'public, max-age=3600'
    
    # CORS headers for API endpoints
    if request.path.startswith('/api/'):
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
    
    return response

# Session management middleware
@app.before_request
def manage_session():
    """Ensure sessions are properly managed"""
    # Allow Flask-Login to manage session permanence
    pass


# Enhanced rate limiting middleware
@app.before_request
def enhanced_rate_limiting():
    """Enhanced rate limiting with different limits for different endpoints"""
    client_ip = request.remote_addr
    endpoint = request.endpoint or request.path
    
    # Different rate limits for different endpoint types
    if endpoint and endpoint.startswith('api.'):
        # API endpoints: 100 requests per minute
        if rate_limiter.is_rate_limited(f"api_{client_ip}", 100, 60):
            metrics_collector.increment_counter('rate_limit_api_exceeded')
            return jsonify({'error': 'API rate limit exceeded'}), 429
    
    elif request.path.startswith('/webhook'):
        # Webhook endpoints: 1000 requests per minute (for WhatsApp)
        if rate_limiter.is_rate_limited(f"webhook_{client_ip}", 1000, 60):
            metrics_collector.increment_counter('rate_limit_webhook_exceeded')
            return jsonify({'error': 'Webhook rate limit exceeded'}), 429
    
    else:
        # General endpoints: 200 requests per minute
        if rate_limiter.is_rate_limited(f"general_{client_ip}", 200, 60):
            metrics_collector.increment_counter('rate_limit_general_exceeded')
            return jsonify({'error': 'Rate limit exceeded'}), 429
    
    # Record request start time for monitoring
    g.request_start_time = time.time()

# Register blueprints
app.register_blueprint(auth_bp)
app.register_blueprint(dashboard_bp)
app.register_blueprint(policies_bp)
app.register_blueprint(pending_policies_bp)
app.register_blueprint(existing_policies_bp)
app.register_blueprint(whatsapp_bp)
app.register_blueprint(whatsapp_logs_bp)
app.register_blueprint(renewal_bp)
app.register_blueprint(client_export_bp)
app.register_blueprint(claims_bp)
app.register_blueprint(settings_bp)

# Register health check blueprint
health_bp = create_health_check_blueprint()
app.register_blueprint(health_bp)

# Register Excel blueprint if available
if excel_routes_available and excel_bp:
    app.register_blueprint(excel_bp)

# Setup Twilio WhatsApp webhook (for existing Twilio integration)
setup_whatsapp_webhook(app)

# Enhanced WhatsApp webhook with async processing
@app.route('/webhook', methods=['GET', 'POST'])
def whatsapp_webhook():
    """Enhanced WhatsApp webhook with async processing"""
    if request.method == 'GET':
        # Webhook verification
        verify_token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')
        
        if verify_token == os.getenv('VERIFY_TOKEN'):
            return challenge
        else:
            return 'Invalid verification token', 403
    
    elif request.method == 'POST':
        # Process webhook data asynchronously
        try:
            webhook_data = request.get_json()
            if webhook_data:
                # Use async webhook handler
                return handle_whatsapp_webhook_async(webhook_data)
            else:
                return jsonify({'status': 'no_data'}), 400
        except Exception as e:
            logger.error(f"Webhook processing error: {e}")
            return jsonify({'status': 'error', 'message': str(e)}), 500

# Multi-user API endpoints
@app.route('/api/system/status')
@rate_limit(limit=10, window=60)  # 10 requests per minute
def system_status():
    """Get system status for monitoring"""
    try:
        # Get various system metrics
        db_healthy, db_message = check_database_health()
        queue_stats = get_queue_status()
        cache_stats = cache_manager.get_cache_stats() if hasattr(cache_manager, 'get_cache_stats') else {}
        file_manager_stats = batch_file_manager.get_stats()
        
        return jsonify({
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'services': {
                'database': {
                    'healthy': db_healthy,
                    'message': db_message,
                    'pool_size': db_pool.active_connections
                },
                'task_queue': {
                    'healthy': True,
                    'stats': queue_stats
                },
                'cache': {
                    'healthy': True,
                    'stats': cache_stats
                },
                'file_manager': {
                    'healthy': True,
                    'stats': file_manager_stats
                }
            },
            'performance': metrics_collector.get_performance_summary(15),
            'alerts': metrics_collector.get_alerts()
        })
    except Exception as e:
        logger.error(f"System status error: {e}")
        return jsonify({
            'status': 'error',
            'message': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/bulk/send-reminders', methods=['POST'])
@rate_limit(limit=5, window=300)  # 5 requests per 5 minutes
def bulk_send_reminders():
    """Send renewal reminders to multiple customers"""
    try:
        data = request.get_json()
        customers = data.get('customers', [])
        
        if not customers:
            return jsonify({'error': 'No customers provided'}), 400
        
        # Use async WhatsApp bot for bulk operations
        from whatsapp_bot_async import send_reminders_to_multiple_customers
        result = send_reminders_to_multiple_customers(customers)
        
        metrics_collector.increment_counter('bulk_reminders_sent', len(customers))
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"Bulk reminders error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/bulk/notify-policy-issued', methods=['POST'])
@rate_limit(limit=5, window=300)  # 5 requests per 5 minutes
def bulk_notify_policy_issued():
    """Notify multiple customers about policy issuance"""
    try:
        data = request.get_json()
        notifications = data.get('notifications', [])
        
        if not notifications:
            return jsonify({'error': 'No notifications provided'}), 400
        
        # Use async WhatsApp bot for bulk operations
        from whatsapp_bot_async import notify_multiple_policy_issued
        result = notify_multiple_policy_issued(notifications)
        
        metrics_collector.increment_counter('bulk_notifications_sent', len(notifications))
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"Bulk notifications error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/files/batch-upload', methods=['POST'])
@rate_limit(limit=3, window=300)  # 3 requests per 5 minutes
def batch_file_upload():
    """Handle batch file uploads"""
    try:
        files = request.files.getlist('files')
        metadata = request.form.get('metadata', '{}')
        
        if not files:
            return jsonify({'error': 'No files provided'}), 400
        
        # Parse metadata
        import json
        try:
            metadata = json.loads(metadata)
        except:
            metadata = {}
        
        # Prepare upload requests
        upload_requests = []
        for i, file in enumerate(files):
            upload_requests.append({
                'file': file,
                'filename': file.filename,
                'mimetype': file.mimetype,
                'client_id': metadata.get('client_id'),
                'member_name': metadata.get('member_name'),
                'policy_id': metadata.get('policy_ids', [None])[i] if i < len(metadata.get('policy_ids', [])) else None,
                'parent_folder_id': Config.ROOT_FOLDER_ID
            })
        
        # Use batch file manager
        from batch_file_operations import upload_multiple_policy_files
        batch_id = upload_multiple_policy_files(upload_requests)
        
        metrics_collector.increment_counter('batch_uploads_initiated')
        
        return jsonify({
            'success': True,
            'batch_id': batch_id,
            'message': f'Batch upload started for {len(files)} files'
        })
        
    except Exception as e:
        logger.error(f"Batch upload error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/files/batch-status/<batch_id>')
def batch_operation_status(batch_id):
    """Get status of batch file operation"""
    try:
        result = batch_file_manager.get_batch_result(batch_id)
        
        if result:
            return jsonify({
                'success': True,
                'batch_id': batch_id,
                'result': result
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Batch operation not found or still in progress'
            }), 404
            
    except Exception as e:
        logger.error(f"Batch status error: {e}")
        return jsonify({'error': str(e)}), 500

# Route to serve renewal documents
@app.route('/static/renewals/<filename>')
def serve_renewal_document(filename):
    """Serve renewal documents for WhatsApp"""
    from flask import send_from_directory
    import os
    
    renewals_dir = os.path.join(app.root_path, 'static', 'renewals')
    
    if not os.path.exists(os.path.join(renewals_dir, filename)):
        return "File not found", 404
    
    return send_from_directory(renewals_dir, filename, mimetype='application/pdf')

# Error handlers with enhanced logging
@app.errorhandler(404)
def not_found_error(error):
    metrics_collector.increment_counter('error_404')
    return render_template('error.html',
                          error='Page Not Found',
                          message='The requested page could not be found.'), 404

@app.errorhandler(500)
def internal_error(error):
    metrics_collector.increment_counter('error_500')
    logger.error(f'Server Error: {error}')
    return render_template('error.html',
                          error='Internal Server Error',
                          message='An internal server error occurred.'), 500

@app.errorhandler(413)
def too_large(error):
    metrics_collector.increment_counter('error_413')
    return render_template('error.html',
                          error='File Too Large',
                          message='The uploaded file is too large. Maximum size is 50MB.'), 413

@app.errorhandler(429)
def rate_limit_exceeded(error):
    metrics_collector.increment_counter('error_429')
    return jsonify({
        'error': 'Rate limit exceeded',
        'message': 'Too many requests. Please try again later.'
    }), 429

# Add request monitoring middleware
monitor_requests(app)

# Startup health checks
def perform_startup_checks():
    """Perform startup health checks"""
    logger.info("Performing startup health checks...")
    
    # Check database connection
    db_healthy, db_message = check_database_health()
    if db_healthy:
        logger.info(f"✅ Database: {db_message}")
    else:
        logger.error(f"❌ Database: {db_message}")
    
    # Check cache system
    try:
        cache_manager.set('startup_test', 'ok', 10)
        if cache_manager.get('startup_test') == 'ok':
            logger.info("✅ Cache system: Working")
        else:
            logger.warning("⚠️ Cache system: Degraded")
    except Exception as e:
        logger.error(f"❌ Cache system: {e}")
    
    # Check task queue
    try:
        stats = task_queue.get_queue_stats()
        logger.info(f"✅ Task queue: {stats['total_tasks']} total tasks processed")
    except Exception as e:
        logger.error(f"❌ Task queue: {e}")
    
    # Check file manager
    try:
        stats = batch_file_manager.get_stats()
        logger.info(f"✅ File manager: Ready with {stats['active_workers']} workers")
    except Exception as e:
        logger.error(f"❌ File manager: {e}")

if __name__ == "__main__":
    # Perform startup checks
    perform_startup_checks()
    
    # Check required environment variables
    required_vars = ['WHATSAPP_TOKEN', 'WHATSAPP_PHONE_ID', 'VERIFY_TOKEN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.warning(f"⚠️ Missing WhatsApp variables: {', '.join(missing_vars)}")
        logger.warning("WhatsApp functionality will be limited.")
    else:
        logger.info("✅ WhatsApp integration: Fully configured")
    
    # Check Excel functionality
    if excel_routes_available:
        logger.info("✅ Excel integration: Available")
    else:
        logger.warning("⚠️ Excel functionality: Disabled")
    
    logger.info("✅ Clerk authentication: Enabled")
    logger.info(f"📝 Clerk Frontend: {Config.CLERK_FRONTEND_API}")
    
    logger.info("🚀 Starting Multi-User Insurance Portal...")
    logger.info("📱 WhatsApp webhook: /webhook")
    logger.info("📊 System status: /api/system/status")
    logger.info("🏥 Health check: /health")
    logger.info("📈 Metrics: /metrics")
    
    # Production settings
    port = int(os.getenv('PORT', 5050))
    debug = os.getenv('FLASK_ENV') == 'development'
    
    if debug:
        logger.info("🔧 Running in DEVELOPMENT mode")
        app.run(
            host='0.0.0.0',
            port=port,
            debug=True,
            threaded=True,
            use_reloader=False  # Disable reloader to prevent duplicate processes
        )
    else:
        logger.info("🏭 Running in PRODUCTION mode")
        logger.info("💡 Use Gunicorn for production deployment:")
        logger.info(f"   gunicorn -c gunicorn_config.py wsgi:application")
        
        # For direct execution, use a simple WSGI server
        try:
            from waitress import serve
            logger.info("🍽️ Using Waitress WSGI server")
            serve(app, host='0.0.0.0', port=port, threads=20)
        except ImportError:
            logger.warning("Waitress not available, using Flask dev server")
            app.run(
                host='0.0.0.0',
                port=port,
                debug=False,
                threaded=True
            )



================================================
FILE: auth.py
================================================
from flask import Blueprint, redirect, url_for, session, render_template, request, jsonify, flash
from flask_login import login_user, logout_user, current_user
from dynamic_config import Config
from models import User
import logging

auth_bp = Blueprint("auth", __name__)
logger = logging.getLogger(__name__)


@auth_bp.route("/login", methods=['GET', 'POST'])
def login():
    """
    Show login page and handle login form submission
    """
    # If user is already logged in, redirect to dashboard
    if current_user.is_authenticated:
        return redirect(url_for("dashboard.index"))

    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')

        if not email or not password:
            flash('Please provide both email and password', 'error')
            return render_template("login.html")

        # Authenticate user
        user = User.authenticate(email, password)
        
        if user:
            # Login successful - session lasts until browser closes
            login_user(user, remember=False)  # Session cookie only, no remember me
            logger.info(f"User {email} logged in successfully")
            
            # Redirect to next page or dashboard
            next_page = request.args.get('next')
            if next_page:
                return redirect(next_page)
            return redirect(url_for('dashboard.index'))
        else:
            # Login failed
            flash('Invalid email or password', 'error')
            logger.warning(f"Failed login attempt for email: {email}")

    return render_template("login.html")


@auth_bp.route("/logout")
def logout():
    """
    Logout route - clears Flask-Login session and forces session expiry
    """
    if current_user.is_authenticated:
        logger.info(f"User {current_user.email} logged out")
    
    # Clear Flask-Login session
    logout_user()
    
    # Clear all session data
    session.clear()
    
    flash('You have been logged out successfully', 'info')
    
    # Create response and clear session cookie
    response = redirect(url_for("auth.login"))
    response.set_cookie('session', '', expires=0, httponly=True, secure=False, samesite='Lax')
    
    return response


@auth_bp.route("/auth/verify")
def verify_auth():
    """
    Endpoint to verify current authentication status
    Used by frontend to check if user is still logged in
    """
    if current_user.is_authenticated:
        return jsonify({
            'authenticated': True,
            'user': {
                'email': current_user.email,
                'name': current_user.name,
                'picture': current_user.picture
            }
        })

    return jsonify({'authenticated': False}), 401


================================================
FILE: auth_decorators.py
================================================
"""
Authentication and Authorization Decorators
Provides role-based access control for routes
"""

from functools import wraps
from flask import redirect, url_for, flash, jsonify, request
from flask_login import current_user
import logging

logger = logging.getLogger(__name__)

def login_required(f):
    """Decorator to require user to be logged in"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated:
            if request.is_json:
                return jsonify({'error': 'Authentication required'}), 401
            flash('Please log in to access this page.', 'error')
            return redirect(url_for('auth.login', next=request.url))
        return f(*args, **kwargs)
    return decorated_function

def admin_required(f):
    """Decorator to require user to be an admin"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated:
            if request.is_json:
                return jsonify({'error': 'Authentication required'}), 401
            flash('Please log in to access this page.', 'error')
            return redirect(url_for('auth.login', next=request.url))
        
        if not current_user.is_admin:
            if request.is_json:
                return jsonify({'error': 'Admin access required'}), 403
            flash('You do not have permission to access this page.', 'error')
            return redirect(url_for('dashboard.index'))
        
        return f(*args, **kwargs)
    return decorated_function

def role_required(required_role):
    """Decorator to require specific role"""
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if not current_user.is_authenticated:
                if request.is_json:
                    return jsonify({'error': 'Authentication required'}), 401
                flash('Please log in to access this page.', 'error')
                return redirect(url_for('auth.login', next=request.url))
            
            if current_user.role != required_role:
                if request.is_json:
                    return jsonify({'error': f'{required_role.title()} access required'}), 403
                flash(f'You need {required_role} privileges to access this page.', 'error')
                return redirect(url_for('dashboard.index'))
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator

def any_role_required(allowed_roles):
    """Decorator to require any of the specified roles"""
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if not current_user.is_authenticated:
                if request.is_json:
                    return jsonify({'error': 'Authentication required'}), 401
                flash('Please log in to access this page.', 'error')
                return redirect(url_for('auth.login', next=request.url))
            
            if current_user.role not in allowed_roles:
                if request.is_json:
                    return jsonify({'error': 'Insufficient privileges'}), 403
                flash('You do not have permission to access this page.', 'error')
                return redirect(url_for('dashboard.index'))
            
            return f(*args, **kwargs)
        return decorated_function
    return decorator

def check_user_permissions(required_permission=None):
    """Check if current user has required permissions"""
    if not current_user.is_authenticated:
        return False, 'Authentication required'
    
    if required_permission == 'admin' and not current_user.is_admin:
        return False, 'Admin access required'
    
    if required_permission == 'member' and current_user.role not in ['admin', 'member']:
        return False, 'Member access required'
    
    return True, 'Access granted'

def log_access_attempt(route_name, required_role=None):
    """Log access attempts for security monitoring"""
    user_info = f"{current_user.email} ({current_user.role})" if current_user.is_authenticated else "Anonymous"
    
    if current_user.is_authenticated and (not required_role or current_user.role == required_role or current_user.is_admin):
        logger.info(f"Access granted to {route_name} for user {user_info}")
    else:
        logger.warning(f"Access denied to {route_name} for user {user_info}. Required role: {required_role}")

# Convenience decorators for common use cases
def settings_access_required(f):
    """Decorator specifically for settings page access (admin only)"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        log_access_attempt('settings', 'admin')
        return admin_required(f)(*args, **kwargs)
    return decorated_function

def user_management_required(f):
    """Decorator for user management functions (admin only)"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        log_access_attempt('user_management', 'admin')
        return admin_required(f)(*args, **kwargs)
    return decorated_function



================================================
FILE: batch_file_operations.py
================================================
"""
Batch File Operations for Multi-User Concurrent Google Drive Operations
Handles multiple file uploads, downloads, and operations simultaneously
"""
import os
import io
import threading
import time
import logging
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import List, Dict, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime
import tempfile
from queue import Queue

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload, MediaIoBaseDownload
from googleapiclient.errors import HttpError

from dynamic_config import Config
from database_pool import execute_query, batch_insert

logger = logging.getLogger(__name__)

@dataclass
class FileOperation:
    """File operation definition"""
    operation_id: str
    operation_type: str  # 'upload', 'download', 'move', 'delete'
    file_data: Any
    metadata: Dict
    callback: Optional[callable] = None
    priority: int = 2
    created_at: datetime = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()

class BatchFileManager:
    """Manages batch file operations for Google Drive"""
    
    def __init__(self, max_workers=None, credentials_file=None):
        # Use optimized config if available
        if os.getenv('USE_OPTIMIZED_CONFIG'):
            from config_optimized import OptimizedConfig
            max_workers = max_workers or OptimizedConfig.FILE_MANAGER_MAX_WORKERS
        else:
            max_workers = max_workers or 8
        
        self.max_workers = max_workers
        self.credentials_file = credentials_file or Config.GOOGLE_CREDENTIALS_FILE
        self.executor = ThreadPoolExecutor(max_workers=max_workers, thread_name_prefix="FileWorker")
        
        # Operation queues by priority
        self.operation_queues = {
            1: Queue(),  # High priority
            2: Queue(),  # Medium priority  
            3: Queue()   # Low priority
        }
        
        # Statistics
        self.stats = {
            'total_operations': 0,
            'completed_operations': 0,
            'failed_operations': 0,
            'active_workers': 0
        }
        
        # Results storage
        self.operation_results = {}
        self.failed_operations = Queue()
        
        # Thread safety
        self.stats_lock = threading.Lock()
        
        # Initialize Drive service pool
        self.drive_services = Queue(maxsize=max_workers)
        self._initialize_drive_services()
        
        logger.info(f"Batch file manager initialized with {max_workers} workers")
    
    def _initialize_drive_services(self):
        """Initialize pool of Google Drive service instances"""
        try:
            scopes = ['https://www.googleapis.com/auth/drive']
            
            for _ in range(self.max_workers):
                credentials = service_account.Credentials.from_service_account_file(
                    self.credentials_file, scopes=scopes
                )
                service = build('drive', 'v3', credentials=credentials)
                self.drive_services.put(service)
                
            logger.info(f"Initialized {self.max_workers} Google Drive service instances")
            
        except Exception as e:
            logger.error(f"Failed to initialize Drive services: {e}")
            raise
    
    def _get_drive_service(self):
        """Get a Drive service instance from the pool"""
        return self.drive_services.get()
    
    def _return_drive_service(self, service):
        """Return a Drive service instance to the pool"""
        self.drive_services.put(service)
    
    def batch_upload_files(self, upload_requests: List[Dict], callback: callable = None) -> str:
        """Upload multiple files in batch"""
        batch_id = f"batch_upload_{int(time.time() * 1000)}"
        
        try:
            # Submit batch upload task
            future = self.executor.submit(self._process_batch_upload, upload_requests, batch_id, callback)
            
            with self.stats_lock:
                self.stats['total_operations'] += len(upload_requests)
            
            logger.info(f"Batch upload queued: {batch_id} with {len(upload_requests)} files")
            return batch_id
            
        except Exception as e:
            logger.error(f"Failed to queue batch upload: {e}")
            raise
    
    def _process_batch_upload(self, upload_requests: List[Dict], batch_id: str, callback: callable = None):
        """Process batch file upload"""
        results = []
        
        try:
            with self.stats_lock:
                self.stats['active_workers'] += 1
            
            # Process uploads concurrently
            upload_futures = []
            
            for i, request in enumerate(upload_requests):
                future = self.executor.submit(self._upload_single_file, request, f"{batch_id}_{i}")
                upload_futures.append(future)
            
            # Collect results
            for future in as_completed(upload_futures):
                try:
                    result = future.result()
                    results.append(result)
                    
                    with self.stats_lock:
                        if result.get('success'):
                            self.stats['completed_operations'] += 1
                        else:
                            self.stats['failed_operations'] += 1
                            
                except Exception as e:
                    logger.error(f"Upload future failed: {e}")
                    results.append({'success': False, 'error': str(e)})
                    
                    with self.stats_lock:
                        self.stats['failed_operations'] += 1
            
            # Store batch results
            self.operation_results[batch_id] = {
                'type': 'batch_upload',
                'completed_at': datetime.now(),
                'total_files': len(upload_requests),
                'successful': len([r for r in results if r.get('success')]),
                'failed': len([r for r in results if not r.get('success')]),
                'results': results
            }
            
            # Call callback if provided
            if callback:
                callback(batch_id, True, results)
            
            logger.info(f"Batch upload completed: {batch_id}")
            
        except Exception as e:
            logger.error(f"Batch upload failed: {batch_id} - {e}")
            
            self.operation_results[batch_id] = {
                'type': 'batch_upload',
                'failed_at': datetime.now(),
                'error': str(e),
                'results': results
            }
            
            if callback:
                callback(batch_id, False, str(e))
        
        finally:
            with self.stats_lock:
                self.stats['active_workers'] -= 1
    
    def _upload_single_file(self, request: Dict, operation_id: str) -> Dict:
        """Upload a single file to Google Drive"""
        drive_service = None
        
        try:
            drive_service = self._get_drive_service()
            
            # Extract request data
            file_obj = request.get('file')
            filename = request.get('filename')
            parent_folder_id = request.get('parent_folder_id')
            client_id = request.get('client_id')
            member_name = request.get('member_name')
            
            if not all([file_obj, filename, client_id, member_name]):
                return {
                    'success': False,
                    'operation_id': operation_id,
                    'error': 'Missing required parameters'
                }
            
            # Create folder structure if needed
            folder_id = self._ensure_folder_structure(drive_service, parent_folder_id, client_id, member_name)
            
            if not folder_id:
                return {
                    'success': False,
                    'operation_id': operation_id,
                    'error': 'Failed to create folder structure'
                }
            
            # Prepare file metadata
            file_metadata = {
                'name': filename,
                'parents': [folder_id]
            }
            
            # Read file content
            if hasattr(file_obj, 'read'):
                file_content = file_obj.read()
                file_obj.seek(0)  # Reset file pointer
            else:
                file_content = file_obj
            
            # Upload file
            media = MediaIoBaseUpload(
                io.BytesIO(file_content),
                mimetype=request.get('mimetype', 'application/octet-stream'),
                resumable=True
            )
            
            uploaded_file = drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields="id, name, webViewLink, size, createdTime",
                supportsAllDrives=True
            ).execute()
            
            # Update database if policy_id provided
            if request.get('policy_id'):
                try:
                    update_data = {
                        'file_path': uploaded_file.get('name'),
                        'drive_file_id': uploaded_file.get('id'),
                        'drive_url': uploaded_file.get('webViewLink'),
                        'drive_path': f"{client_id}/{member_name}/{filename}"
                    }
                    
                    execute_query(
                        'policies',
                        'update',
                        data=update_data,
                        filters={'policy_id': request['policy_id']}
                    )
                    
                except Exception as db_error:
                    logger.warning(f"Database update failed for {operation_id}: {db_error}")
            
            return {
                'success': True,
                'operation_id': operation_id,
                'file_id': uploaded_file.get('id'),
                'file_name': uploaded_file.get('name'),
                'web_view_link': uploaded_file.get('webViewLink'),
                'size': uploaded_file.get('size'),
                'drive_path': f"{client_id}/{member_name}/{filename}"
            }
            
        except HttpError as e:
            logger.error(f"Google Drive API error for {operation_id}: {e}")
            return {
                'success': False,
                'operation_id': operation_id,
                'error': f'Drive API error: {e}'
            }
            
        except Exception as e:
            logger.error(f"Upload error for {operation_id}: {e}")
            return {
                'success': False,
                'operation_id': operation_id,
                'error': str(e)
            }
        
        finally:
            if drive_service:
                self._return_drive_service(drive_service)
    
    def _ensure_folder_structure(self, drive_service, root_folder_id: str, client_id: str, member_name: str) -> Optional[str]:
        """Ensure folder structure exists and return final folder ID"""
        try:
            # Find or create client folder
            client_folder_id = self._find_or_create_folder(drive_service, root_folder_id, client_id)
            if not client_folder_id:
                return None
            
            # Find or create member folder
            member_folder_id = self._find_or_create_folder(drive_service, client_folder_id, member_name)
            return member_folder_id
            
        except Exception as e:
            logger.error(f"Error ensuring folder structure: {e}")
            return None
    
    def _find_or_create_folder(self, drive_service, parent_id: str, folder_name: str) -> Optional[str]:
        """Find existing folder or create new one"""
        try:
            # Search for existing folder
            query = f"'{parent_id}' in parents and mimeType='application/vnd.google-apps.folder' and name='{folder_name}' and trashed=false"
            
            results = drive_service.files().list(
                q=query,
                fields="files(id, name)",
                supportsAllDrives=True,
                includeItemsFromAllDrives=True
            ).execute()
            
            folders = results.get('files', [])
            
            if folders:
                return folders[0]['id']
            
            # Create new folder
            folder_metadata = {
                'name': folder_name,
                'mimeType': 'application/vnd.google-apps.folder',
                'parents': [parent_id]
            }
            
            created_folder = drive_service.files().create(
                body=folder_metadata,
                fields='id, name',
                supportsAllDrives=True
            ).execute()
            
            return created_folder['id']
            
        except Exception as e:
            logger.error(f"Error finding/creating folder {folder_name}: {e}")
            return None
    
    def batch_download_files(self, download_requests: List[Dict], callback: callable = None) -> str:
        """Download multiple files in batch"""
        batch_id = f"batch_download_{int(time.time() * 1000)}"
        
        try:
            # Submit batch download task
            future = self.executor.submit(self._process_batch_download, download_requests, batch_id, callback)
            
            with self.stats_lock:
                self.stats['total_operations'] += len(download_requests)
            
            logger.info(f"Batch download queued: {batch_id} with {len(download_requests)} files")
            return batch_id
            
        except Exception as e:
            logger.error(f"Failed to queue batch download: {e}")
            raise
    
    def _process_batch_download(self, download_requests: List[Dict], batch_id: str, callback: callable = None):
        """Process batch file download"""
        results = []
        
        try:
            with self.stats_lock:
                self.stats['active_workers'] += 1
            
            # Process downloads concurrently
            download_futures = []
            
            for i, request in enumerate(download_requests):
                future = self.executor.submit(self._download_single_file, request, f"{batch_id}_{i}")
                download_futures.append(future)
            
            # Collect results
            for future in as_completed(download_futures):
                try:
                    result = future.result()
                    results.append(result)
                    
                    with self.stats_lock:
                        if result.get('success'):
                            self.stats['completed_operations'] += 1
                        else:
                            self.stats['failed_operations'] += 1
                            
                except Exception as e:
                    logger.error(f"Download future failed: {e}")
                    results.append({'success': False, 'error': str(e)})
                    
                    with self.stats_lock:
                        self.stats['failed_operations'] += 1
            
            # Store batch results
            self.operation_results[batch_id] = {
                'type': 'batch_download',
                'completed_at': datetime.now(),
                'total_files': len(download_requests),
                'successful': len([r for r in results if r.get('success')]),
                'failed': len([r for r in results if not r.get('success')]),
                'results': results
            }
            
            # Call callback if provided
            if callback:
                callback(batch_id, True, results)
            
            logger.info(f"Batch download completed: {batch_id}")
            
        except Exception as e:
            logger.error(f"Batch download failed: {batch_id} - {e}")
            
            self.operation_results[batch_id] = {
                'type': 'batch_download',
                'failed_at': datetime.now(),
                'error': str(e),
                'results': results
            }
            
            if callback:
                callback(batch_id, False, str(e))
        
        finally:
            with self.stats_lock:
                self.stats['active_workers'] -= 1
    
    def _download_single_file(self, request: Dict, operation_id: str) -> Dict:
        """Download a single file from Google Drive"""
        drive_service = None
        temp_file_path = None
        
        try:
            drive_service = self._get_drive_service()
            
            file_id = request.get('file_id')
            filename = request.get('filename', f'download_{operation_id}')
            
            if not file_id:
                return {
                    'success': False,
                    'operation_id': operation_id,
                    'error': 'Missing file_id'
                }
            
            # Create temporary file
            temp_dir = tempfile.gettempdir()
            temp_file_path = os.path.join(temp_dir, filename)
            
            # Download file
            request_obj = drive_service.files().get_media(fileId=file_id)
            
            with io.FileIO(temp_file_path, 'wb') as fh:
                downloader = MediaIoBaseDownload(fh, request_obj)
                
                done = False
                while not done:
                    status, done = downloader.next_chunk()
            
            return {
                'success': True,
                'operation_id': operation_id,
                'file_id': file_id,
                'temp_file_path': temp_file_path,
                'filename': filename
            }
            
        except HttpError as e:
            logger.error(f"Google Drive API error for download {operation_id}: {e}")
            return {
                'success': False,
                'operation_id': operation_id,
                'error': f'Drive API error: {e}'
            }
            
        except Exception as e:
            logger.error(f"Download error for {operation_id}: {e}")
            return {
                'success': False,
                'operation_id': operation_id,
                'error': str(e)
            }
        
        finally:
            if drive_service:
                self._return_drive_service(drive_service)
    
    def get_batch_result(self, batch_id: str) -> Optional[Dict]:
        """Get result of a batch operation"""
        return self.operation_results.get(batch_id)
    
    def get_stats(self) -> Dict:
        """Get current operation statistics"""
        with self.stats_lock:
            return {
                **self.stats,
                'queue_sizes': {
                    priority: queue.qsize() 
                    for priority, queue in self.operation_queues.items()
                },
                'failed_queue_size': self.failed_operations.qsize()
            }
    
    def shutdown(self):
        """Gracefully shutdown the batch file manager"""
        logger.info("Shutting down batch file manager...")
        self.executor.shutdown(wait=True)
        logger.info("Batch file manager shutdown complete")

# Global batch file manager instance
# Use optimized config if available
if os.getenv('USE_OPTIMIZED_CONFIG'):
    from config_optimized import OptimizedConfig
    batch_file_manager = BatchFileManager(max_workers=OptimizedConfig.FILE_MANAGER_MAX_WORKERS)
else:
    batch_file_manager = BatchFileManager(max_workers=10)

# Convenience functions
def upload_multiple_policy_files(file_uploads: List[Dict], callback: callable = None) -> str:
    """Upload multiple policy files"""
    return batch_file_manager.batch_upload_files(file_uploads, callback)

def download_multiple_policy_files(file_downloads: List[Dict], callback: callable = None) -> str:
    """Download multiple policy files"""
    return batch_file_manager.batch_download_files(file_downloads, callback)



================================================
FILE: cache_manager.py
================================================
"""
Redis Cache Manager for Multi-User Session Management and Rate Limiting
Handles caching, session storage, and rate limiting for concurrent users
"""
import os
import json
import time
import logging
import threading
from typing import Any, Optional, Dict, List
from datetime import datetime, timedelta
from functools import wraps
import hashlib

try:
    import redis
    REDIS_AVAILABLE = True
except ImportError:
    REDIS_AVAILABLE = False
    redis = None

logger = logging.getLogger(__name__)

class CacheManager:
    """Redis-based cache manager with fallback to in-memory storage"""
    
    def __init__(self, redis_url=None, fallback_to_memory=True):
        self.redis_client = None
        self.fallback_to_memory = fallback_to_memory
        self.memory_cache = {}
        self.memory_cache_lock = threading.Lock()
        
        # Rate limiting storage
        self.rate_limits = {}
        self.rate_limits_lock = threading.Lock()
        
        # Session storage
        self.sessions = {}
        self.sessions_lock = threading.Lock()
        
        # Initialize Redis if available
        if REDIS_AVAILABLE and redis_url:
            try:
                self.redis_client = redis.from_url(
                    redis_url,
                    decode_responses=True,
                    socket_connect_timeout=5,
                    socket_timeout=5,
                    retry_on_timeout=True
                )
                
                # Test connection
                self.redis_client.ping()
                logger.info("Redis cache manager initialized successfully")
                
            except Exception as e:
                logger.warning(f"Redis connection failed: {e}")
                if not fallback_to_memory:
                    raise
                logger.info("Falling back to in-memory cache")
                self.redis_client = None
        else:
            if not REDIS_AVAILABLE:
                logger.warning("Redis not available, using in-memory cache")
            else:
                logger.info("Redis URL not provided, using in-memory cache")
    
    def _serialize_value(self, value: Any) -> str:
        """Serialize value for storage"""
        if isinstance(value, (dict, list)):
            return json.dumps(value)
        elif isinstance(value, (int, float, bool)):
            return str(value)
        else:
            return str(value)
    
    def _deserialize_value(self, value: str, value_type: str = 'auto') -> Any:
        """Deserialize value from storage"""
        if not value:
            return None
        
        if value_type == 'json':
            try:
                return json.loads(value)
            except:
                return value
        elif value_type == 'int':
            try:
                return int(value)
            except:
                return 0
        elif value_type == 'float':
            try:
                return float(value)
            except:
                return 0.0
        else:
            # Auto-detect type
            try:
                return json.loads(value)
            except:
                try:
                    return int(value)
                except:
                    try:
                        return float(value)
                    except:
                        return value
    
    def set(self, key: str, value: Any, ttl: int = None) -> bool:
        """Set a value in cache with optional TTL (seconds)"""
        try:
            serialized_value = self._serialize_value(value)
            
            if self.redis_client:
                if ttl:
                    return self.redis_client.setex(key, ttl, serialized_value)
                else:
                    return self.redis_client.set(key, serialized_value)
            else:
                # Fallback to memory
                with self.memory_cache_lock:
                    expiry = datetime.now() + timedelta(seconds=ttl) if ttl else None
                    self.memory_cache[key] = {
                        'value': serialized_value,
                        'expiry': expiry
                    }
                return True
                
        except Exception as e:
            logger.error(f"Cache set error for key {key}: {e}")
            return False
    
    def get(self, key: str, default: Any = None, value_type: str = 'auto') -> Any:
        """Get a value from cache"""
        try:
            if self.redis_client:
                value = self.redis_client.get(key)
                if value is not None:
                    return self._deserialize_value(value, value_type)
            else:
                # Fallback to memory
                with self.memory_cache_lock:
                    cached_item = self.memory_cache.get(key)
                    if cached_item:
                        # Check expiry
                        if cached_item['expiry'] and datetime.now() > cached_item['expiry']:
                            del self.memory_cache[key]
                            return default
                        return self._deserialize_value(cached_item['value'], value_type)
            
            return default
            
        except Exception as e:
            logger.error(f"Cache get error for key {key}: {e}")
            return default
    
    def delete(self, key: str) -> bool:
        """Delete a key from cache"""
        try:
            if self.redis_client:
                return bool(self.redis_client.delete(key))
            else:
                # Fallback to memory
                with self.memory_cache_lock:
                    if key in self.memory_cache:
                        del self.memory_cache[key]
                        return True
                return False
                
        except Exception as e:
            logger.error(f"Cache delete error for key {key}: {e}")
            return False
    
    def exists(self, key: str) -> bool:
        """Check if key exists in cache"""
        try:
            if self.redis_client:
                return bool(self.redis_client.exists(key))
            else:
                # Fallback to memory
                with self.memory_cache_lock:
                    cached_item = self.memory_cache.get(key)
                    if cached_item:
                        # Check expiry
                        if cached_item['expiry'] and datetime.now() > cached_item['expiry']:
                            del self.memory_cache[key]
                            return False
                        return True
                return False
                
        except Exception as e:
            logger.error(f"Cache exists error for key {key}: {e}")
            return False
    
    def increment(self, key: str, amount: int = 1, ttl: int = None) -> int:
        """Increment a counter in cache"""
        try:
            if self.redis_client:
                if ttl and not self.redis_client.exists(key):
                    # Set initial value with TTL
                    self.redis_client.setex(key, ttl, 0)
                
                result = self.redis_client.incr(key, amount)
                
                # Set TTL if key was just created
                if ttl and result == amount:
                    self.redis_client.expire(key, ttl)
                
                return result
            else:
                # Fallback to memory
                with self.memory_cache_lock:
                    cached_item = self.memory_cache.get(key)
                    
                    if cached_item:
                        # Check expiry
                        if cached_item['expiry'] and datetime.now() > cached_item['expiry']:
                            del self.memory_cache[key]
                            cached_item = None
                    
                    if not cached_item:
                        expiry = datetime.now() + timedelta(seconds=ttl) if ttl else None
                        self.memory_cache[key] = {
                            'value': str(amount),
                            'expiry': expiry
                        }
                        return amount
                    else:
                        current_value = int(cached_item['value']) + amount
                        cached_item['value'] = str(current_value)
                        return current_value
                        
        except Exception as e:
            logger.error(f"Cache increment error for key {key}: {e}")
            return 0
    
    def get_keys_pattern(self, pattern: str) -> List[str]:
        """Get keys matching a pattern"""
        try:
            if self.redis_client:
                return self.redis_client.keys(pattern)
            else:
                # Fallback to memory - simple pattern matching
                import fnmatch
                with self.memory_cache_lock:
                    return [key for key in self.memory_cache.keys() if fnmatch.fnmatch(key, pattern)]
                    
        except Exception as e:
            logger.error(f"Cache keys pattern error for {pattern}: {e}")
            return []
    
    def clear_expired(self):
        """Clear expired items from memory cache"""
        if not self.redis_client:
            with self.memory_cache_lock:
                now = datetime.now()
                expired_keys = [
                    key for key, item in self.memory_cache.items()
                    if item['expiry'] and now > item['expiry']
                ]
                
                for key in expired_keys:
                    del self.memory_cache[key]
                
                if expired_keys:
                    logger.info(f"Cleared {len(expired_keys)} expired cache items")

class RateLimiter:
    """Rate limiter using cache manager"""
    
    def __init__(self, cache_manager: CacheManager):
        self.cache = cache_manager
    
    def is_rate_limited(self, identifier: str, limit: int, window: int) -> bool:
        """
        Check if identifier is rate limited
        
        Args:
            identifier: Unique identifier (IP, user ID, etc.)
            limit: Maximum requests allowed
            window: Time window in seconds
        
        Returns:
            True if rate limited, False otherwise
        """
        key = f"rate_limit:{identifier}:{window}"
        
        try:
            current_count = self.cache.increment(key, 1, window)
            return current_count > limit
            
        except Exception as e:
            logger.error(f"Rate limit check error for {identifier}: {e}")
            return False
    
    def get_rate_limit_info(self, identifier: str, window: int) -> Dict:
        """Get current rate limit information"""
        key = f"rate_limit:{identifier}:{window}"
        
        try:
            current_count = self.cache.get(key, 0, 'int')
            
            return {
                'current_count': current_count,
                'window': window,
                'key': key
            }
            
        except Exception as e:
            logger.error(f"Rate limit info error for {identifier}: {e}")
            return {'current_count': 0, 'window': window, 'key': key}

class SessionManager:
    """Session manager using cache manager"""
    
    def __init__(self, cache_manager: CacheManager, default_ttl: int = 3600):
        self.cache = cache_manager
        self.default_ttl = default_ttl
    
    def create_session(self, session_id: str, user_data: Dict, ttl: int = None) -> bool:
        """Create a new session"""
        key = f"session:{session_id}"
        session_data = {
            'user_data': user_data,
            'created_at': datetime.now().isoformat(),
            'last_activity': datetime.now().isoformat()
        }
        
        return self.cache.set(key, session_data, ttl or self.default_ttl)
    
    def get_session(self, session_id: str) -> Optional[Dict]:
        """Get session data"""
        key = f"session:{session_id}"
        return self.cache.get(key, value_type='json')
    
    def update_session(self, session_id: str, user_data: Dict, extend_ttl: bool = True) -> bool:
        """Update session data"""
        key = f"session:{session_id}"
        session_data = self.get_session(session_id)
        
        if not session_data:
            return False
        
        session_data['user_data'].update(user_data)
        session_data['last_activity'] = datetime.now().isoformat()
        
        ttl = self.default_ttl if extend_ttl else None
        return self.cache.set(key, session_data, ttl)
    
    def delete_session(self, session_id: str) -> bool:
        """Delete a session"""
        key = f"session:{session_id}"
        return self.cache.delete(key)
    
    def extend_session(self, session_id: str, ttl: int = None) -> bool:
        """Extend session TTL"""
        session_data = self.get_session(session_id)
        if session_data:
            session_data['last_activity'] = datetime.now().isoformat()
            return self.cache.set(f"session:{session_id}", session_data, ttl or self.default_ttl)
        return False

# Initialize cache manager
redis_url = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
cache_manager = CacheManager(redis_url=redis_url, fallback_to_memory=True)

# Initialize rate limiter and session manager
rate_limiter = RateLimiter(cache_manager)
session_manager = SessionManager(cache_manager, default_ttl=7200)  # 2 hours

# Decorators for easy use
def rate_limit(limit: int, window: int = 60, key_func=None):
    """Rate limiting decorator"""
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            from flask import request, jsonify
            
            # Determine identifier
            if key_func:
                identifier = key_func(*args, **kwargs)
            else:
                identifier = request.remote_addr
            
            if rate_limiter.is_rate_limited(identifier, limit, window):
                return jsonify({
                    'error': 'Rate limit exceeded',
                    'limit': limit,
                    'window': window
                }), 429
            
            return func(*args, **kwargs)
        
        return wrapper
    return decorator

def cache_result(ttl: int = 300, key_func=None):
    """Cache function result decorator"""
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            # Generate cache key
            if key_func:
                cache_key = key_func(*args, **kwargs)
            else:
                # Generate key from function name and arguments
                arg_str = str(args) + str(sorted(kwargs.items()))
                cache_key = f"cache:{func.__name__}:{hashlib.md5(arg_str.encode()).hexdigest()}"
            
            # Try to get from cache
            cached_result = cache_manager.get(cache_key, value_type='json')
            if cached_result is not None:
                return cached_result
            
            # Execute function and cache result
            result = func(*args, **kwargs)
            cache_manager.set(cache_key, result, ttl)
            
            return result
        
        return wrapper
    return decorator

# Utility functions
def cache_user_policies(user_id: str, policies: List[Dict], ttl: int = 600):
    """Cache user policies"""
    key = f"user_policies:{user_id}"
    return cache_manager.set(key, policies, ttl)

def get_cached_user_policies(user_id: str) -> Optional[List[Dict]]:
    """Get cached user policies"""
    key = f"user_policies:{user_id}"
    return cache_manager.get(key, value_type='json')

def cache_client_data(phone: str, client_data: Dict, ttl: int = 1800):
    """Cache client data by phone"""
    key = f"client_data:{phone}"
    return cache_manager.set(key, client_data, ttl)

def get_cached_client_data(phone: str) -> Optional[Dict]:
    """Get cached client data by phone"""
    key = f"client_data:{phone}"
    return cache_manager.get(key, value_type='json')

def clear_user_cache(user_id: str):
    """Clear all cache entries for a user"""
    patterns = [
        f"user_policies:{user_id}",
        f"session:{user_id}*",
        f"rate_limit:{user_id}*"
    ]
    
    for pattern in patterns:
        keys = cache_manager.get_keys_pattern(pattern)
        for key in keys:
            cache_manager.delete(key)

def get_cache_stats() -> Dict:
    """Get cache statistics"""
    try:
        if cache_manager.redis_client:
            info = cache_manager.redis_client.info()
            return {
                'type': 'redis',
                'connected_clients': info.get('connected_clients', 0),
                'used_memory': info.get('used_memory_human', '0'),
                'keyspace_hits': info.get('keyspace_hits', 0),
                'keyspace_misses': info.get('keyspace_misses', 0),
                'total_commands_processed': info.get('total_commands_processed', 0)
            }
        else:
            with cache_manager.memory_cache_lock:
                return {
                    'type': 'memory',
                    'total_keys': len(cache_manager.memory_cache),
                    'memory_usage': 'N/A'
                }
    except Exception as e:
        logger.error(f"Error getting cache stats: {e}")
        return {'type': 'error', 'message': str(e)}



================================================
FILE: check_user_role.py
================================================
#!/usr/bin/env python3
"""
Script to check and display user role from database
"""

import sys
import os
from supabase import create_client

# Add the current directory to Python path to import config
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from dynamic_config import Config
except ImportError:
    # Fallback to regular config if dynamic_config doesn't exist
    from config import Config

def check_user_role(email):
    """Check user role in database"""
    print(f"🔍 Checking user role for {email}...")
    
    # Initialize Supabase client
    supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
    
    try:
        # Get user from database
        result = supabase.table('users').select('*').eq('email', email).execute()
        
        if not result.data:
            print(f"❌ User {email} not found in database")
            return False
        
        user = result.data[0]
        print(f"📋 User details from database:")
        print(f"   Email: {user.get('email')}")
        print(f"   Name: {user.get('name')}")
        print(f"   Role: {user.get('role')}")
        print(f"   Is Admin (legacy): {user.get('is_admin')}")
        print(f"   Created At: {user.get('created_at')}")
        print(f"   Last Login: {user.get('last_login')}")
        
        # Check if role is admin
        if user.get('role') == 'admin':
            print("✅ User has admin role")
        else:
            print("❌ User does NOT have admin role")
            print("🔧 Attempting to fix...")
            
            # Update user role to admin
            update_result = supabase.table('users').update({
                'role': 'admin',
                'is_admin': True
            }).eq('email', email).execute()
            
            if update_result.data:
                print("✅ Successfully updated user role to admin")
                
                # Verify the update
                verify_result = supabase.table('users').select('role, is_admin').eq('email', email).execute()
                if verify_result.data:
                    updated_user = verify_result.data[0]
                    print(f"✅ Verified - Role: {updated_user.get('role')}, Is Admin: {updated_user.get('is_admin')}")
                
                return True
            else:
                print("❌ Failed to update user role")
                return False
        
        return True
            
    except Exception as e:
        print(f"❌ Error: {e}")
        return False

def main():
    if len(sys.argv) != 2:
        print("Usage: python check_user_role.py <email>")
        print("Example: python check_user_role.py dhruvsshah05@gmail.com")
        sys.exit(1)
    
    email = sys.argv[1]
    success = check_user_role(email)
    
    if success:
        print("\n🚀 Next steps:")
        print("1. Restart the application server")
        print("2. Clear browser cache or use incognito mode")
        print("3. Login again")
        print("4. Try accessing settings page")
    else:
        print("\n❌ Failed to check/fix user role. Please check the error messages above.")
        sys.exit(1)

if __name__ == "__main__":
    main()



================================================
FILE: check_users.py
================================================
#!/usr/bin/env python3
"""
User Role Checker
Check current users and their roles in the system
"""

import os
from dotenv import load_dotenv

load_dotenv()

def check_users():
    """Check all users and their roles"""
    try:
        from models import User
        
        print("👥 Current Users in System:")
        print("=" * 50)
        
        users = User.get_all_users()
        
        if not users:
            print("❌ No users found in the database")
            return
        
        for user in users:
            role_emoji = "👑" if user.get('role') == 'admin' else "👤"
            status = "ADMIN" if user.get('role') == 'admin' else "MEMBER"
            
            print(f"{role_emoji} {user.get('email', 'N/A')}")
            print(f"   Name: {user.get('name', 'N/A')}")
            print(f"   Role: {status}")
            print(f"   Created: {user.get('created_at', 'N/A')}")
            print(f"   Last Login: {user.get('last_login', 'Never')}")
            print()
        
        # Check for specific user
        target_email = "dhruvsshah05@gmail.com"
        target_user = next((u for u in users if u.get('email') == target_email), None)
        
        if target_user:
            print(f"🔍 Status for {target_email}:")
            print(f"   Role: {target_user.get('role', 'Unknown').upper()}")
            if target_user.get('role') != 'admin':
                print(f"   ⚠️  You are currently a MEMBER, not an admin")
                print(f"   💡 To access settings, you need admin role")
        else:
            print(f"❌ User {target_email} not found in database")
            print(f"   💡 You may need to log in first to create your account")
        
    except Exception as e:
        print(f"❌ Error checking users: {e}")

def make_user_admin(email):
    """Make a user admin"""
    try:
        from models import User
        
        success, message = User.update_user_role(email, 'admin', 'system_admin')
        
        if success:
            print(f"✅ {email} is now an admin!")
        else:
            print(f"❌ Failed to make {email} admin: {message}")
            
    except Exception as e:
        print(f"❌ Error updating user role: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "make-admin":
        if len(sys.argv) > 2:
            email = sys.argv[2]
            print(f"🔧 Making {email} an admin...")
            make_user_admin(email)
        else:
            print("Usage: python check_users.py make-admin <email>")
    else:
        check_users()



================================================
FILE: claims_enhancement_migration.sql
================================================
-- Enhancement migration for claims table
-- Add approved_amount and claim_number fields (manual input)
-- Run this SQL script in your Supabase SQL editor

-- Add the new columns to the claims table
ALTER TABLE public.claims 
ADD COLUMN IF NOT EXISTS approved_amount NUMERIC(12,2),
ADD COLUMN IF NOT EXISTS claim_number VARCHAR(50) UNIQUE;

-- Add index for better performance on claim_number lookups
CREATE INDEX IF NOT EXISTS idx_claims_claim_number ON public.claims (claim_number);

-- Add comments to document the new fields
COMMENT ON COLUMN public.claims.approved_amount IS 'Amount approved by insurance company for the claim';
COMMENT ON COLUMN public.claims.claim_number IS 'Claim number provided by insurance company (manual input)';

-- Verify the changes
SELECT column_name, data_type, is_nullable, column_default
FROM information_schema.columns 
WHERE table_name = 'claims' 
AND column_name IN ('approved_amount', 'claim_number')
ORDER BY ordinal_position;



================================================
FILE: claims_migration.sql
================================================
-- Migration to create claims tables
-- Run this SQL script in your Supabase SQL editor

-- Create claims table
CREATE TABLE IF NOT EXISTS public.claims (
    claim_id SERIAL PRIMARY KEY,
    policy_id INTEGER REFERENCES policies(policy_id) ON DELETE CASCADE,
    member_name VARCHAR(255) NOT NULL,
    claim_type VARCHAR(20) NOT NULL CHECK (claim_type IN ('CASHLESS', 'REIMBURSEMENT')),
    diagnosis TEXT,
    hospital_name VARCHAR(255),
    admission_date DATE,
    discharge_date DATE,
    claimed_amount NUMERIC(12,2),
    settled_amount NUMERIC(12,2),
    settlement_date DATE,
    utr_no VARCHAR(100),
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'PROCESSING', 'APPROVED', 'REJECTED', 'SETTLED')),
    remarks TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Create claim documents table
CREATE TABLE IF NOT EXISTS public.claim_documents (
    document_id SERIAL PRIMARY KEY,
    claim_id INTEGER REFERENCES claims(claim_id) ON DELETE CASCADE,
    document_name VARCHAR(255) NOT NULL,
    document_type VARCHAR(50) NOT NULL, -- 'MEDICAL_BILL', 'DISCHARGE_SUMMARY', 'PRESCRIPTION', 'LAB_REPORT', 'OTHER'
    drive_file_id VARCHAR(255),
    drive_url TEXT,
    drive_path TEXT,
    file_size INTEGER,
    uploaded_at TIMESTAMP DEFAULT NOW()
);

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_claims_policy_id ON public.claims (policy_id);
CREATE INDEX IF NOT EXISTS idx_claims_status ON public.claims (status);
CREATE INDEX IF NOT EXISTS idx_claims_created_at ON public.claims (created_at);
CREATE INDEX IF NOT EXISTS idx_claims_settlement_date ON public.claims (settlement_date);
CREATE INDEX IF NOT EXISTS idx_claim_documents_claim_id ON public.claim_documents (claim_id);

-- Add comments to document the tables
COMMENT ON TABLE public.claims IS 'Insurance claims submitted by policyholders';
COMMENT ON TABLE public.claim_documents IS 'Documents uploaded for insurance claims';

COMMENT ON COLUMN public.claims.claim_type IS 'Type of claim: CASHLESS or REIMBURSEMENT';
COMMENT ON COLUMN public.claims.status IS 'Current status of the claim';
COMMENT ON COLUMN public.claim_documents.document_type IS 'Category of the uploaded document';

-- Create a function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_claims_updated_at 
    BEFORE UPDATE ON public.claims 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Verify the changes
SELECT table_name, column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name IN ('claims', 'claim_documents') 
ORDER BY table_name, ordinal_position;



================================================
FILE: CLAIMS_SEARCH_ENHANCEMENT.md
================================================
# Claims Search Enhancement

## Overview
Enhanced the claims management system to support searching by client and then by policy of that client, in addition to the existing policy number search functionality.

## Changes Made

### 1. Backend API Endpoints (routes/claims.py)

#### New API Endpoints Added:

**`/claims/api/search-clients`**
- **Purpose**: Search for clients by name with autocomplete functionality
- **Method**: GET
- **Parameters**: `search` (minimum 2 characters)
- **Returns**: JSON array of matching clients with `client_id` and `name`
- **Features**: Case-insensitive search, limited to 10 results

**`/claims/api/client-policies`**
- **Purpose**: Get all policies for a specific client
- **Method**: GET
- **Parameters**: `client_id` (required)
- **Returns**: JSON array of policies with policy details and associated members
- **Features**: Handles both regular and health insurance policies

### 2. Enhanced Claims Index Route

**Updated `/claims/` route**
- Added support for filtering by `client_id`, `policy_number`, and general `search`
- Enhanced query building with proper Supabase filtering
- Added text search across claim numbers, member names, client names, and policy numbers
- Returns additional context variables for template rendering

### 3. Frontend Enhancements (templates/claims.html)

#### New Search Interface:
- **General Search**: Text input for searching across all claim fields
- **Client Search**: Autocomplete input with dropdown results
- **Policy Selection**: Dynamic dropdown populated based on selected client
- **Filter Display**: Shows active filters with clear options

#### JavaScript Functionality:
- Real-time client search with debouncing (300ms delay)
- Dynamic policy loading based on client selection
- Proper handling of template variables and form state
- Click-outside-to-close functionality for dropdowns

### 4. User Experience Improvements

#### Search Capabilities:
1. **General Search**: Search by claim number, member name, client name, or policy number
2. **Client-First Search**: 
   - Type client name to get autocomplete suggestions
   - Select client to see their policies
   - Choose specific policy or view all policies for that client
3. **Combined Filtering**: Use multiple search criteria together

#### Visual Feedback:
- Loading states for dynamic content
- Clear filter indicators
- Responsive design for different screen sizes
- Hover effects and proper styling

## Usage Instructions

### For End Users:

1. **General Search**:
   - Use the "General Search" field to search across all claims
   - Enter claim number, member name, client name, or policy number

2. **Client-Based Search**:
   - Start typing in the "Search by Client" field
   - Select a client from the dropdown suggestions
   - Choose a specific policy from the "Select Policy" dropdown
   - Click "Search" to filter results

3. **Clearing Filters**:
   - Click the "Clear" button to reset all filters
   - Or click "Clear Filter" when viewing filtered results

### For Developers:

#### API Usage:
```javascript
// Search clients
fetch('/claims/api/search-clients?search=client_name')
  .then(response => response.json())
  .then(data => console.log(data.clients));

// Get client policies
fetch('/claims/api/client-policies?client_id=CLIENT001')
  .then(response => response.json())
  .then(data => console.log(data.policies));
```

#### URL Parameters:
- `?search=term` - General text search
- `?client_id=CLIENT001` - Filter by specific client
- `?policy_number=POL001` - Filter by specific policy
- Combine parameters: `?client_id=CLIENT001&policy_number=POL001`

## Database Requirements

The enhancement works with the existing database structure:
- `clients` table with `client_id` and `name` fields
- `policies` table with relationships to clients and members
- `claims` table with relationships to policies
- `health_insurance_details` and `health_insured_members` for health policies

## Testing

A test script `test_claims_search.py` has been created to verify the functionality:
- Tests client search API
- Tests client policies API  
- Tests claims filtering with various parameters

## Benefits

1. **Improved User Experience**: Easier to find claims for specific clients
2. **Flexible Search Options**: Multiple ways to search and filter claims
3. **Scalability**: Efficient database queries with proper filtering
4. **Maintainability**: Clean separation of API endpoints and frontend logic
5. **Performance**: Debounced search requests and limited result sets

## Future Enhancements

Potential improvements for future versions:
- Add search by date ranges
- Include claim status filtering in the search interface
- Add export functionality for filtered results
- Implement pagination for large result sets
- Add search history/favorites functionality



================================================
FILE: clear_user_cache.py
================================================
#!/usr/bin/env python3
"""
Script to clear user cache to force reload of user data from database.
This is useful after updating user roles.
"""

import sys
import os

# Add the current directory to Python path to import modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from cache_manager import cache_manager
    from dynamic_config import Config
except ImportError as e:
    print(f"❌ Import error: {e}")
    print("Make sure you're running this from the application directory")
    sys.exit(1)

def clear_user_cache(email=None):
    """Clear user cache for a specific user or all users"""
    print("🧹 Clearing user cache...")
    
    try:
        if email:
            # Clear specific user cache
            cache_key = f"user_{email}"
            result = cache_manager.delete(cache_key)
            if result:
                print(f"✅ Cleared cache for user: {email}")
            else:
                print(f"ℹ️  No cache found for user: {email}")
        else:
            # Clear all user caches (pattern matching)
            # This is a simple approach - delete common user cache keys
            print("🔄 Clearing all user caches...")
            
            # Try to clear cache for the admin user specifically
            admin_emails = ["dhruvsshah05@gmail.com"]  # Add other admin emails if needed
            
            for admin_email in admin_emails:
                cache_key = f"user_{admin_email}"
                result = cache_manager.delete(cache_key)
                if result:
                    print(f"✅ Cleared cache for: {admin_email}")
                else:
                    print(f"ℹ️  No cache found for: {admin_email}")
        
        print("🎉 Cache clearing complete!")
        print("\n🚀 Next steps:")
        print("1. Restart the application server")
        print("2. Login again")
        print("3. Check if Settings link appears in dashboard")
        
    except Exception as e:
        print(f"❌ Error clearing cache: {e}")
        return False
    
    return True

def main():
    email = None
    if len(sys.argv) > 1:
        email = sys.argv[1]
    
    success = clear_user_cache(email)
    
    if not success:
        sys.exit(1)

if __name__ == "__main__":
    main()



================================================
FILE: clear_user_session.py
================================================
#!/usr/bin/env python3
"""
Clear user session and cache to force fresh login
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from cache_manager import CacheManager
import redis

def main():
    email = "dhruvsshah05@gmail.com"
    
    print(f"=== Clearing Session and Cache for {email} ===\n")
    
    # 1. Clear user cache
    try:
        cache_manager = CacheManager()
        cache_key = f"user_{email}"
        
        # Delete user cache
        result = cache_manager.delete(cache_key)
        print(f"1. User cache cleared: {result}")
        
        # Also try to clear any session-related cache
        session_keys = [
            f"session_{email}",
            f"flask_session_{email}",
            f"user_session_{email}"
        ]
        
        for key in session_keys:
            try:
                cache_manager.delete(key)
                print(f"   Cleared potential session key: {key}")
            except:
                pass
                
    except Exception as e:
        print(f"1. Cache clear error: {e}")
    
    # 2. Try to clear Redis sessions directly (if Redis is available)
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        
        # Get all keys that might be related to sessions
        session_keys = r.keys("flask_session:*")
        user_keys = r.keys(f"*{email}*")
        
        all_keys = session_keys + user_keys
        
        if all_keys:
            deleted = r.delete(*all_keys)
            print(f"2. Deleted {deleted} Redis session keys")
        else:
            print("2. No Redis session keys found")
            
    except Exception as e:
        print(f"2. Redis clear error: {e}")
    
    print("\n" + "="*50)
    print("Session and cache cleared!")
    print("Please:")
    print("1. Close your browser completely")
    print("2. Restart the Flask application")
    print("3. Open a new browser window and login again")
    print("="*50)

if __name__ == "__main__":
    main()



================================================
FILE: CLIENT_EXPORT_FEATURE.md
================================================
# Client Data Export Feature Implementation

## 🎯 Feature Overview
Successfully implemented a comprehensive client data export feature that generates professional Excel files containing all of a client's active policy information, including health and factory insurance details, with client-friendly formatting.

## ✅ Implementation Complete

### **1. Backend Route (`routes/client_export.py`)**
- **Route**: `/export_client_data/<client_id>`
- **Method**: GET (login required)
- **Functionality**:
  - Fetches all active policies for specified client
  - Retrieves health insurance details and members
  - Retrieves factory insurance coverage details
  - Generates professionally formatted Excel file
  - Returns file as download with proper filename

### **2. Excel Generation Features**
- **Single comprehensive sheet** with all policy data
- **Client-friendly column names** (not database field names)
- **Professional formatting**:
  - Blue header with white text
  - Bordered cells for clarity
  - Auto-adjusted column widths
  - Numeric formatting for monetary values
  - Proper date formatting (DD/MM/YYYY)

### **3. Data Included**

#### **Basic Policy Information:**
- Policy Number
- Insurance Company
- Product Type
- Agent Name
- Policy Start Date
- Policy End Date
- Payment Date
- Business Type (New/Renewal/Roll Over)
- Group
- Subgroup
- Remarks
- Sum Insured
- Net Premium
- Gross Premium
- TP/TR Premium

#### **Health Insurance Details (when applicable):**
- Health Plan Type (Floater/Individual)
- Dynamic member columns:
  - Member 1 Name, Sum Insured, Bonus
  - Member 2 Name, Sum Insured, Bonus
  - (Additional columns based on maximum members across all policies)

#### **Factory Insurance Details (when applicable):**
- Building Coverage
- Plant & Machinery Coverage
- Furniture & Fittings Coverage
- Stocks Coverage
- Electrical Installations Coverage

### **4. Data Excluded (Internal Business Data)**
- ✅ One-time insurance flags
- ✅ Commission details
- ✅ File paths and Google Drive data
- ✅ Database timestamps
- ✅ Internal IDs
- ✅ Payment reference details
- ✅ WhatsApp tracking data

### **5. User Interface Integration**
- **Location**: Client management page (`view_all_clients.html`)
- **Button**: "Export Data" button in client header
- **Visibility**: Only shown for clients with active policies
- **Styling**: Professional button with hover effects
- **Functionality**: 
  - Prevents event bubbling (doesn't expand client details)
  - Shows helpful tooltip with client ID
  - Responsive design for mobile devices

### **6. File Naming Convention**
- **Format**: `{CLIENT_ID}_data.xlsx`
- **Examples**: 
  - `DS01_data.xlsx`
  - `MH02_data.xlsx`
  - `GJ15_data.xlsx`

## 🔧 Technical Implementation

### **Dynamic Column Generation**
- Automatically determines maximum number of health members across all policies
- Creates appropriate number of member columns
- Handles cases where policies have different numbers of members
- Empty cells for policies without health/factory insurance

### **Error Handling**
- Client not found validation
- No policies found warning
- Excel generation error handling
- Temporary file cleanup
- User-friendly error messages

### **Performance Optimizations**
- Single database query for policies
- Batch queries for health/factory details
- Efficient Excel generation with openpyxl
- Automatic temporary file cleanup

### **Security Features**
- Login required for access
- Client ID validation
- Only active policies (no pending policies)
- No sensitive internal data exposed

## 📊 Excel File Structure

```
| Policy Number | Insurance Company | Product Type | ... | Health Plan Type | Member 1 Name | Member 1 Sum Insured | ... | Building Coverage | ... |
|---------------|-------------------|--------------|-----|------------------|---------------|---------------------|-----|-------------------|-----|
| POL001        | HDFC ERGO        | HEALTH       | ... | FLOATER          | John Doe      | 500000              | ... |                   | ... |
| POL002        | BAJAJ ALLIANZ    | FACTORY      | ... |                  |               |                     | ... | 1000000           | ... |
```

## 🎨 User Experience

### **Client Management Page**
- Clean, professional export button integrated into client headers
- Only visible for clients with active policies
- Hover effects and smooth animations
- Mobile-responsive design
- Clear tooltips indicating functionality

### **Export Process**
1. User clicks "Export Data" button for desired client
2. System generates Excel file with all client's active policies
3. File automatically downloads with proper naming
4. User receives professionally formatted Excel file ready for client sharing

## 🚀 Benefits

### **For Insurance Agent:**
- **Time Saving**: No more manual data compilation
- **Professional Output**: Client-ready Excel files
- **Complete Data**: All policy types in one file
- **Easy Access**: One-click export from client list
- **Error Reduction**: Automated data extraction

### **For Clients:**
- **Comprehensive Overview**: All policies in one place
- **Professional Format**: Clean, readable Excel file
- **Relevant Information**: Only client-relevant data
- **Easy Sharing**: Standard Excel format for forwarding
- **Clear Structure**: Organized columns with friendly names

## 🔄 Usage Workflow

1. **Navigate** to "All Clients" page
2. **Locate** desired client in the list
3. **Click** "Export Data" button (only visible if client has policies)
4. **Download** automatically starts
5. **Share** the `{CLIENT_ID}_data.xlsx` file with client

## 📋 Requirements Met

✅ **Single comprehensive sheet** with all data  
✅ **Client-friendly column names** (not database fields)  
✅ **Accessible from client selection page**  
✅ **File naming**: `{CLIENT_ID}_data.xlsx`  
✅ **Only active policies** (no pending policies)  
✅ **All client policies** (no date filtering)  
✅ **No client/member personal info** (they know their own details)  
✅ **Excludes internal business data**  
✅ **Includes health and factory insurance details**  
✅ **Professional formatting and styling**  

## 🎉 Ready to Use!

The client data export feature is now fully implemented and ready for production use. Users can immediately start exporting comprehensive client data with a single click, providing professional Excel files that clients can easily understand and use.

**Test the feature by:**
1. Going to the "All Clients" page
2. Finding a client with active policies
3. Clicking the "Export Data" button
4. Reviewing the generated Excel file

The system will automatically handle all the complex data relationships and formatting to provide a clean, professional output!



================================================
FILE: combined_app.py
================================================
from flask import Flask, request, jsonify, render_template
from flask_login import LoginManager
from config import Config
from auth import auth_bp, create_oauth
from routes.dashboard import dashboard_bp
from routes.policies import policies_bp
from routes.pending_policies import pending_policies_bp
from routes.existing_policies import existing_policies_bp
from routes.whatsapp_routes import whatsapp_bp
from routes.renewal_routes import renewal_bp
import os
import logging
import threading
import time
from datetime import datetime, timedelta
from logging.handlers import RotatingFileHandler

# Import WhatsApp bot functionality
from whatsapp_bot import setup_whatsapp_webhook

# Try to import Excel routes
try:
    from routes.excel_routes import excel_bp
    excel_routes_available = True
except ImportError as e:
    print(f"Excel routes not available: {e}")
    excel_routes_available = False
    excel_bp = None

# Create Flask app with production settings
app = Flask(__name__)
app.config.from_object(Config)

# Production-ready secret key
app.secret_key = os.getenv('SECRET_KEY', os.urandom(24))

# Session configuration for production multi-user environment
if Config.FLASK_ENV == "development":
   # Development: Relaxed cookie settings for local testing
   app.config.update(
       SESSION_COOKIE_SECURE=False,
       SESSION_COOKIE_HTTPONLY=True,
       SESSION_COOKIE_SAMESITE=None,  # Allow cross-origin for ngrok
       PERMANENT_SESSION_LIFETIME=timedelta(hours=8),
       MAX_CONTENT_LENGTH=50 * 1024 * 1024,
   )
else:
   # Production: Secure but ngrok-compatible settings
   app.config.update(
       SESSION_COOKIE_SECURE=False,  # Keep False for HTTP ngrok
       SESSION_COOKIE_HTTPONLY=True,
       SESSION_COOKIE_SAMESITE=None,  # Allow cross-origin for ngrok access
       PERMANENT_SESSION_LIFETIME=timedelta(hours=8),
       MAX_CONTENT_LENGTH=50 * 1024 * 1024,
   )
  
   # Multi-user optimization settings for production
   app.config.update(
       SESSION_REFRESH_EACH_REQUEST=True,  # Keep sessions active
       SEND_FILE_MAX_AGE_DEFAULT=timedelta(hours=1),  # Cache static files
      
       # Performance settings
       JSON_SORT_KEYS=False,  # Faster JSON responses
       JSONIFY_PRETTYPRINT_REGULAR=False,  # Compact JSON in production
   )


# Setup logging for production
if not app.debug:
    if not os.path.exists('logs'):
        os.mkdir('logs')
    
    file_handler = RotatingFileHandler('logs/insurance_portal.log', 
                                     maxBytes=10240000, backupCount=10)
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
    ))
    file_handler.setLevel(logging.INFO)
    app.logger.addHandler(file_handler)
    app.logger.setLevel(logging.INFO)
    app.logger.info('Insurance Portal startup')

# Flask-Login setup
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "auth.login"
login_manager.login_message = "Please log in to access this page."
login_manager.login_message_category = "info"

from models import User


@login_manager.user_loader
def load_user(user_id):
    if user_id is None:
        return None
    return User.get_or_create(user_id)


# Initialize OAuth
create_oauth(app)

# Custom Jinja2 filter for Indian date format (DD/MM/YYYY)
@app.template_filter('indian_date')
def indian_date_filter(date_string):
    """Convert date from YYYY-MM-DD to DD/MM/YYYY format"""
    if not date_string:
        return 'N/A'
    
    try:
        # Handle different date formats
        if isinstance(date_string, str):
            # If it's already in DD/MM/YYYY format, return as is
            if '/' in date_string and len(date_string.split('/')) == 3:
                parts = date_string.split('/')
                if len(parts[0]) == 2 and len(parts[1]) == 2 and len(parts[2]) == 4:
                    return date_string
            
            # If it's in YYYY-MM-DD format, convert to DD/MM/YYYY
            if '-' in date_string and len(date_string.split('-')) == 3:
                parts = date_string.split('-')
                if len(parts[0]) == 4:  # YYYY-MM-DD format
                    return f"{parts[2]}/{parts[1]}/{parts[0]}"
                elif len(parts[2]) == 4:  # DD-MM-YYYY format
                    return f"{parts[0]}/{parts[1]}/{parts[2]}"
        
        # Try to parse as datetime object
        if hasattr(date_string, 'strftime'):
            return date_string.strftime('%d/%m/%Y')
            
        # Try to parse string as date
        try:
            date_obj = datetime.strptime(str(date_string), '%Y-%m-%d')
            return date_obj.strftime('%d/%m/%Y')
        except ValueError:
            try:
                date_obj = datetime.strptime(str(date_string), '%d/%m/%Y')
                return date_obj.strftime('%d/%m/%Y')
            except ValueError:
                pass
        
        return str(date_string)
    except Exception as e:
        print(f"Error formatting date {date_string}: {e}")
        return str(date_string)

# Security headers middleware
@app.after_request
def after_request(response):
    """Add security headers"""
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'DENY'
    response.headers['X-XSS-Protection'] = '1; mode=block'
    return response

# Request monitoring and rate limiting
request_counts = {}
request_lock = threading.Lock()

@app.before_request
def monitor_requests():
    """Monitor requests and implement basic rate limiting"""
    client_ip = request.remote_addr
    current_time = time.time()
    
    # Clean old entries (older than 1 minute)
    with request_lock:
        request_counts[client_ip] = [
            timestamp for timestamp in request_counts.get(client_ip, [])
            if current_time - timestamp < 60
        ]
        
        # Add current request
        request_counts[client_ip].append(current_time)
        
        # Rate limiting: max 120 requests per minute per IP
        if len(request_counts[client_ip]) > 120:
            app.logger.warning(f'Rate limit exceeded for IP: {client_ip}')
            return jsonify({'error': 'Rate limit exceeded'}), 429
    
    # Log request information for monitoring
    if not app.debug:
        app.logger.info(f'{client_ip} - {request.method} {request.url} - Active users: {len(request_counts)}')

# Register blueprints
app.register_blueprint(auth_bp)
app.register_blueprint(dashboard_bp)
app.register_blueprint(policies_bp)
app.register_blueprint(pending_policies_bp)
app.register_blueprint(existing_policies_bp)
app.register_blueprint(whatsapp_bp)  # WhatsApp routes
app.register_blueprint(renewal_bp)  # Renewal routes

# Register Excel blueprint if available
if excel_routes_available and excel_bp:
    app.register_blueprint(excel_bp)
    
    # Initialize Excel sync service in background
    try:
        from excel_sync_service import initialize_excel_sync
        initialize_excel_sync()
        app.logger.info("Excel sync service initialized")
    except Exception as e:
        app.logger.warning(f"Excel sync service not available: {e}")

# Error handlers
@app.errorhandler(404)
def not_found_error(error):
    return render_template('error.html', 
                         error='Page Not Found', 
                         message='The requested page could not be found.'), 404

@app.errorhandler(500)
def internal_error(error):
    app.logger.error(f'Server Error: {error}')
    return render_template('error.html', 
                         error='Internal Server Error', 
                         message='An internal server error occurred.'), 500

@app.errorhandler(413)
def too_large(error):
    return render_template('error.html', 
                         error='File Too Large', 
                         message='The uploaded file is too large. Maximum size is 50MB.'), 413

# Setup WhatsApp webhook
setup_whatsapp_webhook(app)

if __name__ == "__main__":
    # Check required environment variables
    required_vars = ['WHATSAPP_TOKEN', 'WHATSAPP_PHONE_ID', 'VERIFY_TOKEN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        print(f"⚠️  Warning: Missing WhatsApp variables: {', '.join(missing_vars)}")
        print("WhatsApp functionality will be disabled.")
    else:
        print("✅ WhatsApp integration enabled")

    # Check Excel functionality
    if excel_routes_available:
        print("✅ Excel integration enabled")
    else:
        print("⚠️  Excel functionality disabled - install: pip install pandas openpyxl numpy")

    print("🚀 Starting Insurance Portal with Full Integration...")
    print("📱 WhatsApp webhook: http://localhost:5050/webhook")
    print("📊 Excel sync: Real-time database → Google Drive")
    print("🌐 Web portal: http://localhost:5050/")

    # Production settings
    port = int(os.getenv('PORT', 5050))
    debug = os.getenv('FLASK_ENV') == 'development'
    
    # Production server configuration for multi-user access
    if debug:
        # Development mode
        app.run(
            host='0.0.0.0',
            port=port,
            debug=True,
            threaded=True,
            use_reloader=True
        )
    else:
        # Production mode - optimized for concurrent users
        app.run(
            host='0.0.0.0',
            port=port,
            debug=False,
            threaded=True,
            processes=1,  # Use threading, not multiprocessing for shared state
            use_reloader=False,
            # Performance optimizations
            request_handler=None,  # Use default optimized handler
        )



================================================
FILE: config.py
================================================
import os
from dotenv import load_dotenv

load_dotenv()


class Config:
    # Environment
    FLASK_ENV = os.getenv("FLASK_ENV", "production")
    DEBUG = FLASK_ENV == "development"

    # Security
    SECRET_KEY = os.getenv("SECRET_KEY")
    if not SECRET_KEY:
        if FLASK_ENV == "development":
            SECRET_KEY = "dev-secret-key-change-in-production"
        else:
            raise ValueError("SECRET_KEY environment variable must be set for production")

    # Supabase
    SUPABASE_URL = os.getenv("SUPABASE_URL")
    SUPABASE_KEY = os.getenv("SUPABASE_KEY")

    if not SUPABASE_URL or not SUPABASE_KEY:
        raise ValueError("SUPABASE_URL and SUPABASE_KEY must be set")

    # Simple Authentication (replaces Clerk)
    # No external authentication service needed - using Supabase directly

    # Admin Emails (for user authorization)
    ADMIN_EMAILS_STR = os.getenv("ADMIN_EMAILS", "")
    if not ADMIN_EMAILS_STR:
        raise ValueError("ADMIN_EMAILS must be set with comma-separated email addresses")
    ADMIN_EMAILS = [email.strip() for email in ADMIN_EMAILS_STR.split(",")]

    # WhatsApp Configuration
    WHATSAPP_TOKEN = os.getenv("WHATSAPP_TOKEN")
    WHATSAPP_PHONE_ID = os.getenv("WHATSAPP_PHONE_ID")
    VERIFY_TOKEN = os.getenv("VERIFY_TOKEN", "your_webhook_verify_token")

    # Google Drive Configuration
    GOOGLE_CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_FILE", "credentials.json")

    # Archive Folder ID - Get this from your Google Drive Archive folder URL
    ARCHIVE_FOLDER_ID = os.getenv("ARCHIVE_FOLDER_ID", "YOUR_ARCHIVE_FOLDER_ID_HERE")

    # Email Configuration (Updated for Zoho Mail)
    SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.zoho.in")
    SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
    SMTP_USERNAME = os.getenv("SMTP_USERNAME")
    SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")  # Use your Zoho App Password here
    FROM_EMAIL = os.getenv("FROM_EMAIL")  # Should be the same as SMTP_USERNAME
    FROM_NAME = os.getenv("FROM_NAME", "Insta Insurance Consultancy")

    # Twilio WhatsApp
    TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID", "")
    TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN", "")
    TWILIO_WHATSAPP_FROM = os.getenv("TWILIO_WHATSAPP_FROM", "whatsapp:+14155238886")
    TWILIO_USE_CONTENT_TEMPLATE = os.getenv("TWILIO_USE_CONTENT_TEMPLATE", "false").lower() in ("1", "true", "yes")
    TWILIO_CONTENT_SID = os.getenv("TWILIO_CONTENT_SID", "")

    # Public base URL (for Twilio to fetch media); set to your deployed URL
    APP_BASE_URL = os.getenv("APP_BASE_URL", "https://admin.instainsure.co.in")


================================================
FILE: config_optimized.py
================================================
"""
Optimized Configuration for 2-4 Concurrent Users
Tuned for i3 2nd gen, 4GB RAM system
"""
import os
from config import Config

class OptimizedConfig(Config):
    """Optimized configuration for small-scale deployment (2-4 users)"""
    
    # Database Connection Pool - Reduced for 2-4 users
    DATABASE_POOL_SIZE = 3  # Down from 15
    DATABASE_MAX_OVERFLOW = 2  # Down from 30
    DATABASE_TIMEOUT = 30  # Down from 45
    DATABASE_RETRY_ATTEMPTS = 2  # Down from 3
    
    # Task Queue - Optimized for small workload
    TASK_QUEUE_MAX_WORKERS = 3  # Down from 15
    TASK_QUEUE_MAX_SIZE = 100  # Down from 1000
    TASK_PRIORITY_LEVELS = 3  # Keep all priority levels
    
    # File Operations - Reduced concurrent uploads
    FILE_MANAGER_MAX_WORKERS = 2  # Down from 10
    FILE_BATCH_SIZE = 5  # Down from 50
    FILE_UPLOAD_TIMEOUT = 60  # Keep reasonable timeout
    
    # Cache Settings - Keep Redis but optimize
    CACHE_DEFAULT_TTL = 600  # 10 minutes (down from 1800)
    CACHE_SESSION_TTL = 1800  # 30 minutes for sessions
    CACHE_USER_TTL = 900  # 15 minutes for user data
    
    # Rate Limiting - Relaxed for small user base
    RATE_LIMIT_API = 50  # Down from 100 per minute
    RATE_LIMIT_GENERAL = 100  # Down from 200 per minute
    RATE_LIMIT_WEBHOOK = 200  # Down from 1000 per minute
    
    # Monitoring - Less frequent checks
    MONITORING_INTERVAL = 60  # Every minute instead of real-time
    PERFORMANCE_WINDOW = 300  # 5 minutes instead of 15
    METRICS_RETENTION = 3600  # 1 hour instead of 24 hours
    
    # Session Management
    SESSION_PERMANENT_LIFETIME = 14400  # 4 hours instead of 8
    SESSION_REFRESH_EACH_REQUEST = False  # Reduce overhead
    
    # Flask App Settings - Optimized for small scale
    MAX_CONTENT_LENGTH = 25 * 1024 * 1024  # 25MB instead of 50MB
    SEND_FILE_MAX_AGE_DEFAULT = 1800  # 30 minutes instead of 1 hour
    
    # WSGI Server Settings (Waitress for Windows)
    WAITRESS_THREADS = 4  # Down from 20
    WAITRESS_CONNECTION_LIMIT = 100  # Down from 1000
    WAITRESS_CLEANUP_INTERVAL = 60  # More frequent cleanup
    WAITRESS_CHANNEL_TIMEOUT = 60  # Shorter timeout
    
    # Background Task Settings
    WHATSAPP_BATCH_SIZE = 5  # Down from 10
    EMAIL_BATCH_SIZE = 3  # Down from 10
    EXCEL_SYNC_BATCH_SIZE = 10  # Down from 50
    
    # Memory Management
    PYTHON_GC_THRESHOLD = (500, 8, 8)  # More aggressive garbage collection
    MAX_MEMORY_USAGE_MB = 800  # Alert if app uses more than 800MB
    
    # Excel Sync Optimization
    EXCEL_SYNC_CHUNK_SIZE = 50  # Process 50 records at a time
    EXCEL_SYNC_DELAY = 0.1  # Small delay between chunks
    EXCEL_MAX_RETRIES = 2  # Fewer retries
    
    @classmethod
    def get_database_config(cls):
        """Get optimized database configuration"""
        return {
            'pool_size': cls.DATABASE_POOL_SIZE,
            'max_overflow': cls.DATABASE_MAX_OVERFLOW,
            'pool_timeout': cls.DATABASE_TIMEOUT,
            'pool_recycle': 1800,  # 30 minutes
            'pool_pre_ping': True,
            'echo': False  # Disable SQL logging for performance
        }
    
    @classmethod
    def get_task_queue_config(cls):
        """Get optimized task queue configuration"""
        return {
            'max_workers': cls.TASK_QUEUE_MAX_WORKERS,
            'max_queue_size': cls.TASK_QUEUE_MAX_SIZE,
            'worker_timeout': 300,  # 5 minutes
            'retry_delay': 5,  # 5 seconds between retries
            'max_retries': 2
        }
    
    @classmethod
    def get_cache_config(cls):
        """Get optimized cache configuration"""
        return {
            'default_ttl': cls.CACHE_DEFAULT_TTL,
            'session_ttl': cls.CACHE_SESSION_TTL,
            'user_ttl': cls.CACHE_USER_TTL,
            'max_memory_mb': 100,  # Limit Redis memory to 100MB
            'eviction_policy': 'allkeys-lru'  # Remove least recently used
        }
    
    @classmethod
    def get_waitress_config(cls):
        """Get optimized Waitress server configuration"""
        return {
            'host': '0.0.0.0',
            'port': 5050,
            'threads': cls.WAITRESS_THREADS,
            'connection_limit': cls.WAITRESS_CONNECTION_LIMIT,
            'cleanup_interval': cls.WAITRESS_CLEANUP_INTERVAL,
            'channel_timeout': cls.WAITRESS_CHANNEL_TIMEOUT,
            'max_request_body_size': cls.MAX_CONTENT_LENGTH,
            'expose_tracebacks': False,  # Security
            'ident': 'Insurance Portal'
        }



================================================
FILE: create_test_pdf.py
================================================
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
import os

def create_test_pdf():
    """Create a test PDF file for WhatsApp template testing"""
    
    # Create the PDF file path
    pdf_path = "static/test_policy_document.pdf"
    
    # Ensure static directory exists
    os.makedirs("static", exist_ok=True)
    
    # Create PDF document
    doc = SimpleDocTemplate(pdf_path, pagesize=letter)
    styles = getSampleStyleSheet()
    
    # Content for the PDF
    content = []
    
    # Title
    title = Paragraph("<b>INSTA INSURANCE CONSULTANCY</b>", styles['Title'])
    content.append(title)
    content.append(Spacer(1, 20))
    
    # Policy Document Header
    header = Paragraph("<b>INSURANCE POLICY DOCUMENT - TEST</b>", styles['Heading1'])
    content.append(header)
    content.append(Spacer(1, 20))
    
    # Policy Details
    policy_details = """
    <b>Policy Holder:</b> Test Customer<br/>
    <b>Policy Number:</b> TEST123456<br/>
    <b>Insurance Company:</b> Test Insurance Ltd.<br/>
    <b>Product:</b> Health Insurance<br/>
    <b>Policy Start Date:</b> 08/10/2025<br/>
    <b>Policy End Date:</b> 08/10/2026<br/>
    <b>Premium Amount:</b> ₹10,000<br/>
    """
    
    details = Paragraph(policy_details, styles['Normal'])
    content.append(details)
    content.append(Spacer(1, 30))
    
    # Terms and Conditions
    terms_header = Paragraph("<b>Terms and Conditions:</b>", styles['Heading2'])
    content.append(terms_header)
    content.append(Spacer(1, 10))
    
    terms_text = """
    1. This is a test policy document created for WhatsApp template testing purposes.<br/>
    2. This document is for testing the media URL functionality.<br/>
    3. All information in this document is for testing only.<br/>
    4. Please contact Insta Insurance Consultancy for actual policy documents.<br/>
    """
    
    terms = Paragraph(terms_text, styles['Normal'])
    content.append(terms)
    content.append(Spacer(1, 30))
    
    # Footer
    footer_text = """
    <b>Contact Information:</b><br/>
    Insta Insurance Consultancy<br/>
    Email: info@instainsure.co.in<br/>
    Website: https://admin.instainsure.co.in<br/>
    <br/>
    <i>This is a test document for WhatsApp template validation.</i>
    """
    
    footer = Paragraph(footer_text, styles['Normal'])
    content.append(footer)
    
    # Build the PDF
    doc.build(content)
    
    print(f"✅ Test PDF created successfully: {pdf_path}")
    return pdf_path

if __name__ == "__main__":
    create_test_pdf()



================================================
FILE: custom_document_types_migration.sql
================================================
-- Migration to create custom document types table
-- Run this SQL script in your Supabase SQL editor

-- Create custom document types table
CREATE TABLE IF NOT EXISTS public.custom_document_types (
    id SERIAL PRIMARY KEY,
    type_name VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT NOW(),
    is_active BOOLEAN DEFAULT TRUE
);

-- Insert default document types
INSERT INTO public.custom_document_types (type_name) VALUES 
('MEDICAL_BILL'),
('DISCHARGE_SUMMARY'),
('PRESCRIPTION'),
('LAB_REPORT'),
('INVESTIGATION_REPORT'),
('DOCTOR_CERTIFICATE'),
('HOSPITAL_BILL'),
('PHARMACY_BILL')
ON CONFLICT (type_name) DO NOTHING;

-- Add index for better performance
CREATE INDEX IF NOT EXISTS idx_custom_document_types_active ON public.custom_document_types (is_active);

-- Add comment
COMMENT ON TABLE public.custom_document_types IS 'Stores custom document types that users can add for claims';



================================================
FILE: database.py
================================================
"""
Centralized Database Connection Manager for Insurance Portal
Optimized for multi-user concurrent access with connection pooling
"""

import threading
import logging
from supabase import create_client, Client
from dynamic_config import Config
from typing import Optional
import time

logger = logging.getLogger(__name__)

class DatabaseManager:
    """Thread-safe Supabase client manager with connection pooling"""
    
    _instance: Optional['DatabaseManager'] = None
    _lock = threading.Lock()
    
    def __new__(cls):
        """Singleton pattern to ensure single database manager instance"""
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(DatabaseManager, cls).__new__(cls)
        return cls._instance
    
    def __init__(self):
        """Initialize database manager with connection pooling"""
        if hasattr(self, '_initialized'):
            return
            
        self._initialized = True
        self._client: Optional[Client] = None
        self._client_lock = threading.Lock()
        self._connection_count = 0
        self._max_retries = 3
        self._retry_delay = 1.0
        
        logger.info("Database manager initialized")
    
    def get_client(self) -> Client:
        """Get thread-safe Supabase client with automatic retry"""
        with self._client_lock:
            if self._client is None:
                self._create_client()
            
            self._connection_count += 1
            return self._client
    
    def _create_client(self):
        """Create new Supabase client with retry logic"""
        for attempt in range(self._max_retries):
            try:
                self._client = create_client(
                    Config.SUPABASE_URL, 
                    Config.SUPABASE_KEY
                )
                logger.info(f"Supabase client created successfully (attempt {attempt + 1})")
                return
                
            except Exception as e:
                logger.error(f"Failed to create Supabase client (attempt {attempt + 1}): {e}")
                if attempt < self._max_retries - 1:
                    time.sleep(self._retry_delay * (attempt + 1))
                else:
                    raise Exception(f"Failed to create Supabase client after {self._max_retries} attempts")
    
    def execute_query(self, operation_name: str, query_func, max_retries: int = 2):
        """Execute database query with automatic retry and error handling"""
        client = self.get_client()
        
        for attempt in range(max_retries + 1):
            try:
                result = query_func(client)
                if attempt > 0:
                    logger.info(f"{operation_name} succeeded on retry {attempt}")
                return result
                
            except Exception as e:
                logger.error(f"{operation_name} failed (attempt {attempt + 1}): {e}")
                
                if attempt < max_retries:
                    # Recreate client on connection errors
                    if "connection" in str(e).lower() or "timeout" in str(e).lower():
                        with self._client_lock:
                            self._client = None
                        time.sleep(self._retry_delay)
                    else:
                        time.sleep(0.5)  # Shorter delay for non-connection errors
                else:
                    logger.error(f"{operation_name} failed permanently after {max_retries + 1} attempts")
                    raise e
    
    def get_connection_stats(self) -> dict:
        """Get connection statistics for monitoring"""
        return {
            'connection_count': self._connection_count,
            'client_active': self._client is not None,
            'max_retries': self._max_retries
        }
    
    def health_check(self) -> bool:
        """Perform database health check"""
        try:
            def check_query(client):
                return client.table("users").select("count", count="exact").execute()
            
            result = self.execute_query("health_check", check_query, max_retries=1)
            logger.info("Database health check passed")
            return True
            
        except Exception as e:
            logger.error(f"Database health check failed: {e}")
            return False

# Global database manager instance
db_manager = DatabaseManager()

def get_supabase() -> Client:
    """Get thread-safe Supabase client instance"""
    return db_manager.get_client()

def execute_db_operation(operation_name: str, query_func, max_retries: int = 2):
    """Execute database operation with retry logic"""
    return db_manager.execute_query(operation_name, query_func, max_retries)

# Convenience functions for common operations
def safe_select(table_name: str, columns: str = "*", filters: dict = None):
    """Safely execute SELECT query with error handling"""
    def query_func(client):
        query = client.table(table_name).select(columns)
        if filters:
            for key, value in filters.items():
                query = query.eq(key, value)
        return query.execute()
    
    return execute_db_operation(f"select_{table_name}", query_func)

def safe_insert(table_name: str, data: dict):
    """Safely execute INSERT query with error handling"""
    def query_func(client):
        return client.table(table_name).insert(data).execute()
    
    return execute_db_operation(f"insert_{table_name}", query_func)

def safe_update(table_name: str, data: dict, filters: dict):
    """Safely execute UPDATE query with error handling"""
    def query_func(client):
        query = client.table(table_name).update(data)
        for key, value in filters.items():
            query = query.eq(key, value)
        return query.execute()
    
    return execute_db_operation(f"update_{table_name}", query_func)

def safe_delete(table_name: str, filters: dict):
    """Safely execute DELETE query with error handling"""
    def query_func(client):
        query = client.table(table_name).delete()
        for key, value in filters.items():
            query = query.eq(key, value)
        return query.execute()
    
    return execute_db_operation(f"delete_{table_name}", query_func)



================================================
FILE: database.sql
================================================
-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.claim_documents (
  document_id integer NOT NULL DEFAULT nextval('claim_documents_document_id_seq'::regclass),
  claim_id integer,
  document_name character varying NOT NULL,
  document_type character varying NOT NULL,
  drive_file_id character varying,
  drive_url text,
  drive_path text,
  file_size integer,
  uploaded_at timestamp without time zone DEFAULT now(),
  CONSTRAINT claim_documents_pkey PRIMARY KEY (document_id),
  CONSTRAINT claim_documents_claim_id_fkey FOREIGN KEY (claim_id) REFERENCES public.claims(claim_id)
);
CREATE TABLE public.claims (
  claim_id integer NOT NULL DEFAULT nextval('claims_claim_id_seq'::regclass),
  policy_id integer,
  member_name character varying NOT NULL,
  claim_type character varying NOT NULL CHECK (claim_type::text = ANY (ARRAY['CASHLESS'::character varying, 'REIMBURSEMENT'::character varying, 'PRE-POST'::character varying]::text[])),
  diagnosis text,
  hospital_name character varying,
  admission_date date,
  discharge_date date,
  claimed_amount numeric,
  settled_amount numeric,
  settlement_date date,
  utr_no character varying,
  status character varying DEFAULT 'PENDING'::character varying CHECK (status::text = ANY (ARRAY['PENDING'::character varying, 'PROCESSING'::character varying, 'APPROVED'::character varying, 'REJECTED'::character varying, 'SETTLED'::character varying]::text[])),
  remarks text,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  approved_amount numeric,
  claim_number character varying UNIQUE,
  CONSTRAINT claims_pkey PRIMARY KEY (claim_id),
  CONSTRAINT claims_policy_id_fkey FOREIGN KEY (policy_id) REFERENCES public.policies(policy_id)
);
CREATE TABLE public.clients (
  client_id text NOT NULL,
  prefix text NOT NULL,
  name text NOT NULL,
  phone text,
  email text,
  CONSTRAINT clients_pkey PRIMARY KEY (client_id)
);
CREATE TABLE public.custom_document_types (
  id integer NOT NULL DEFAULT nextval('custom_document_types_id_seq'::regclass),
  type_name character varying NOT NULL UNIQUE,
  created_at timestamp without time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  CONSTRAINT custom_document_types_pkey PRIMARY KEY (id)
);
CREATE TABLE public.factory_insurance_details (
  factory_id bigint NOT NULL DEFAULT nextval('factory_insurance_details_factory_id_seq'::regclass),
  policy_id bigint NOT NULL,
  building numeric,
  plant_machinery numeric,
  furniture_fittings numeric,
  stocks numeric,
  electrical_installations numeric,
  CONSTRAINT factory_insurance_details_pkey PRIMARY KEY (factory_id),
  CONSTRAINT factory_insurance_details_policy_id_fkey FOREIGN KEY (policy_id) REFERENCES public.policies(policy_id)
);
CREATE TABLE public.health_insurance_details (
  health_id bigint NOT NULL DEFAULT nextval('health_insurance_details_health_id_seq'::regclass),
  policy_id bigint NOT NULL,
  plan_type text CHECK (plan_type = ANY (ARRAY['FLOATER'::text, 'INDIVIDUAL'::text, 'TOPUP_FLOATER'::text, 'TOPUP_INDIVIDUAL'::text])),
  floater_sum_insured numeric,
  floater_bonus numeric,
  floater_deductible numeric,
  CONSTRAINT health_insurance_details_pkey PRIMARY KEY (health_id),
  CONSTRAINT health_insurance_details_policy_id_fkey FOREIGN KEY (policy_id) REFERENCES public.policies(policy_id)
);
CREATE TABLE public.health_insured_members (
  member_id bigint NOT NULL DEFAULT nextval('health_insured_members_member_id_seq'::regclass),
  health_id bigint NOT NULL,
  member_name text NOT NULL,
  sum_insured numeric,
  bonus numeric,
  deductible numeric,
  CONSTRAINT health_insured_members_pkey PRIMARY KEY (member_id),
  CONSTRAINT health_insured_members_health_id_fkey FOREIGN KEY (health_id) REFERENCES public.health_insurance_details(health_id)
);
CREATE TABLE public.members (
  member_id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  client_id text NOT NULL,
  member_name text NOT NULL,
  CONSTRAINT members_pkey PRIMARY KEY (member_id),
  CONSTRAINT members_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.clients(client_id)
);
CREATE TABLE public.pending_factory_insurance_details (
  pending_id bigint NOT NULL,
  building numeric,
  plant_machinery numeric,
  furniture_fittings numeric,
  stocks numeric,
  electrical_installations numeric,
  CONSTRAINT pending_factory_insurance_details_pkey PRIMARY KEY (pending_id),
  CONSTRAINT pending_factory_insurance_details_pending_id_fkey FOREIGN KEY (pending_id) REFERENCES public.pending_policies(pending_id)
);
CREATE TABLE public.pending_health_insurance_details (
  pending_health_id bigint NOT NULL DEFAULT nextval('pending_health_insurance_details_pending_health_id_seq'::regclass),
  pending_id bigint NOT NULL,
  plan_type text CHECK (plan_type = ANY (ARRAY['FLOATER'::text, 'INDIVIDUAL'::text, 'TOPUP_FLOATER'::text, 'TOPUP_INDIVIDUAL'::text])),
  floater_sum_insured numeric,
  floater_bonus numeric,
  floater_deductible numeric,
  CONSTRAINT pending_health_insurance_details_pkey PRIMARY KEY (pending_health_id),
  CONSTRAINT pending_health_insurance_details_pending_id_fkey FOREIGN KEY (pending_id) REFERENCES public.pending_policies(pending_id)
);
CREATE TABLE public.pending_health_insured_members (
  member_id bigint NOT NULL DEFAULT nextval('pending_health_insured_members_member_id_seq'::regclass),
  pending_health_id bigint NOT NULL,
  member_name text NOT NULL,
  sum_insured numeric,
  bonus numeric,
  deductible numeric,
  CONSTRAINT pending_health_insured_members_pkey PRIMARY KEY (member_id),
  CONSTRAINT pending_health_insured_members_pending_health_id_fkey FOREIGN KEY (pending_health_id) REFERENCES public.pending_health_insurance_details(pending_health_id)
);
CREATE TABLE public.pending_policies (
  pending_id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  client_id text NOT NULL,
  member_id bigint NOT NULL,
  payment_date date,
  insurance_company text NOT NULL,
  agent_name text,
  policy_from date,
  policy_to date,
  one_time_insurance boolean NOT NULL DEFAULT false,
  product_name text,
  payment_details text,
  net_premium numeric,
  gross_premium numeric,
  commission_percentage numeric,
  commission numeric DEFAULT (gross_premium * (commission_percentage / (100)::numeric)),
  commission_received boolean NOT NULL DEFAULT false,
  remarks text,
  business_type text CHECK (business_type = ANY (ARRAY['NEW'::text, 'RENEWAL'::text, 'ROLL OVER'::text])),
  group_name text,
  subgroup_name text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  tp_tr_premium numeric,
  sum_insured numeric,
  addon_premium numeric,
  gst_percentage numeric DEFAULT 18.00,
  commission_amount numeric,
  CONSTRAINT pending_policies_pkey PRIMARY KEY (pending_id),
  CONSTRAINT pending_policies_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.clients(client_id),
  CONSTRAINT pending_policies_member_id_fkey FOREIGN KEY (member_id) REFERENCES public.members(member_id)
);
CREATE TABLE public.policies (
  policy_id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  client_id text NOT NULL,
  member_id bigint NOT NULL,
  policy_number text NOT NULL,
  payment_date date,
  insurance_company text NOT NULL,
  agent_name text,
  policy_from date,
  policy_to date,
  one_time_insurance boolean NOT NULL DEFAULT false,
  product_name text,
  payment_details text,
  net_premium numeric,
  gross_premium numeric,
  commission_percentage numeric,
  commission numeric DEFAULT (gross_premium * (commission_percentage / (100)::numeric)),
  commission_received boolean NOT NULL DEFAULT false,
  remarks text,
  business_type text CHECK (business_type = ANY (ARRAY['NEW'::text, 'RENEWAL'::text, 'ROLL OVER'::text])),
  group_name text,
  subgroup_name text,
  file_path text,
  drive_file_id text,
  drive_path text,
  drive_url text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  renewed_at timestamp with time zone,
  last_reminder_sent timestamp with time zone,
  tp_tr_premium numeric,
  sum_insured numeric,
  addon_premium numeric,
  gst_percentage numeric DEFAULT 18.00,
  commission_amount numeric,
  CONSTRAINT policies_pkey PRIMARY KEY (policy_id),
  CONSTRAINT policies_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.clients(client_id),
  CONSTRAINT policies_member_id_fkey FOREIGN KEY (member_id) REFERENCES public.members(member_id)
);
CREATE TABLE public.policy_history (
  history_id integer NOT NULL DEFAULT nextval('policy_history_history_id_seq'::regclass),
  original_policy_id integer NOT NULL,
  client_id text NOT NULL,
  member_id integer NOT NULL,
  insurance_company text,
  product_name text,
  policy_number text,
  one_time_insurance boolean DEFAULT false,
  commission_received boolean DEFAULT false,
  file_path text,
  drive_file_id text,
  drive_path text,
  drive_url text,
  payment_date date,
  agent_name text,
  policy_from date,
  policy_to date,
  payment_details text,
  net_premium numeric,
  addon_premium numeric,
  tp_tr_premium numeric,
  gst_percentage numeric,
  gross_premium numeric,
  commission_percentage numeric,
  commission_amount numeric,
  business_type text,
  group_name text,
  subgroup_name text,
  remarks text,
  sum_insured numeric,
  last_reminder_sent timestamp with time zone,
  renewed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  archived_at timestamp with time zone DEFAULT now(),
  archived_reason text DEFAULT 'renewal'::text,
  archived_by text,
  CONSTRAINT policy_history_pkey PRIMARY KEY (history_id),
  CONSTRAINT fk_policy_history_original_policy FOREIGN KEY (original_policy_id) REFERENCES public.policies(policy_id)
);
CREATE TABLE public.users (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  email text NOT NULL UNIQUE,
  name text NOT NULL,
  picture text,
  is_admin boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  last_login timestamp with time zone DEFAULT now(),
  is_active boolean NOT NULL DEFAULT true,
  CONSTRAINT users_pkey PRIMARY KEY (id)
);


================================================
FILE: database_pool.py
================================================
"""
Database Connection Pool Manager for Multi-User Scaling
Handles concurrent database operations with connection pooling and retry logic
"""
import threading
import time
import logging
import os
from contextlib import contextmanager
from queue import Queue, Empty
from supabase import create_client, Client
import functools
from dynamic_config import Config

logger = logging.getLogger(__name__)

# Database connection pool configuration
# Check if optimized config should be used
if os.getenv('USE_OPTIMIZED_CONFIG'):
    from config_optimized import OptimizedConfig
    POOL_SIZE = OptimizedConfig.DATABASE_POOL_SIZE
    MAX_OVERFLOW = OptimizedConfig.DATABASE_MAX_OVERFLOW
    POOL_TIMEOUT = OptimizedConfig.DATABASE_TIMEOUT
    RETRY_ATTEMPTS = OptimizedConfig.DATABASE_RETRY_ATTEMPTS
else:
    POOL_SIZE = 15
    MAX_OVERFLOW = 30
    POOL_TIMEOUT = 45
    RETRY_ATTEMPTS = 3

class DatabasePool:
    """Thread-safe database connection pool for Supabase"""
    
    def __init__(self, pool_size=POOL_SIZE, max_overflow=MAX_OVERFLOW, timeout=POOL_TIMEOUT):
        self.pool_size = pool_size
        self.max_overflow = max_overflow
        self.timeout = timeout
        self.pool = Queue(maxsize=pool_size + max_overflow)
        self.active_connections = 0
        self.lock = threading.Lock()
        
        # Initialize pool with connections
        for _ in range(pool_size):
            conn = self._create_connection()
            if conn:
                self.pool.put(conn)
                self.active_connections += 1
    
    def _create_connection(self):
        """Create a new Supabase client connection"""
        try:
            return create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
        except Exception as e:
            logger.error(f"Failed to create database connection: {e}")
            return None
    
    @contextmanager
    def get_connection(self):
        """Get a connection from the pool with automatic cleanup"""
        conn = None
        try:
            # Try to get connection from pool
            try:
                conn = self.pool.get(timeout=self.timeout)
            except Empty:
                # Pool is empty, try to create new connection if under limit
                with self.lock:
                    if self.active_connections < (self.pool_size + self.max_overflow):
                        conn = self._create_connection()
                        if conn:
                            self.active_connections += 1
                    
                if not conn:
                    raise Exception("Database pool exhausted - too many concurrent connections")
            
            yield conn
            
        except Exception as e:
            logger.error(f"Database connection error: {e}")
            raise
        finally:
            # Return connection to pool
            if conn:
                try:
                    self.pool.put_nowait(conn)
                except:
                    # Pool is full, connection will be garbage collected
                    with self.lock:
                        self.active_connections -= 1

# Global database pool instance
db_pool = DatabasePool(pool_size=15, max_overflow=30, timeout=45)

def with_db_retry(max_retries=3, delay=1):
    """Decorator for database operations with retry logic"""
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(max_retries):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    last_exception = e
                    if attempt < max_retries - 1:
                        logger.warning(f"Database operation failed (attempt {attempt + 1}/{max_retries}): {e}")
                        time.sleep(delay * (attempt + 1))  # Exponential backoff
                    else:
                        logger.error(f"Database operation failed after {max_retries} attempts: {e}")
            
            raise last_exception
        return wrapper
    return decorator

@with_db_retry(max_retries=3)
def execute_query(table_name, operation, **kwargs):
    """Execute database query with connection pooling and retry logic"""
    with db_pool.get_connection() as supabase:
        table = supabase.table(table_name)
        
        if operation == 'select':
            query = table.select(kwargs.get('columns', '*'))
            
            # Add filters
            for filter_key, filter_value in kwargs.get('filters', {}).items():
                if filter_key.endswith('_eq'):
                    query = query.eq(filter_key[:-3], filter_value)
                elif filter_key.endswith('_neq'):
                    query = query.neq(filter_key[:-4], filter_value)
                elif filter_key.endswith('_gt'):
                    query = query.gt(filter_key[:-3], filter_value)
                elif filter_key.endswith('_gte'):
                    query = query.gte(filter_key[:-4], filter_value)
                elif filter_key.endswith('_lt'):
                    query = query.lt(filter_key[:-3], filter_value)
                elif filter_key.endswith('_lte'):
                    query = query.lte(filter_key[:-4], filter_value)
                elif filter_key.endswith('_like'):
                    query = query.like(filter_key[:-5], filter_value)
                elif filter_key.endswith('_ilike'):
                    query = query.ilike(filter_key[:-6], filter_value)
                else:
                    query = query.eq(filter_key, filter_value)
            
            # Add ordering
            if 'order' in kwargs:
                order_by = kwargs['order']
                if isinstance(order_by, str):
                    query = query.order(order_by)
                elif isinstance(order_by, dict):
                    query = query.order(order_by['column'], desc=order_by.get('desc', False))
            
            # Add limit
            if 'limit' in kwargs:
                query = query.limit(kwargs['limit'])
            
            # Execute query
            if kwargs.get('single', False):
                return query.single().execute()
            else:
                return query.execute()
        
        elif operation == 'insert':
            data = kwargs.get('data')
            if isinstance(data, list):
                # Batch insert
                return table.insert(data).execute()
            else:
                return table.insert(data).execute()
        
        elif operation == 'update':
            query = table.update(kwargs.get('data'))
            
            # Add filters for update
            for filter_key, filter_value in kwargs.get('filters', {}).items():
                query = query.eq(filter_key, filter_value)
            
            return query.execute()
        
        elif operation == 'delete':
            query = table.delete()
            
            # Add filters for delete
            for filter_key, filter_value in kwargs.get('filters', {}).items():
                query = query.eq(filter_key, filter_value)
            
            return query.execute()
        
        else:
            raise ValueError(f"Unsupported operation: {operation}")

def batch_insert(table_name, data_list, batch_size=100):
    """Insert multiple records in batches for better performance"""
    results = []
    
    for i in range(0, len(data_list), batch_size):
        batch = data_list[i:i + batch_size]
        try:
            result = execute_query(table_name, 'insert', data=batch)
            results.extend(result.data if result.data else [])
            logger.info(f"Batch inserted {len(batch)} records to {table_name}")
        except Exception as e:
            logger.error(f"Batch insert failed for {table_name}: {e}")
            # Try individual inserts for failed batch
            for item in batch:
                try:
                    result = execute_query(table_name, 'insert', data=item)
                    if result.data:
                        results.extend(result.data)
                except Exception as item_error:
                    logger.error(f"Individual insert failed: {item_error}")
    
    return results

def get_policies_for_client(client_id):
    """Get all policies for a client using connection pool"""
    return execute_query(
        'policies',
        'select',
        columns='*',
        filters={'client_id_eq': client_id}
    )

def get_client_by_phone(phone):
    """Get client by phone number using connection pool"""
    # Try different phone formats
    phone_formats = [phone, phone.replace('+', ''), f'+{phone.replace("+", "")}']
    
    for phone_format in phone_formats:
        try:
            result = execute_query(
                'clients',
                'select',
                columns='*',
                filters={'phone_eq': phone_format},
                single=True
            )
            if result.data:
                return result
        except:
            continue
    
    return None

def update_policy_reminder(policy_id, reminder_time):
    """Update last reminder sent time for a policy"""
    return execute_query(
        'policies',
        'update',
        data={'last_reminder_sent': reminder_time},
        filters={'policy_id': policy_id}
    )

class DatabaseTransaction:
    """Context manager for database transactions"""
    
    def __init__(self):
        self.operations = []
        self.rollback_operations = []
    
    def add_operation(self, table_name, operation, rollback_op=None, **kwargs):
        """Add an operation to the transaction"""
        self.operations.append((table_name, operation, kwargs))
        if rollback_op:
            self.rollback_operations.append(rollback_op)
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type is not None:
            # Execute rollback operations
            for rollback_op in reversed(self.rollback_operations):
                try:
                    rollback_op()
                except Exception as e:
                    logger.error(f"Rollback operation failed: {e}")
            return False
        
        # Execute all operations
        results = []
        try:
            for table_name, operation, kwargs in self.operations:
                result = execute_query(table_name, operation, **kwargs)
                results.append(result)
            return results
        except Exception as e:
            logger.error(f"Transaction failed: {e}")
            # Execute rollback operations
            for rollback_op in reversed(self.rollback_operations):
                try:
                    rollback_op()
                except Exception as rollback_error:
                    logger.error(f"Rollback operation failed: {rollback_error}")
            raise

# Health check for database pool
def check_database_health():
    """Check if database connections are healthy"""
    try:
        with db_pool.get_connection() as supabase:
            # Simple query to test connection
            result = supabase.table('clients').select('client_id').limit(1).execute()
            return True, f"Database healthy. Pool size: {db_pool.active_connections}"
    except Exception as e:
        return False, f"Database unhealthy: {e}"



================================================
FILE: debug_role_issue.py
================================================
#!/usr/bin/env python3
"""
Debug script to check user role issue
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from supabase import create_client
from dynamic_config import Config
from cache_manager import CacheManager
from models import User
import json

def main():
    email = "dhruvsshah05@gmail.com"
    
    print(f"=== Debugging Role Issue for {email} ===\n")
    
    # 1. Check direct database query
    print("1. Direct Supabase Query:")
    try:
        supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
        result = supabase.table('users').select('*').eq('email', email).execute()
        
        if result.data:
            user_data = result.data[0]
            print(f"   Email: {user_data.get('email')}")
            print(f"   Role: {user_data.get('role')}")
            print(f"   Is Admin (legacy): {user_data.get('is_admin')}")
            print(f"   Created At: {user_data.get('created_at')}")
            print(f"   Updated At: {user_data.get('updated_at')}")
            print(f"   Raw Data: {json.dumps(user_data, indent=2)}")
        else:
            print(f"   User not found in database!")
            return
    except Exception as e:
        print(f"   Database Error: {e}")
        return
    
    print("\n" + "="*50)
    
    # 2. Check cache
    print("2. Cache Check:")
    try:
        cache_manager = CacheManager()
        cache_key = f"user_{email}"
        cached_data = cache_manager.get(cache_key, value_type='json')
        
        if cached_data:
            print(f"   Cached Data Found:")
            print(f"   Email: {cached_data.get('email')}")
            print(f"   Role: {cached_data.get('role')}")
            print(f"   Is Admin: {cached_data.get('is_admin')}")
            print(f"   Raw Cached Data: {json.dumps(cached_data, indent=2)}")
        else:
            print(f"   No cached data found for key: {cache_key}")
    except Exception as e:
        print(f"   Cache Error: {e}")
    
    print("\n" + "="*50)
    
    # 3. Test User.get_or_create
    print("3. User.get_or_create Test:")
    try:
        user = User.get_or_create(email)
        if user:
            print(f"   Email: {user.email}")
            print(f"   Role: {user.role}")
            print(f"   Is Admin: {user.is_admin}")
            print(f"   User Object: {user.to_dict()}")
        else:
            print(f"   User.get_or_create returned None")
    except Exception as e:
        print(f"   User.get_or_create Error: {e}")
    
    print("\n" + "="*50)
    
    # 4. Clear cache and test again
    print("4. Clearing Cache and Testing Again:")
    try:
        cache_manager = CacheManager()
        cache_key = f"user_{email}"
        cache_manager.delete(cache_key)
        print(f"   Cache cleared for key: {cache_key}")
        
        # Test again
        user = User.get_or_create(email)
        if user:
            print(f"   After cache clear - Role: {user.role}")
            print(f"   After cache clear - Is Admin: {user.is_admin}")
        else:
            print(f"   User.get_or_create still returned None")
    except Exception as e:
        print(f"   Cache clear Error: {e}")

if __name__ == "__main__":
    main()



================================================
FILE: debug_user.py
================================================
#!/usr/bin/env python3
"""
Debug User Status
Quick script to check current user session status
"""

from flask import Flask, jsonify
from flask_login import LoginManager, current_user
from dynamic_config import Config
from models import User
from auth import auth_bp

app = Flask(__name__)
app.config.from_object(Config)

# Initialize Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'auth.login'

@login_manager.user_loader
def load_user(user_id):
    try:
        return User.get_or_create(user_id)
    except Exception as e:
        print(f"Error loading user: {e}")
        return None

app.register_blueprint(auth_bp)

@app.route('/debug-user')
def debug_user():
    """Debug current user status"""
    if current_user.is_authenticated:
        return jsonify({
            'authenticated': True,
            'email': current_user.email,
            'name': current_user.name,
            'role': getattr(current_user, 'role', 'unknown'),
            'is_admin': current_user.is_admin,
            'user_id': current_user.user_id
        })
    else:
        return jsonify({
            'authenticated': False,
            'message': 'User not logged in'
        })

if __name__ == '__main__':
    print("🔍 Debug server running on http://127.0.0.1:5051/debug-user")
    app.run(debug=True, port=5051)



================================================
FILE: debug_user_loading.py
================================================
#!/usr/bin/env python3
"""
Debug script to trace exactly how the user is being loaded
"""

import sys
import os
from supabase import create_client

# Add the current directory to Python path to import modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from dynamic_config import Config
    from models import User
except ImportError as e:
    print(f"❌ Import error: {e}")
    sys.exit(1)

def debug_user_loading():
    """Debug the user loading process step by step"""
    email = "dhruvsshah05@gmail.com"
    
    print("🔍 Debugging User Loading Process")
    print("=" * 50)
    
    # Step 1: Direct database query
    print("1️⃣ Direct Database Query:")
    supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
    result = supabase.table('users').select('*').eq('email', email).execute()
    
    if result.data:
        user_data = result.data[0]
        print(f"   ✅ Found user in database")
        print(f"   📧 Email: {user_data.get('email')}")
        print(f"   👤 Name: {user_data.get('name')}")
        print(f"   🎭 Role: {user_data.get('role')}")
        print(f"   👑 Is Admin: {user_data.get('is_admin')}")
        print(f"   🔑 Has Password: {'Yes' if user_data.get('password_hash') else 'No'}")
    else:
        print("   ❌ User not found in database")
        return
    
    # Step 2: Test User.get_or_create method
    print("\n2️⃣ Testing User.get_or_create():")
    try:
        user_obj = User.get_or_create(email)
        if user_obj:
            print(f"   ✅ User object created")
            print(f"   📧 Email: {user_obj.email}")
            print(f"   👤 Name: {user_obj.name}")
            print(f"   🎭 Role: {user_obj.role}")
            print(f"   👑 Is Admin: {user_obj.is_admin}")
            print(f"   🔑 Has Password Hash: {'Yes' if user_obj.password_hash else 'No'}")
        else:
            print("   ❌ Failed to create user object")
    except Exception as e:
        print(f"   ❌ Error in get_or_create: {e}")
    
    # Step 3: Test User.from_dict method
    print("\n3️⃣ Testing User.from_dict():")
    try:
        user_dict = {
            'email': user_data.get('email'),
            'name': user_data.get('name'),
            'picture': user_data.get('picture'),
            'user_id': user_data.get('id'),
            'role': user_data.get('role')
        }
        user_from_dict = User.from_dict(user_dict)
        print(f"   ✅ User from dict created")
        print(f"   📧 Email: {user_from_dict.email}")
        print(f"   👤 Name: {user_from_dict.name}")
        print(f"   🎭 Role: {user_from_dict.role}")
        print(f"   👑 Is Admin: {user_from_dict.is_admin}")
    except Exception as e:
        print(f"   ❌ Error in from_dict: {e}")
    
    # Step 4: Test User constructor directly
    print("\n4️⃣ Testing User constructor directly:")
    try:
        direct_user = User(
            email=user_data.get('email'),
            name=user_data.get('name'),
            picture=user_data.get('picture'),
            user_id=user_data.get('id'),
            password_hash=user_data.get('password_hash'),
            role=user_data.get('role')
        )
        print(f"   ✅ Direct user created")
        print(f"   📧 Email: {direct_user.email}")
        print(f"   👤 Name: {direct_user.name}")
        print(f"   🎭 Role: {direct_user.role}")
        print(f"   👑 Is Admin: {direct_user.is_admin}")
    except Exception as e:
        print(f"   ❌ Error in direct constructor: {e}")
    
    # Step 5: Check what happens with None role
    print("\n5️⃣ Testing with None role:")
    try:
        none_role_user = User(
            email=user_data.get('email'),
            name=user_data.get('name'),
            role=None  # Explicitly None
        )
        print(f"   🎭 Role when None: {none_role_user.role}")
        print(f"   👑 Is Admin when None: {none_role_user.is_admin}")
    except Exception as e:
        print(f"   ❌ Error with None role: {e}")

def main():
    debug_user_loading()
    
    print("\n🎯 Analysis:")
    print("If all steps show 'admin' role but the app still loads 'member',")
    print("the issue might be in:")
    print("1. Flask-Login user_loader function")
    print("2. Session/cache management")
    print("3. Authentication middleware")

if __name__ == "__main__":
    main()



================================================
FILE: deploy_multiuser.py
================================================
"""
Multi-User Deployment Script
Handles deployment with all scaling components
"""
import os
import sys
import subprocess
import time
import logging
from pathlib import Path

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('deployment.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class MultiUserDeployer:
    """Handles multi-user deployment process"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.venv_path = self.project_root / 'venv'
        self.requirements_file = self.project_root / 'requirements_production.txt'
        
    def check_python_version(self):
        """Check Python version compatibility"""
        logger.info("Checking Python version...")
        
        if sys.version_info < (3, 8):
            logger.error("Python 3.8 or higher is required")
            return False
        
        logger.info(f"✅ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
        return True
    
    def create_virtual_environment(self):
        """Create virtual environment if it doesn't exist"""
        logger.info("Setting up virtual environment...")
        
        if self.venv_path.exists():
            logger.info("✅ Virtual environment already exists")
            return True
        
        try:
            subprocess.run([
                sys.executable, '-m', 'venv', str(self.venv_path)
            ], check=True)
            
            logger.info("✅ Virtual environment created")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"❌ Failed to create virtual environment: {e}")
            return False
    
    def get_pip_path(self):
        """Get pip executable path"""
        if os.name == 'nt':  # Windows
            return self.venv_path / 'Scripts' / 'pip.exe'
        else:  # Unix/Linux/macOS
            return self.venv_path / 'bin' / 'pip'
    
    def get_python_path(self):
        """Get Python executable path"""
        if os.name == 'nt':  # Windows
            return self.venv_path / 'Scripts' / 'python.exe'
        else:  # Unix/Linux/macOS
            return self.venv_path / 'bin' / 'python'
    
    def install_dependencies(self):
        """Install production dependencies"""
        logger.info("Installing dependencies...")
        
        pip_path = self.get_pip_path()
        
        if not pip_path.exists():
            logger.error("❌ Pip not found in virtual environment")
            return False
        
        try:
            # Upgrade pip first
            subprocess.run([
                str(pip_path), 'install', '--upgrade', 'pip'
            ], check=True)
            
            # Install requirements
            subprocess.run([
                str(pip_path), 'install', '-r', str(self.requirements_file)
            ], check=True)
            
            logger.info("✅ Dependencies installed")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"❌ Failed to install dependencies: {e}")
            return False
    
    def check_environment_variables(self):
        """Check required environment variables"""
        logger.info("Checking environment variables...")
        
        required_vars = [
            'SUPABASE_URL',
            'SUPABASE_KEY',
            'CLERK_SECRET_KEY',
            'TWILIO_ACCOUNT_SID',
            'TWILIO_AUTH_TOKEN',
            'GOOGLE_CREDENTIALS_FILE'
        ]
        
        optional_vars = [
            'REDIS_URL',
            'WHATSAPP_TOKEN',
            'WHATSAPP_PHONE_ID',
            'VERIFY_TOKEN'
        ]
        
        missing_required = []
        missing_optional = []
        
        for var in required_vars:
            if not os.getenv(var):
                missing_required.append(var)
        
        for var in optional_vars:
            if not os.getenv(var):
                missing_optional.append(var)
        
        if missing_required:
            logger.error(f"❌ Missing required environment variables: {', '.join(missing_required)}")
            return False
        
        if missing_optional:
            logger.warning(f"⚠️ Missing optional environment variables: {', '.join(missing_optional)}")
            logger.warning("Some features may be limited")
        
        logger.info("✅ Environment variables checked")
        return True
    
    def create_directories(self):
        """Create necessary directories"""
        logger.info("Creating directories...")
        
        directories = [
            'logs',
            'static/renewals',
            'static/uploads',
            'temp'
        ]
        
        for directory in directories:
            dir_path = self.project_root / directory
            dir_path.mkdir(parents=True, exist_ok=True)
        
        logger.info("✅ Directories created")
        return True
    
    def test_database_connection(self):
        """Test database connection"""
        logger.info("Testing database connection...")
        
        try:
            python_path = self.get_python_path()
            
            # Test script
            test_script = """
import sys
sys.path.insert(0, '.')
from database_pool import check_database_health

healthy, message = check_database_health()
if healthy:
    print("✅ Database connection successful")
    sys.exit(0)
else:
    print(f"❌ Database connection failed: {message}")
    sys.exit(1)
"""
            
            result = subprocess.run([
                str(python_path), '-c', test_script
            ], capture_output=True, text=True, cwd=str(self.project_root))
            
            if result.returncode == 0:
                logger.info("✅ Database connection test passed")
                return True
            else:
                logger.error(f"❌ Database connection test failed: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"❌ Database connection test error: {e}")
            return False
    
    def test_services(self):
        """Test various services"""
        logger.info("Testing services...")
        
        try:
            python_path = self.get_python_path()
            
            # Service test script
            test_script = """
import sys
sys.path.insert(0, '.')

# Test cache manager
try:
    from cache_manager import cache_manager
    cache_manager.set('test', 'ok', 10)
    if cache_manager.get('test') == 'ok':
        print("✅ Cache manager working")
    else:
        print("⚠️ Cache manager degraded")
except Exception as e:
    print(f"❌ Cache manager error: {e}")

# Test task queue
try:
    from task_queue import task_queue
    stats = task_queue.get_queue_stats()
    print(f"✅ Task queue ready: {stats}")
except Exception as e:
    print(f"❌ Task queue error: {e}")

# Test file manager
try:
    from batch_file_operations import batch_file_manager
    stats = batch_file_manager.get_stats()
    print(f"✅ File manager ready: {stats}")
except Exception as e:
    print(f"❌ File manager error: {e}")
"""
            
            result = subprocess.run([
                str(python_path), '-c', test_script
            ], capture_output=True, text=True, cwd=str(self.project_root))
            
            logger.info("Service test output:")
            for line in result.stdout.strip().split('\n'):
                if line:
                    logger.info(f"  {line}")
            
            if result.stderr:
                logger.warning("Service test warnings:")
                for line in result.stderr.strip().split('\n'):
                    if line:
                        logger.warning(f"  {line}")
            
            return True
            
        except Exception as e:
            logger.error(f"❌ Service test error: {e}")
            return False
    
    def create_systemd_service(self):
        """Create systemd service file for Linux deployment"""
        if os.name == 'nt':
            logger.info("Skipping systemd service creation on Windows")
            return True
        
        logger.info("Creating systemd service file...")
        
        service_content = f"""[Unit]
Description=Insurance Portal Multi-User Application
After=network.target

[Service]
Type=exec
User=www-data
Group=www-data
WorkingDirectory={self.project_root}
Environment=PATH={self.venv_path}/bin
ExecStart={self.venv_path}/bin/gunicorn -c gunicorn_config.py wsgi:application
ExecReload=/bin/kill -s HUP $MAINPID
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
        
        service_file = self.project_root / 'insurance-portal.service'
        
        try:
            with open(service_file, 'w') as f:
                f.write(service_content)
            
            logger.info(f"✅ Systemd service file created: {service_file}")
            logger.info("To install the service:")
            logger.info(f"  sudo cp {service_file} /etc/systemd/system/")
            logger.info("  sudo systemctl daemon-reload")
            logger.info("  sudo systemctl enable insurance-portal")
            logger.info("  sudo systemctl start insurance-portal")
            
            return True
            
        except Exception as e:
            logger.error(f"❌ Failed to create systemd service: {e}")
            return False
    
    def create_nginx_config(self):
        """Create nginx configuration"""
        logger.info("Creating nginx configuration...")
        
        nginx_config = """server {
    listen 80;
    server_name your-domain.com;  # Replace with your domain
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;
    
    # Static files
    location /static/ {
        alias /path/to/your/app/static/;  # Replace with actual path
        expires 1h;
        add_header Cache-Control "public, immutable";
    }
    
    # API endpoints with rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://127.0.0.1:5050;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts for long-running operations
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Webhook endpoints (higher rate limit)
    location /webhook {
        limit_req zone=general burst=100 nodelay;
        proxy_pass http://127.0.0.1:5050;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # General application
    location / {
        limit_req zone=general burst=50 nodelay;
        proxy_pass http://127.0.0.1:5050;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support (if needed)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://127.0.0.1:5050;
        access_log off;
    }
}

# HTTPS redirect (uncomment when SSL is configured)
# server {
#     listen 80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }
"""
        
        nginx_file = self.project_root / 'nginx.conf'
        
        try:
            with open(nginx_file, 'w') as f:
                f.write(nginx_config)
            
            logger.info(f"✅ Nginx configuration created: {nginx_file}")
            logger.info("To install nginx configuration:")
            logger.info(f"  sudo cp {nginx_file} /etc/nginx/sites-available/insurance-portal")
            logger.info("  sudo ln -s /etc/nginx/sites-available/insurance-portal /etc/nginx/sites-enabled/")
            logger.info("  sudo nginx -t")
            logger.info("  sudo systemctl reload nginx")
            
            return True
            
        except Exception as e:
            logger.error(f"❌ Failed to create nginx config: {e}")
            return False
    
    def create_startup_script(self):
        """Create startup script"""
        logger.info("Creating startup script...")
        
        if os.name == 'nt':
            # Windows batch script
            script_content = f"""@echo off
echo Starting Insurance Portal Multi-User Application...

cd /d "{self.project_root}"

REM Activate virtual environment
call "{self.venv_path}\\Scripts\\activate.bat"

REM Start application
echo Starting with Gunicorn...
"{self.venv_path}\\Scripts\\gunicorn.exe" -c gunicorn_config.py wsgi:application

pause
"""
            script_file = self.project_root / 'start_multiuser.bat'
        else:
            # Unix shell script
            script_content = f"""#!/bin/bash
echo "Starting Insurance Portal Multi-User Application..."

cd "{self.project_root}"

# Activate virtual environment
source "{self.venv_path}/bin/activate"

# Start application
echo "Starting with Gunicorn..."
"{self.venv_path}/bin/gunicorn" -c gunicorn_config.py wsgi:application
"""
            script_file = self.project_root / 'start_multiuser.sh'
        
        try:
            with open(script_file, 'w') as f:
                f.write(script_content)
            
            if os.name != 'nt':
                os.chmod(script_file, 0o755)
            
            logger.info(f"✅ Startup script created: {script_file}")
            return True
            
        except Exception as e:
            logger.error(f"❌ Failed to create startup script: {e}")
            return False
    
    def deploy(self):
        """Run complete deployment process"""
        logger.info("🚀 Starting multi-user deployment...")
        
        steps = [
            ("Check Python version", self.check_python_version),
            ("Create virtual environment", self.create_virtual_environment),
            ("Install dependencies", self.install_dependencies),
            ("Check environment variables", self.check_environment_variables),
            ("Create directories", self.create_directories),
            ("Test database connection", self.test_database_connection),
            ("Test services", self.test_services),
            ("Create systemd service", self.create_systemd_service),
            ("Create nginx config", self.create_nginx_config),
            ("Create startup script", self.create_startup_script),
        ]
        
        failed_steps = []
        
        for step_name, step_func in steps:
            logger.info(f"\n{'='*50}")
            logger.info(f"Step: {step_name}")
            logger.info(f"{'='*50}")
            
            try:
                if not step_func():
                    failed_steps.append(step_name)
                    logger.error(f"❌ Step failed: {step_name}")
                else:
                    logger.info(f"✅ Step completed: {step_name}")
            except Exception as e:
                failed_steps.append(step_name)
                logger.error(f"❌ Step error: {step_name} - {e}")
        
        # Summary
        logger.info(f"\n{'='*60}")
        logger.info("DEPLOYMENT SUMMARY")
        logger.info(f"{'='*60}")
        
        if failed_steps:
            logger.error(f"❌ Deployment completed with {len(failed_steps)} failed steps:")
            for step in failed_steps:
                logger.error(f"  - {step}")
            logger.error("\nPlease fix the issues and run deployment again.")
            return False
        else:
            logger.info("✅ Deployment completed successfully!")
            logger.info("\nNext steps:")
            logger.info("1. Configure your domain in nginx.conf")
            logger.info("2. Set up SSL certificate")
            logger.info("3. Configure Redis (optional but recommended)")
            logger.info("4. Start the application:")
            
            if os.name == 'nt':
                logger.info("   ./start_multiuser.bat")
            else:
                logger.info("   ./start_multiuser.sh")
            
            logger.info("\n🎉 Your multi-user insurance portal is ready!")
            return True

def main():
    """Main deployment function"""
    deployer = MultiUserDeployer()
    success = deployer.deploy()
    
    if success:
        sys.exit(0)
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()



================================================
FILE: deploy_multiuser_windows.py
================================================
"""
Windows-Compatible Multi-User Deployment Script
Handles deployment with all scaling components (no emojis for Windows console)
"""
import os
import sys
import subprocess
import time
import logging
from pathlib import Path

# Setup logging without emojis for Windows compatibility
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('deployment.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class WindowsMultiUserDeployer:
    """Handles multi-user deployment process for Windows"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.venv_path = self.project_root / 'venv'
        self.requirements_file = self.project_root / 'requirements_production.txt'
        
    def check_python_version(self):
        """Check Python version compatibility"""
        logger.info("Checking Python version...")
        
        if sys.version_info < (3, 8):
            logger.error("Python 3.8 or higher is required")
            return False
        
        logger.info(f"[OK] Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
        return True
    
    def create_virtual_environment(self):
        """Create virtual environment if it doesn't exist"""
        logger.info("Setting up virtual environment...")
        
        if self.venv_path.exists():
            logger.info("[OK] Virtual environment already exists")
            return True
        
        try:
            subprocess.run([
                sys.executable, '-m', 'venv', str(self.venv_path)
            ], check=True)
            
            logger.info("[OK] Virtual environment created")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"[ERROR] Failed to create virtual environment: {e}")
            return False
    
    def get_pip_path(self):
        """Get pip executable path"""
        return self.venv_path / 'Scripts' / 'pip.exe'
    
    def get_python_path(self):
        """Get Python executable path"""
        return self.venv_path / 'Scripts' / 'python.exe'
    
    def install_dependencies(self):
        """Install production dependencies"""
        logger.info("Installing dependencies...")
        
        pip_path = self.get_pip_path()
        
        if not pip_path.exists():
            logger.error("[ERROR] Pip not found in virtual environment")
            return False
        
        try:
            # Upgrade pip first
            subprocess.run([
                str(pip_path), 'install', '--upgrade', 'pip'
            ], check=True)
            
            # Install requirements
            subprocess.run([
                str(pip_path), 'install', '-r', str(self.requirements_file)
            ], check=True)
            
            logger.info("[OK] Dependencies installed")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"[ERROR] Failed to install dependencies: {e}")
            return False
    
    def check_environment_variables(self):
        """Check required environment variables"""
        logger.info("Checking environment variables...")
        
        required_vars = [
            'SUPABASE_URL',
            'SUPABASE_KEY',
            'CLERK_SECRET_KEY',
            'TWILIO_ACCOUNT_SID',
            'TWILIO_AUTH_TOKEN',
            'GOOGLE_CREDENTIALS_FILE'
        ]
        
        optional_vars = [
            'REDIS_URL',
            'WHATSAPP_TOKEN',
            'WHATSAPP_PHONE_ID',
            'VERIFY_TOKEN'
        ]
        
        missing_required = []
        missing_optional = []
        
        for var in required_vars:
            if not os.getenv(var):
                missing_required.append(var)
        
        for var in optional_vars:
            if not os.getenv(var):
                missing_optional.append(var)
        
        if missing_required:
            logger.error(f"[ERROR] Missing required environment variables: {', '.join(missing_required)}")
            logger.info("Please set these environment variables before continuing:")
            for var in missing_required:
                logger.info(f"  set {var}=your_value_here")
            logger.info("Or create a .env file with these variables")
            return False
        
        if missing_optional:
            logger.warning(f"[WARNING] Missing optional environment variables: {', '.join(missing_optional)}")
            logger.warning("Some features may be limited")
        
        logger.info("[OK] Environment variables checked")
        return True
    
    def create_directories(self):
        """Create necessary directories"""
        logger.info("Creating directories...")
        
        directories = [
            'logs',
            'static/renewals',
            'static/uploads',
            'temp'
        ]
        
        for directory in directories:
            dir_path = self.project_root / directory
            dir_path.mkdir(parents=True, exist_ok=True)
        
        logger.info("[OK] Directories created")
        return True
    
    def create_env_file_template(self):
        """Create .env file template if it doesn't exist"""
        logger.info("Creating .env file template...")
        
        env_file = self.project_root / '.env'
        
        if env_file.exists():
            logger.info("[OK] .env file already exists")
            return True
        
        env_template = """# Database Configuration
SUPABASE_URL=your_supabase_url_here
SUPABASE_KEY=your_supabase_key_here

# Authentication
CLERK_SECRET_KEY=your_clerk_secret_key_here
CLERK_PUBLISHABLE_KEY=your_clerk_publishable_key_here
CLERK_FRONTEND_API=your_clerk_frontend_api_here

# Google Drive
GOOGLE_CREDENTIALS_FILE=credentials.json
ROOT_FOLDER_ID=your_root_folder_id_here

# Twilio
TWILIO_ACCOUNT_SID=your_twilio_account_sid_here
TWILIO_AUTH_TOKEN=your_twilio_auth_token_here
TWILIO_WHATSAPP_FROM=whatsapp:+14155238886

# Optional: Redis (recommended for production)
# REDIS_URL=redis://localhost:6379/0

# Optional: WhatsApp Business API
# WHATSAPP_TOKEN=your_whatsapp_token_here
# WHATSAPP_PHONE_ID=your_phone_id_here
# VERIFY_TOKEN=your_verify_token_here

# Application Settings
FLASK_ENV=production
SECRET_KEY=your_secret_key_here
PORT=5050
APP_BASE_URL=http://localhost:5050
"""
        
        try:
            with open(env_file, 'w') as f:
                f.write(env_template)
            
            logger.info(f"[OK] .env template created: {env_file}")
            logger.info("Please edit the .env file with your actual values")
            return True
            
        except Exception as e:
            logger.error(f"[ERROR] Failed to create .env template: {e}")
            return False
    
    def test_basic_imports(self):
        """Test basic imports without database connection"""
        logger.info("Testing basic imports...")
        
        try:
            python_path = self.get_python_path()
            
            test_script = """
import sys
sys.path.insert(0, '.')

try:
    import flask
    print("[OK] Flask imported successfully")
except ImportError as e:
    print(f"[ERROR] Flask import failed: {e}")
    sys.exit(1)

try:
    import supabase
    print("[OK] Supabase imported successfully")
except ImportError as e:
    print(f"[ERROR] Supabase import failed: {e}")
    sys.exit(1)

try:
    import twilio
    print("[OK] Twilio imported successfully")
except ImportError as e:
    print(f"[ERROR] Twilio import failed: {e}")
    sys.exit(1)

try:
    from cache_manager import cache_manager
    print("[OK] Cache manager imported successfully")
except ImportError as e:
    print(f"[ERROR] Cache manager import failed: {e}")

try:
    from task_queue import task_queue
    print("[OK] Task queue imported successfully")
except ImportError as e:
    print(f"[ERROR] Task queue import failed: {e}")

print("[OK] Basic imports test completed")
"""
            
            result = subprocess.run([
                str(python_path), '-c', test_script
            ], capture_output=True, text=True, cwd=str(self.project_root))
            
            if result.returncode == 0:
                logger.info("[OK] Basic imports test passed")
                for line in result.stdout.strip().split('\n'):
                    if line:
                        logger.info(f"  {line}")
                return True
            else:
                logger.error("[ERROR] Basic imports test failed")
                for line in result.stderr.strip().split('\n'):
                    if line:
                        logger.error(f"  {line}")
                return False
                
        except Exception as e:
            logger.error(f"[ERROR] Basic imports test error: {e}")
            return False
    
    def create_startup_script(self):
        """Create Windows startup script"""
        logger.info("Creating startup script...")
        
        script_content = f"""@echo off
echo Starting Insurance Portal Multi-User Application...

cd /d "{self.project_root}"

REM Check if virtual environment exists
if not exist "venv\\Scripts\\activate.bat" (
    echo [ERROR] Virtual environment not found. Please run deploy_multiuser_windows.py first.
    pause
    exit /b 1
)

REM Activate virtual environment
echo Activating virtual environment...
call "venv\\Scripts\\activate.bat"

REM Check if .env file exists
if not exist ".env" (
    echo [WARNING] .env file not found. Please create it with your configuration.
    echo You can use the .env template that was created during deployment.
    pause
)

REM Create necessary directories
if not exist "logs" mkdir logs
if not exist "static\\renewals" mkdir static\\renewals
if not exist "static\\uploads" mkdir static\\uploads
if not exist "temp" mkdir temp

REM Start application
echo.
echo ========================================
echo  Insurance Portal Multi-User Server
echo ========================================
echo.
echo Starting server...
echo Access the application at: http://localhost:5050
echo Press Ctrl+C to stop the server
echo.

REM Try to start with Waitress (Windows WSGI server)
python -c "
import os
os.environ.setdefault('PYTHONIOENCODING', 'utf-8')

try:
    from waitress import serve
    from app_multiuser import app
    print('[OK] Starting with Waitress WSGI server...')
    print('[OK] Server running at: http://localhost:5050')
    print('[OK] Health check: http://localhost:5050/health')
    print('[OK] Metrics: http://localhost:5050/metrics')
    print('')
    serve(app, host='0.0.0.0', port=5050, threads=20)
except ImportError:
    print('[WARNING] Waitress not available, starting with Flask dev server...')
    from app_multiuser import app
    app.run(host='0.0.0.0', port=5050, debug=False, threaded=True)
except Exception as e:
    print(f'[ERROR] Error starting server: {{e}}')
    import sys
    sys.exit(1)
"

if errorlevel 1 (
    echo.
    echo Trying fallback startup method...
    python app_multiuser.py
)

echo.
echo Server stopped.
pause"""
        
        script_file = self.project_root / 'start_multiuser.bat'
        
        try:
            with open(script_file, 'w') as f:
                f.write(script_content)
            
            logger.info(f"[OK] Startup script created: {script_file}")
            return True
            
        except Exception as e:
            logger.error(f"[ERROR] Failed to create startup script: {e}")
            return False
    
    def deploy(self):
        """Run complete deployment process"""
        logger.info("Starting multi-user deployment for Windows...")
        
        steps = [
            ("Check Python version", self.check_python_version),
            ("Create virtual environment", self.create_virtual_environment),
            ("Install dependencies", self.install_dependencies),
            ("Create directories", self.create_directories),
            ("Create .env template", self.create_env_file_template),
            ("Test basic imports", self.test_basic_imports),
            ("Create startup script", self.create_startup_script),
        ]
        
        failed_steps = []
        
        for step_name, step_func in steps:
            logger.info(f"\n{'='*50}")
            logger.info(f"Step: {step_name}")
            logger.info(f"{'='*50}")
            
            try:
                if not step_func():
                    failed_steps.append(step_name)
                    logger.error(f"[ERROR] Step failed: {step_name}")
                else:
                    logger.info(f"[OK] Step completed: {step_name}")
            except Exception as e:
                failed_steps.append(step_name)
                logger.error(f"[ERROR] Step error: {step_name} - {e}")
        
        # Summary
        logger.info(f"\n{'='*60}")
        logger.info("DEPLOYMENT SUMMARY")
        logger.info(f"{'='*60}")
        
        if failed_steps:
            logger.error(f"[ERROR] Deployment completed with {len(failed_steps)} failed steps:")
            for step in failed_steps:
                logger.error(f"  - {step}")
            logger.error("\nPlease fix the issues and run deployment again.")
            
            # Provide specific guidance
            if "Install dependencies" in failed_steps:
                logger.info("\nTo fix dependency issues:")
                logger.info("1. Make sure you have Python 3.8+ installed")
                logger.info("2. Try running: pip install --upgrade pip")
                logger.info("3. Install dependencies manually: pip install -r requirements_production.txt")
            
            return False
        else:
            logger.info("[OK] Deployment completed successfully!")
            logger.info("\nNext steps:")
            logger.info("1. Edit the .env file with your actual configuration values")
            logger.info("2. Make sure you have your Google credentials.json file")
            logger.info("3. Start the application: start_multiuser.bat")
            logger.info("\n[OK] Your multi-user insurance portal is ready!")
            return True

def main():
    """Main deployment function"""
    deployer = WindowsMultiUserDeployer()
    success = deployer.deploy()
    
    if success:
        print("\n" + "="*60)
        print("DEPLOYMENT SUCCESSFUL!")
        print("="*60)
        print("To start your multi-user insurance portal:")
        print("1. Edit the .env file with your configuration")
        print("2. Double-click start_multiuser.bat")
        print("3. Open http://localhost:5050 in your browser")
        sys.exit(0)
    else:
        print("\n" + "="*60)
        print("DEPLOYMENT FAILED!")
        print("="*60)
        print("Please check the error messages above and fix the issues.")
        sys.exit(1)

if __name__ == "__main__":
    main()



================================================
FILE: deploy_production.py
================================================
#!/usr/bin/env python3
"""
Production Deployment Script for Insurance Portal
Optimized for multi-user concurrent access
"""

import os
import sys
import subprocess
import logging
from datetime import datetime

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('deployment.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def check_requirements():
    """Check if all required dependencies are installed"""
    logger.info("Checking requirements...")
    
    required_packages = [
        'flask', 'flask-login', 'supabase', 'python-dotenv',
        'twilio', 'pandas', 'openpyxl', 'numpy', 'google-api-python-client',
        'google-auth', 'google-auth-oauthlib', 'google-auth-httplib2'
    ]
    
    missing_packages = []
    
    try:
        import pkg_resources
        installed_packages = {pkg.key for pkg in pkg_resources.working_set}
        
        for package in required_packages:
            # Handle package name variations
            pkg_name = package.lower().replace('_', '-')
            if pkg_name in installed_packages or any(pkg.startswith(pkg_name) for pkg in installed_packages):
                logger.info(f"✓ {package} is installed")
            else:
                missing_packages.append(package)
                logger.error(f"✗ {package} is missing")
                
    except Exception as e:
        logger.warning(f"Could not check all packages: {e}")
        # Fallback to import check if pkg_resources fails
        for package in required_packages:
            try:
                __import__(package.replace('-', '_'))
                logger.info(f"✓ {package} is installed")
            except ImportError:
                missing_packages.append(package)
                logger.error(f"✗ {package} is missing")
    
    if missing_packages:
        logger.error(f"Missing packages: {', '.join(missing_packages)}")
        logger.info("Install missing packages with: pip install " + " ".join(missing_packages))
        return False
    
    return True

def check_environment():
    """Check if all required environment variables are set"""
    logger.info("Checking environment variables...")
    
    required_env_vars = [
        'SUPABASE_URL', 'SUPABASE_KEY', 'GOOGLE_CLIENT_ID', 
        'GOOGLE_CLIENT_SECRET', 'GOOGLE_CREDENTIALS_FILE'
    ]
    
    optional_env_vars = [
        'WHATSAPP_TOKEN', 'WHATSAPP_PHONE_ID', 'VERIFY_TOKEN',
        'SMTP_SERVER', 'SMTP_USERNAME', 'SMTP_PASSWORD'
    ]
    
    missing_required = []
    missing_optional = []
    
    for var in required_env_vars:
        if not os.getenv(var):
            missing_required.append(var)
            logger.error(f"✗ Required: {var} is not set")
        else:
            logger.info(f"✓ Required: {var} is set")
    
    for var in optional_env_vars:
        if not os.getenv(var):
            missing_optional.append(var)
            logger.warning(f"⚠ Optional: {var} is not set")
        else:
            logger.info(f"✓ Optional: {var} is set")
    
    if missing_required:
        logger.error(f"Missing required environment variables: {', '.join(missing_required)}")
        return False
    
    if missing_optional:
        logger.warning(f"Missing optional variables (some features may be disabled): {', '.join(missing_optional)}")
    
    return True

def check_files():
    """Check if all required files exist"""
    logger.info("Checking required files...")
    
    required_files = [
        '.env',
        'config.py',
        'combined_app.py',
        'database.py',
        'models.py',
        'auth.py'
    ]
    
    google_creds = os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json')
    if google_creds:
        required_files.append(google_creds)
    
    missing_files = []
    
    for file_path in required_files:
        if os.path.exists(file_path):
            logger.info(f"✓ {file_path} exists")
        else:
            missing_files.append(file_path)
            logger.error(f"✗ {file_path} is missing")
    
    if missing_files:
        logger.error(f"Missing files: {', '.join(missing_files)}")
        return False
    
    return True

def setup_directories():
    """Create necessary directories"""
    logger.info("Setting up directories...")
    
    directories = ['logs', 'temp', 'uploads']
    
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            logger.info(f"✓ Created directory: {directory}")
        else:
            logger.info(f"✓ Directory exists: {directory}")

def test_database_connection():
    """Test database connection"""
    logger.info("Testing database connection...")
    
    try:
        from database import db_manager
        
        # Perform health check
        if db_manager.health_check():
            logger.info("✓ Database connection successful")
            
            # Get connection stats
            stats = db_manager.get_connection_stats()
            logger.info(f"Database stats: {stats}")
            return True
        else:
            logger.error("✗ Database health check failed")
            return False
            
    except Exception as e:
        logger.error(f"✗ Database connection failed: {e}")
        return False

def run_pre_deployment_tests():
    """Run basic tests before deployment"""
    logger.info("Running pre-deployment tests...")
    
    try:
        # Test imports
        import combined_app
        logger.info("✓ Main application imports successfully")
        
        # Test Flask app creation
        app = combined_app.app
        with app.test_client() as client:
            # Test basic routes
            response = client.get('/login')
            if response.status_code in [200, 302]:  # 302 for redirects
                logger.info("✓ Login route accessible")
            else:
                logger.error(f"✗ Login route failed: {response.status_code}")
                return False
        
        return True
        
    except Exception as e:
        logger.error(f"✗ Pre-deployment test failed: {e}")
        return False

def start_production_server():
    """Start the production server"""
    logger.info("Starting production server...")
    
    # Set production environment
    os.environ['FLASK_ENV'] = 'production'
    
    try:
        # Import and run the application
        from combined_app import app
        
        logger.info("🚀 Insurance Portal starting in PRODUCTION mode...")
        logger.info("📊 Multi-user optimization: ENABLED")
        logger.info("🔒 Security features: ENABLED")
        logger.info("📝 Logging: ENABLED")
        logger.info("🌐 Server: http://0.0.0.0:5050")
        
        # Run the application
        app.run(
            host='0.0.0.0',
            port=int(os.getenv('PORT', 5050)),
            debug=False,
            threaded=True,
            use_reloader=False
        )
        
    except KeyboardInterrupt:
        logger.info("Server stopped by user")
    except Exception as e:
        logger.error(f"Server error: {e}")
        sys.exit(1)

def main():
    """Main deployment function"""
    logger.info("=" * 60)
    logger.info("INSURANCE PORTAL - PRODUCTION DEPLOYMENT")
    logger.info(f"Deployment started at: {datetime.now()}")
    logger.info("=" * 60)
    
    # Run all checks
    checks = [
        ("Requirements", check_requirements),
        ("Environment", check_environment),
        ("Files", check_files),
        ("Database", test_database_connection),
        ("Pre-deployment tests", run_pre_deployment_tests)
    ]
    
    for check_name, check_func in checks:
        logger.info(f"\n--- {check_name} Check ---")
        if not check_func():
            logger.error(f"❌ {check_name} check failed. Deployment aborted.")
            sys.exit(1)
        logger.info(f"✅ {check_name} check passed")
    
    # Setup directories
    logger.info("\n--- Setup ---")
    setup_directories()
    
    # Start server
    logger.info("\n--- Starting Server ---")
    logger.info("✅ All checks passed. Starting production server...")
    start_production_server()

if __name__ == "__main__":
    main()



================================================
FILE: deploy_windows.bat
================================================
@echo off
setlocal enabledelayedexpansion
echo ========================================
echo INSURANCE PORTAL - PRODUCTION DEPLOYMENT
echo Optimized for 5 Concurrent Users
echo ========================================

REM Check if Python is installed
python --version >nul 2>&1
if errorlevel 1 (
    echo ERROR: Python is not installed or not in PATH
    echo Please install Python 3.8+ from https://python.org
    pause
    exit /b 1
)

echo [1/8] Creating virtual environment...
REM Create virtual environment if it doesn't exist
if not exist "venv" (
    python -m venv venv
    if errorlevel 1 (
        echo ERROR: Failed to create virtual environment
        pause
        exit /b 1
    )
)

echo [2/8] Activating virtual environment...
REM Activate virtual environment
call venv\Scripts\activate.bat
if errorlevel 1 (
    echo ERROR: Failed to activate virtual environment
    pause
    exit /b 1
)

echo [3/8] Upgrading pip and installing production dependencies...
REM Upgrade pip and install production server
python -m pip install --upgrade pip
pip install waitress

echo [4/8] Installing application dependencies...
REM Install requirements
pip install -r requirements.txt
if errorlevel 1 (
    echo ERROR: Failed to install requirements
    pause
    exit /b 1
)

echo [5/8] Validating environment configuration...
REM Check if .env file exists
if not exist ".env" (
    echo ERROR: .env file not found!
    echo Please create .env file with your configuration
    echo See .env.example for required variables
    pause
    exit /b 1
)

echo [6/8] Creating required directories...
REM Create required directories for production
for %%d in (logs temp uploads static\js) do (
    if not exist "%%d" (
        echo Creating directory: %%d
        mkdir "%%d"
    )
)

echo [7/8] Initializing production optimizations...
REM Set production environment variables
set FLASK_ENV=production
set PYTHONPATH=%CD%
set PRODUCTION_MODE=1

REM Run production integration validation
echo Validating production setup...
python production_integration.py
if errorlevel 1 (
    echo WARNING: Some production optimizations may not be available
)

REM Validate critical production files
if not exist "database.py" (
    echo WARNING: database.py not found - database optimizations disabled
)
if not exist "static\js\performance.js" (
    echo WARNING: performance.js not found - frontend optimizations disabled
)
if not exist "combined_app.py" (
    echo ERROR: combined_app.py not found - using fallback app.py
    set USE_FALLBACK=1
)

echo [8/8] Starting production server...
echo ========================================
echo PRODUCTION SERVER STARTING
echo ========================================
echo Server: Waitress WSGI Server (Production)
echo URL: http://localhost:5050
echo Concurrent Users: Optimized for 5+ users
echo Features: Database pooling, Request limiting, Frontend optimization
echo ========================================
echo Press Ctrl+C to stop the server
echo ========================================

REM Start with production optimizations
if "%USE_FALLBACK%"=="1" (
    echo WARNING: Using fallback mode - some optimizations may not be available
    waitress-serve --host=0.0.0.0 --port=5050 --threads=4 --connection-limit=1000 app:app
) else (
    echo Starting with full production optimizations...
    waitress-serve --host=0.0.0.0 --port=5050 --threads=8 --connection-limit=1000 --cleanup-interval=30 --channel-timeout=120 combined_app:app
)

if errorlevel 1 (
    echo ERROR: Failed to start production server
    echo Falling back to development server...
    echo WARNING: Development server is not optimized for concurrent users
    python combined_app.py
    if errorlevel 1 (
        python app.py
    )
)

pause



================================================
FILE: DEPLOYMENT_GUIDE.md
================================================
# Insurance Portal - Windows Deployment Guide

## 🚀 Quick Start

### Prerequisites
- **Python 3.8+** installed on Windows
- **Google Account** with OAuth setup
- **Supabase Account** with database
- **Admin email addresses** for access control

### 1. Setup Database

1. **Run the SQL script** in your Supabase dashboard:
   ```sql
   -- Copy and paste contents of create_users_table.sql
   ```

2. **Verify your existing tables** are present:
   - `clients`
   - `members` 
   - `policies`
   - `pending_policies`
   - `users` (newly created)

### 2. Configure Environment

1. **Copy environment file**:
   ```cmd
   copy .env.example .env
   ```

2. **Edit `.env` file** with your actual values:
   ```env
   SECRET_KEY=generate-a-strong-secret-key
   SUPABASE_URL=https://your-project.supabase.co
   SUPABASE_KEY=your-supabase-anon-key
   GOOGLE_CLIENT_ID=your-google-oauth-client-id
   GOOGLE_CLIENT_SECRET=your-google-oauth-secret
   ADMIN_EMAILS=admin1@company.com,admin2@company.com
   ```

### 3. Setup Google OAuth

1. **Go to Google Cloud Console**: https://console.cloud.google.com
2. **Create/Select Project**
3. **Enable Google+ API**
4. **Create OAuth 2.0 Credentials**:
   - Application type: Web application
   - Authorized redirect URIs: `http://localhost:5000/auth`
5. **Download credentials** and update `.env`

### 4. Deploy Application

1. **Run deployment script**:
   ```cmd
   deploy_windows.bat
   ```

2. **Access the application**:
   - Open browser: http://localhost:5000
   - Login with authorized Google account

## 🔧 Production Configuration

### Multi-User Support
- ✅ **Google OAuth** authentication
- ✅ **Session management** (24-hour sessions)
- ✅ **User tracking** in database
- ✅ **Admin-only access** control
- ✅ **Concurrent user support** (4-5 users)

### Security Features
- ✅ **Secure sessions** with HttpOnly cookies
- ✅ **CSRF protection** built-in
- ✅ **File upload validation** (PDF only, 50MB max)
- ✅ **SQL injection protection** via Supabase
- ✅ **XSS protection** headers

### Performance Features
- ✅ **Threaded requests** for concurrent users
- ✅ **Connection pooling** via Supabase
- ✅ **File size limits** to prevent abuse
- ✅ **Request logging** for monitoring
- ✅ **Error handling** with user-friendly messages

## 📊 Monitoring & Logs

### Log Files
- **Location**: `logs/insurance_portal.log`
- **Rotation**: 10MB files, 10 backups
- **Content**: Requests, errors, user actions

### User Management
- **View users**: Check `users` table in Supabase
- **Add admin**: Update `ADMIN_EMAILS` in `.env`
- **Monitor activity**: Check `last_login` column

## 🛠️ Troubleshooting

### Common Issues

**1. "Google OAuth Error"**
- Check `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET`
- Verify redirect URI in Google Console
- Ensure Google+ API is enabled

**2. "Database Connection Error"**
- Verify `SUPABASE_URL` and `SUPABASE_KEY`
- Check internet connection
- Confirm Supabase project is active

**3. "Access Denied"**
- Add user email to `ADMIN_EMAILS` in `.env`
- Restart application after changing `.env`
- Check email spelling and formatting

**4. "File Upload Error"**
- Check file size (max 50MB)
- Ensure file is PDF format
- Verify Google Drive credentials

### Performance Optimization

**For 4-5 concurrent users:**
- ✅ Default configuration is sufficient
- ✅ Flask's threaded mode handles concurrent requests
- ✅ Supabase handles database connection pooling

**For more users (10+):**
- Consider using Gunicorn: `gunicorn -w 4 -b 0.0.0.0:5000 app:app`
- Monitor system resources
- Consider database query optimization

## 🔄 Updates & Maintenance

### Regular Tasks
1. **Monitor logs** for errors
2. **Check user activity** in database
3. **Update dependencies** periodically
4. **Backup database** regularly

### Updating Application
1. **Stop the application** (Ctrl+C)
2. **Pull latest changes**
3. **Update dependencies**: `pip install -r requirements_production.txt`
4. **Restart**: `deploy_windows.bat`

## 📞 Support

### System Requirements
- **OS**: Windows 10/11
- **Python**: 3.8+
- **RAM**: 2GB minimum, 4GB recommended
- **Storage**: 1GB for application + logs
- **Network**: Internet connection required

### CORE FUNCTIONALITY:
- Policy renewal system with file upload/replacement
- WhatsApp bot with professional messaging and document delivery
- Email notifications with attachments
- Excel data management with Google Drive integration
- Database schema fully aligned (clients, members, policies)
- Professional UI with proper status indicators



================================================
FILE: DYNAMIC_BRANDING_IMPLEMENTATION.md
================================================
# Dynamic Branding & Settings Implementation Summary

## Overview

Completed comprehensive implementation to make ALL portal configurations dynamic through the admin settings page, including portal name, logo, and API keys. No more hardcoded values!

## What Was Changed

### 1. Settings System Enhanced

#### New Settings Added to Database
Added the following settings to the `company` category:
- `portal_name` - Portal name displayed in navigation bar
- `portal_title` - Portal title shown in browser tabs
- `logo_path` - Path to logo file in static folder

Added to `google_drive` category:
- `root_folder_id` - Google Drive root folder ID for policy uploads

#### Files Modified:
- **`routes/settings_routes.py`**: Added new default settings for portal branding
- **`dynamic_config.py`**: Added properties for `PORTAL_NAME`, `PORTAL_TITLE`, `LOGO_PATH`, `ROOT_FOLDER_ID`

### 2. Application Configuration

#### Context Processor Updated
Both `app.py` and `app_multiuser.py` now inject portal branding into all templates:

```python
@app.context_processor
def inject_config():
    return {
        'config': {
            'PORTAL_NAME': Config.PORTAL_NAME,
            'PORTAL_TITLE': Config.PORTAL_TITLE,
            'LOGO_PATH': Config.LOGO_PATH,
            'COMPANY_NAME': Config.COMPANY_NAME
        }
    }
```

#### Files Modified:
- **`app.py`**: Updated context processor
- **`app_multiuser.py`**: Updated context processor

### 3. Templates Updated

#### Automated Template Updates
Created and ran `update_templates.py` script that updated **20 template files**:

**Changes Made:**
- Replaced hardcoded portal name with `{{ config.PORTAL_NAME }}`
- Replaced hardcoded portal title with `{{ config.PORTAL_TITLE }}`
- Replaced hardcoded logo path with `{{ config.LOGO_PATH }}`
- Replaced hardcoded company name with `{{ config.COMPANY_NAME }}`

**Templates Updated:**
1. base.html
2. dashboard.html
3. add_policy.html
4. add_pending_policy.html
5. complete_pending.html
6. view_policy.html
7. existing_policies.html
8. view_all_clients.html
9. renewal_page.html
10. add_claim.html
11. view_claim.html
12. whatsapp_logs.html
13. excel_dashboard.html
14. excel_setup.html
15. error.html
16. login.html
17. login_simple.html
18. login_clerk_backup.html
19. pending_policies_backup.html
20. view_all_policies_backup.html
21. claims_backup.html

### 4. Python Code Updated

#### Google Drive Root Folder ID
**File**: `routes/policies.py`

**Before:**
```python
ROOT_FOLDER_ID = "0AOc3bRLhlrgzUk9PVA"  # Hardcoded
```

**After:**
```python
ROOT_FOLDER_ID = Config.ROOT_FOLDER_ID or "0AOc3bRLhlrgzUk9PVA"  # Dynamic with fallback
```

## How It Works

### Settings Flow

```
Admin Changes Setting in UI
         ↓
Saved to Supabase Database (settings table)
         ↓
Cached in SettingsService (5 min TTL)
         ↓
Accessed via Config.PROPERTY_NAME
         ↓
Injected into Templates via Context Processor
         ↓
Displayed in Portal
```

### Example: Changing Portal Name

1. Admin navigates to `/settings`
2. Clicks on "Company Information" tab
3. Updates "Portal Name" field to "My Custom Insurance Portal"
4. Clicks "Save Changes"
5. Setting saved to database: `company.portal_name = "My Custom Insurance Portal"`
6. All pages now show "My Custom Insurance Portal" in navigation bar

### Example: Changing Logo

1. Upload new logo to `/static` folder (e.g., `my-logo.png`)
2. Go to Settings → Company Information
3. Update "Logo Path" to `my-logo.png`
4. Click "Save Changes"
5. All pages now display the new logo

### Example: Setting Root Folder ID

1. Get folder ID from Google Drive URL
2. Go to Settings → Google Drive
3. Paste folder ID in "Root Folder ID" field
4. Click "Save Changes"
5. All policy uploads now go to this folder

## Configuration Priority

Settings are loaded in this order (highest to lowest priority):

1. **Database Settings** (from settings table)
2. **Environment Variables** (from .env file)
3. **Default Values** (hardcoded fallbacks)

This means:
- Settings page values ALWAYS override .env values
- .env values are used if setting not in database
- Default values are used if neither exists

## Files Created

1. **`update_templates.py`** - Script to batch update templates
2. **`SETTINGS_CONFIGURATION_GUIDE.md`** - User guide for settings page
3. **`DYNAMIC_BRANDING_IMPLEMENTATION.md`** - This file (technical summary)

## Files Modified

### Core Application Files
- `app.py` - Context processor
- `app_multiuser.py` - Context processor
- `dynamic_config.py` - New config properties
- `routes/settings_routes.py` - Default settings
- `routes/policies.py` - Dynamic ROOT_FOLDER_ID

### Template Files (20 files)
- All templates now use dynamic values from config
- No more hardcoded portal names or logos

## Testing Checklist

- [ ] Settings page loads without errors
- [ ] Company Information tab shows all branding fields
- [ ] Changing portal name updates navigation bar
- [ ] Changing logo path updates logo display
- [ ] Google Drive root folder ID can be set
- [ ] Changes persist after page refresh
- [ ] Changes visible across all pages
- [ ] Sensitive fields are masked
- [ ] Non-admin users cannot access settings

## Benefits

### For Administrators
- ✅ Change portal branding without code changes
- ✅ Update API keys from web interface
- ✅ Configure Google Drive folders dynamically
- ✅ No need to edit .env file or restart server
- ✅ All settings in one place

### For Developers
- ✅ No more hardcoded values in code
- ✅ Centralized configuration management
- ✅ Easy to add new settings
- ✅ Automatic fallback to environment variables
- ✅ Settings cached for performance

### For Users
- ✅ Consistent branding across all pages
- ✅ Custom portal names and logos
- ✅ Professional appearance
- ✅ Fast page loads (cached settings)

## Migration Notes

### From Hardcoded Values

All previously hardcoded values have been replaced:

| Old Value | New Location |
|-----------|--------------|
| "Insta Insurance Consultancy Portal" | `config.PORTAL_NAME` |
| "Insta Insurances Portal" | `config.PORTAL_TITLE` |
| "ico.png" | `config.LOGO_PATH` |
| "Insta Insurance Consultancy" | `config.COMPANY_NAME` |
| "0AOc3bRLhlrgzUk9PVA" | `Config.ROOT_FOLDER_ID` |

### Backward Compatibility

The system maintains backward compatibility:
- If settings not in database, falls back to .env
- If not in .env, uses default values
- Existing .env files continue to work
- No breaking changes to existing functionality

## Security Considerations

### Sensitive Settings
- Passwords and tokens are masked in UI
- Only admins can access settings page
- Changes are logged with user email
- Sensitive fields only update when non-empty

### Access Control
- `@admin_required` decorator protects routes
- Role-based access control enforced
- Settings page only visible to admins
- API endpoints require authentication

## Performance

### Caching Strategy
- Settings cached for 5 minutes
- Reduces database queries
- Automatic cache refresh
- Manual cache clear available

### Database Impact
- Minimal database queries (cached)
- Efficient bulk updates
- Indexed settings table
- Fast lookups by category/key

## Future Enhancements

Possible future additions:
- [ ] Upload logo directly through settings page
- [ ] Theme color customization
- [ ] Multiple logo variants (light/dark)
- [ ] Email template customization
- [ ] WhatsApp message templates
- [ ] Custom CSS injection
- [ ] Multi-language support
- [ ] Settings version history

## Rollback Plan

If issues occur:

1. **Revert to .env values**: Delete settings from database
2. **Restore templates**: Use git to revert template changes
3. **Use fallback values**: System automatically falls back to defaults
4. **Check logs**: Review application logs for errors

## Support

For issues or questions:
1. Check `SETTINGS_CONFIGURATION_GUIDE.md` for user instructions
2. Review application logs in `/logs` folder
3. Verify settings in Supabase settings table
4. Check dynamic_config.py for property definitions

## Conclusion

The portal is now fully dynamic and configurable through the admin settings page. Administrators can change:
- Portal name and title
- Company logo
- Google Drive folder IDs
- All API keys and credentials
- Business settings

**No code changes or server restarts required!**



================================================
FILE: dynamic_config.py
================================================
"""
Dynamic Configuration System
Replaces static config.py with database-driven settings
Falls back to environment variables if settings are not available
"""

import os
from dotenv import load_dotenv
from typing import Any, Optional
import logging

load_dotenv()
logger = logging.getLogger(__name__)

class DynamicConfig:
    """Configuration class that loads from database settings with environment fallbacks"""
    
    def __init__(self):
        self._settings_service = None
        self._fallback_to_env = True
        
        # Core settings that must come from environment (for initial database connection)
        self.SUPABASE_URL = os.getenv("SUPABASE_URL")
        self.SUPABASE_KEY = os.getenv("SUPABASE_KEY")
        
        if not self.SUPABASE_URL or not self.SUPABASE_KEY:
            raise ValueError("SUPABASE_URL and SUPABASE_KEY must be set in environment variables")
    
    def _get_settings_service(self):
        """Lazy load settings service to avoid circular imports"""
        if self._settings_service is None:
            try:
                from settings_service import settings
                self._settings_service = settings
            except Exception as e:
                logger.warning(f"Could not load settings service: {e}")
                self._fallback_to_env = True
        return self._settings_service
    
    def _get_setting(self, category: str, key: str, default: Any = None, env_key: str = None) -> Any:
        """Get setting from database or fall back to environment variable"""
        try:
            settings_service = self._get_settings_service()
            if settings_service:
                value = settings_service.get(category, key)
                if value is not None:
                    return value
        except Exception as e:
            logger.warning(f"Error getting setting {category}.{key}: {e}")
        
        # Fall back to environment variable
        if env_key:
            env_value = os.getenv(env_key, default)
            return env_value
        
        return default
    
    # Application Settings
    @property
    def FLASK_ENV(self):
        return self._get_setting('app', 'environment', 'production', 'FLASK_ENV')
    
    @property
    def DEBUG(self):
        debug_setting = self._get_setting('app', 'debug', False)
        return debug_setting if isinstance(debug_setting, bool) else self.FLASK_ENV == "development"
    
    @property
    def SECRET_KEY(self):
        secret = self._get_setting('app', 'secret_key', None, 'SECRET_KEY')
        if not secret:
            if self.FLASK_ENV == "development":
                return "dev-secret-key-change-in-production"
            else:
                raise ValueError("SECRET_KEY must be set in settings or environment")
        return secret
    
    @property
    def APP_BASE_URL(self):
        return self._get_setting('app', 'base_url', 'https://admin.instainsure.co.in', 'APP_BASE_URL')
    
    # Company Information
    @property
    def COMPANY_NAME(self):
        return self._get_setting('company', 'name', 'Insta Insurance Consultancy')
    
    @property
    def PORTAL_NAME(self):
        return self._get_setting('company', 'portal_name', 'Insta Insurance Consultancy Portal')
    
    @property
    def PORTAL_TITLE(self):
        return self._get_setting('company', 'portal_title', 'Insta Insurances Portal')
    
    @property
    def LOGO_PATH(self):
        return self._get_setting('company', 'logo_path', 'ico.png')
    
    @property
    def COMPANY_LOGO_URL(self):
        return self._get_setting('company', 'logo_url', '')
    
    @property
    def COMPANY_ADDRESS(self):
        return self._get_setting('company', 'address', '')
    
    @property
    def COMPANY_PHONE(self):
        return self._get_setting('company', 'phone', '')
    
    @property
    def COMPANY_EMAIL(self):
        return self._get_setting('company', 'email', '')
    
    @property
    def COMPANY_WEBSITE(self):
        return self._get_setting('company', 'website', '')
    
    # Email Configuration
    @property
    def SMTP_SERVER(self):
        return self._get_setting('email', 'smtp_server', 'smtp.zoho.in', 'SMTP_SERVER')
    
    @property
    def SMTP_PORT(self):
        port = self._get_setting('email', 'smtp_port', 587, 'SMTP_PORT')
        return int(port) if port else 587
    
    @property
    def SMTP_USERNAME(self):
        return self._get_setting('email', 'smtp_username', None, 'SMTP_USERNAME')
    
    @property
    def SMTP_PASSWORD(self):
        return self._get_setting('email', 'smtp_password', None, 'SMTP_PASSWORD')
    
    @property
    def FROM_EMAIL(self):
        return self._get_setting('email', 'from_email', None, 'FROM_EMAIL')
    
    @property
    def FROM_NAME(self):
        return self._get_setting('email', 'from_name', 'Insta Insurance Consultancy', 'FROM_NAME')
    
    # WhatsApp Configuration
    @property
    def WHATSAPP_TOKEN(self):
        return self._get_setting('whatsapp', 'token', None, 'WHATSAPP_TOKEN')
    
    @property
    def WHATSAPP_PHONE_ID(self):
        return self._get_setting('whatsapp', 'phone_id', None, 'WHATSAPP_PHONE_ID')
    
    @property
    def VERIFY_TOKEN(self):
        return self._get_setting('whatsapp', 'verify_token', 'your_webhook_verify_token', 'VERIFY_TOKEN')
    
    # Twilio Configuration
    @property
    def TWILIO_ACCOUNT_SID(self):
        return self._get_setting('twilio', 'account_sid', '', 'TWILIO_ACCOUNT_SID')
    
    @property
    def TWILIO_AUTH_TOKEN(self):
        return self._get_setting('twilio', 'auth_token', '', 'TWILIO_AUTH_TOKEN')
    
    @property
    def TWILIO_WHATSAPP_FROM(self):
        return self._get_setting('twilio', 'whatsapp_from', 'whatsapp:+14155238886', 'TWILIO_WHATSAPP_FROM')
    
    @property
    def TWILIO_USE_CONTENT_TEMPLATE(self):
        use_template = self._get_setting('twilio', 'use_content_template', False)
        if isinstance(use_template, bool):
            return use_template
        # Handle string values from environment
        env_value = os.getenv("TWILIO_USE_CONTENT_TEMPLATE", "false")
        return env_value.lower() in ("1", "true", "yes")
    
    @property
    def TWILIO_CONTENT_SID(self):
        return self._get_setting('twilio', 'content_sid', '', 'TWILIO_CONTENT_SID')
    
    # Google Drive Configuration
    @property
    def GOOGLE_CREDENTIALS_FILE(self):
        return self._get_setting('google_drive', 'credentials_file', 'credentials.json', 'GOOGLE_CREDENTIALS_FILE')
    
    @property
    def GOOGLE_DRIVE_ROOT_FOLDER_ID(self):
        return self._get_setting('google_drive', 'root_folder_id', '', 'GOOGLE_DRIVE_ROOT_FOLDER_ID')
    
    @property
    def ROOT_FOLDER_ID(self):
        """Alias for GOOGLE_DRIVE_ROOT_FOLDER_ID for backward compatibility"""
        return self.GOOGLE_DRIVE_ROOT_FOLDER_ID
    
    @property
    def ARCHIVE_FOLDER_ID(self):
        return self._get_setting('google_drive', 'archive_folder_id', 'YOUR_ARCHIVE_FOLDER_ID_HERE', 'ARCHIVE_FOLDER_ID')
    
    # Business Settings
    @property
    def DEFAULT_GST_PERCENTAGE(self):
        gst = self._get_setting('business', 'default_gst_percentage', 18.0)
        return float(gst) if gst else 18.0
    
    @property
    def DEFAULT_COMMISSION_PERCENTAGE(self):
        commission = self._get_setting('business', 'default_commission_percentage', 10.0)
        return float(commission) if commission else 10.0
    
    @property
    def RENEWAL_REMINDER_DAYS(self):
        days = self._get_setting('notifications', 'renewal_reminder_days', 30)
        return int(days) if days else 30
    
    @property
    def ENABLE_EMAIL_NOTIFICATIONS(self):
        return self._get_setting('notifications', 'enable_email_notifications', True)
    
    @property
    def ENABLE_WHATSAPP_NOTIFICATIONS(self):
        return self._get_setting('notifications', 'enable_whatsapp_notifications', True)
    
    # File Upload Settings
    @property
    def MAX_FILE_SIZE_MB(self):
        size = self._get_setting('uploads', 'max_file_size_mb', 10)
        return int(size) if size else 10
    
    @property
    def ALLOWED_EXTENSIONS(self):
        extensions = self._get_setting('uploads', 'allowed_extensions', ["pdf", "jpg", "jpeg", "png", "doc", "docx"])
        if isinstance(extensions, list):
            return extensions
        return ["pdf", "jpg", "jpeg", "png", "doc", "docx"]
    
    # Legacy compatibility - keep old admin emails system as fallback
    @property
    def ADMIN_EMAILS(self):
        """Legacy admin emails - now managed through user roles in database"""
        admin_emails_str = os.getenv("ADMIN_EMAILS", "")
        if admin_emails_str:
            return [email.strip() for email in admin_emails_str.split(",")]
        return []
    
    def get_company_info(self):
        """Get all company information as a dictionary"""
        return {
            'name': self.COMPANY_NAME,
            'logo_url': self.COMPANY_LOGO_URL,
            'address': self.COMPANY_ADDRESS,
            'phone': self.COMPANY_PHONE,
            'email': self.COMPANY_EMAIL,
            'website': self.COMPANY_WEBSITE
        }
    
    def get_email_config(self):
        """Get email configuration as a dictionary"""
        return {
            'smtp_server': self.SMTP_SERVER,
            'smtp_port': self.SMTP_PORT,
            'smtp_username': self.SMTP_USERNAME,
            'smtp_password': self.SMTP_PASSWORD,
            'from_email': self.FROM_EMAIL,
            'from_name': self.FROM_NAME
        }
    
    def refresh_settings(self):
        """Force refresh of settings from database"""
        if self._settings_service:
            self._settings_service.clear_cache()
    
    def is_feature_enabled(self, feature: str) -> bool:
        """Check if a feature is enabled"""
        feature_map = {
            'email_notifications': self.ENABLE_EMAIL_NOTIFICATIONS,
            'whatsapp_notifications': self.ENABLE_WHATSAPP_NOTIFICATIONS,
        }
        return feature_map.get(feature, False)


# Global configuration instance
Config = DynamicConfig()

# For backward compatibility, also create a class-based Config
class ConfigClass:
    """Backward compatibility class that delegates to DynamicConfig instance"""
    def __getattr__(self, name):
        return getattr(Config, name)

# Export both for different usage patterns
__all__ = ['Config', 'ConfigClass', 'DynamicConfig']



================================================
FILE: email_service.py
================================================
import smtplib
import os
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from dynamic_config import Config
import logging
from jinja2 import Environment, FileSystemLoader, select_autoescape
from datetime import datetime

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def indian_date_filter(date_string):
    """Convert date from YYYY-MM-DD to DD/MM/YYYY format"""
    if not date_string:
        return 'N/A'
    
    try:
        if isinstance(date_string, str):
            if '/' in date_string and len(date_string.split('/')) == 3:
                parts = date_string.split('/')
                if len(parts[0]) == 2 and len(parts[1]) == 2 and len(parts[2]) == 4:
                    return date_string
            
            if '-' in date_string and len(date_string.split('-')) == 3:
                parts = date_string.split('-')
                if len(parts[0]) == 4:
                    return f"{parts[2]}/{parts[1]}/{parts[0]}"
                elif len(parts[2]) == 4:
                    return f"{parts[0]}/{parts[1]}/{parts[2]}"
        
        if hasattr(date_string, 'strftime'):
            return date_string.strftime('%d/%m/%Y')
        
        try:
            date_obj = datetime.strptime(str(date_string), '%Y-%m-%d')
            return date_obj.strftime('%d/%m/%Y')
        except ValueError:
            try:
                date_obj = datetime.strptime(str(date_string), '%d/%m/%Y')
                return date_obj.strftime('%d/%m/%Y')
            except ValueError:
                pass
        
        return str(date_string)
    except Exception as e:
        logger.error(f"Error formatting date {date_string}: {e}")
        return str(date_string)

# Setup Jinja2 to load HTML templates
env = Environment(
    loader=FileSystemLoader('templates/email'),
    autoescape=select_autoescape(['html', 'xml'])
)

# Register the date filter for use in templates
env.filters['indian_date'] = indian_date_filter

def _render_template(template_name, context):
    """Loads and renders an email template with the given context."""
    try:
        template = env.get_template(template_name)
        return template.render(context)
    except Exception as e:
        logger.error(f"Error rendering email template {template_name}: {e}")
        return None

def send_email(to_email, subject, html_body, attachments=None):
    """
    Send an HTML email with optional attachments.
    """
    try:
        if not all([Config.SMTP_SERVER, Config.SMTP_USERNAME, Config.SMTP_PASSWORD, Config.FROM_EMAIL]):
            logger.warning("Email configuration incomplete. Skipping email send.")
            return False, "Email configuration incomplete"

        msg = MIMEMultipart()
        msg['From'] = f"{Config.FROM_NAME} <{Config.FROM_EMAIL}>"
        msg['To'] = to_email
        msg['Subject'] = subject

        msg.attach(MIMEText(html_body, 'html'))

        if attachments:
            for attachment_path in attachments:
                if os.path.exists(attachment_path):
                    with open(attachment_path, "rb") as attachment:
                        part = MIMEBase('application', 'octet-stream')
                        part.set_payload(attachment.read())
                    encoders.encode_base64(part)
                    part.add_header('Content-Disposition', f'attachment; filename= {os.path.basename(attachment_path)}')
                    msg.attach(part)
                    logger.info(f"Attached file: {attachment_path}")

        with smtplib.SMTP(Config.SMTP_SERVER, Config.SMTP_PORT) as server:
            server.starttls()
            server.login(Config.SMTP_USERNAME, Config.SMTP_PASSWORD)
            server.sendmail(Config.FROM_EMAIL, to_email, msg.as_string())

        logger.info(f"Email sent successfully to {to_email}")
        return True, "Email sent successfully"

    except Exception as e:
        logger.error(f"Error sending email: {e}")
        return False, str(e)


def send_policy_email(customer_email, policy_data, file_path=None):
    """
    Render and send the 'Policy Issued' email.
    """
    try:
        # Use the official policy number in the subject
        subject = f"Your {policy_data.get('policy_type','')} Policy Document – {policy_data.get('policy_no','')}"

        # Create the context for the template
        context = policy_data.copy()
        context['app_base_url'] = Config.APP_BASE_URL

        html_body = _render_template('policy_issued_template.html', context)
        if not html_body:
            return False, "Failed to render email template"

        attachments = [file_path] if file_path and os.path.exists(file_path) else None
        
        return send_email(customer_email, subject, html_body, attachments)

    except Exception as e:
        logger.error(f"Error sending policy email: {e}")
        return False, str(e)


def send_renewal_reminder_email(customer_email, renewal_data, file_path=None):
    """
    Render and send the 'Renewal Reminder' email.
    """
    try:
        subject = f"🔔 Renewal Reminder – Policy No: {renewal_data.get('policy_no', '')}"
        
        # Create the context for the template
        context = renewal_data.copy()
        context['app_base_url'] = Config.APP_BASE_URL

        html_body = _render_template('renewal_reminder_template.html', context)
        if not html_body:
            return False, "Failed to render email template"

        attachments = [file_path] if file_path and os.path.exists(file_path) else None
        
        return send_email(customer_email, subject, html_body, attachments)

    except Exception as e:
        logger.error(f"Error sending renewal reminder email: {e}")
        return False, str(e)


def get_customer_email(phone):
    """
    Get customer email from database using phone number
    
    Args:
        phone (str): Customer phone number
    
    Returns:
        str: Customer email address or None
    """
    try:
        from supabase import create_client
        supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
        
        # Try different phone number formats against clients table
        normalized_phone = phone.replace('+', '').replace(' ', '').replace('-', '')
        
        for phone_format in [normalized_phone, f'+{normalized_phone}', phone]:
            client_response = supabase.table('clients').select('email').eq('phone', phone_format).execute()
            if client_response.data:
                return client_response.data[0].get('email')
        
        return None
        
    except Exception as e:
        logger.error(f"Error fetching customer email: {e}")
        return None



================================================
FILE: excel_service.py
================================================
"""
Excel Sync Service for Insurance Portal
Integrates with Google Drive for shared Excel file access
"""

import os
import time
import threading
import logging
from datetime import datetime
from pathlib import Path
from supabase import create_client, Client
import pandas as pd
import numpy as np
from openpyxl import load_workbook
from openpyxl.styles import Font, PatternFill
import hashlib
import json
from dynamic_config import Config
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
import io

logger = logging.getLogger(__name__)

class ExcelSyncService:
    def __init__(self, excel_filename="insurance_data.xlsx"):
        """Initialize Excel sync service with Google Drive integration"""
        self.supabase: Client = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
        self.excel_filename = excel_filename
        self.local_excel_path = os.path.join(os.getcwd(), excel_filename)
        self.sync_lock = threading.Lock()
        
        # Initialize Google Drive service
        self.drive_service = self._init_google_drive()
        self.excel_file_id = None
        
        # Find or create Excel file in Google Drive root
        self._setup_drive_excel_file()
        
        logger.info(f"Excel sync service initialized for file: {excel_filename}")

    def _init_google_drive(self):
        """Initialize Google Drive API service"""
        try:
            credentials = Credentials.from_service_account_file(
                Config.GOOGLE_CREDENTIALS_FILE,
                scopes=['https://www.googleapis.com/auth/drive']
            )
            service = build('drive', 'v3', credentials=credentials)
            logger.info("Google Drive service initialized successfully")
            return service
        except Exception as e:
            logger.error(f"Failed to initialize Google Drive service: {e}")
            raise

    def _setup_drive_excel_file(self):
        """Find or create Excel file in Google Drive root"""
        try:
            # Search for existing Excel file in root
            query = f"name='{self.excel_filename}' and parents in 'root' and trashed=false"
            results = self.drive_service.files().list(q=query).execute()
            files = results.get('files', [])
            
            if files:
                self.excel_file_id = files[0]['id']
                logger.info(f"Found existing Excel file in Drive: {self.excel_file_id}")
            else:
                # Create new Excel file
                self._create_initial_excel_file()
                logger.info(f"Created new Excel file in Drive: {self.excel_file_id}")
                
        except Exception as e:
            logger.error(f"Error setting up Drive Excel file: {e}")
            raise

    def _create_initial_excel_file(self):
        """Create initial Excel file with current Supabase data"""
        try:
            # Generate Excel locally first
            self._export_supabase_to_local_excel()
            
            # Upload to Google Drive root
            file_metadata = {
                'name': self.excel_filename,
                'parents': ['root']  # Root folder
            }
            
            media = MediaFileUpload(
                self.local_excel_path,
                mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
            
            file = self.drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id'
            ).execute()
            
            self.excel_file_id = file.get('id')
            
            # Set permissions for anyone with link to edit
            permission = {
                'type': 'anyone',
                'role': 'writer'
            }
            self.drive_service.permissions().create(
                fileId=self.excel_file_id,
                body=permission
            ).execute()
            
            logger.info(f"Excel file created and shared in Google Drive root")
            
        except Exception as e:
            logger.error(f"Error creating initial Excel file: {e}")
            raise

    def _format_excel(self, filename):
        """Apply formatting to Excel file"""
        try:
            wb = load_workbook(filename)
            
            for sheet in wb.worksheets:
                # Format headers
                for cell in sheet[1]:
                    cell.font = Font(bold=True, color="FFFFFF")
                    cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                
                # Auto-adjust column widths
                for column in sheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(cell.value)
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    sheet.column_dimensions[column_letter].width = adjusted_width
            
            wb.save(filename)
            logger.debug(f"Excel formatting applied to {filename}")
        except Exception as e:
            logger.warning(f"Could not format Excel: {e}")

    def _export_supabase_to_local_excel(self):
        """Export Supabase data to local Excel file"""
        try:
            logger.info("Exporting Supabase data to local Excel...")
            
            with pd.ExcelWriter(self.local_excel_path, engine='openpyxl') as writer:
                # Clients
                clients = self.supabase.table("clients").select("*").execute()
                df_clients = pd.DataFrame(clients.data)
                if not df_clients.empty:
                    df_clients.to_excel(writer, sheet_name="Clients", index=False)
                
                # Members with client info
                members = self.supabase.table("members").select(
                    "*, clients(name, phone, email)"
                ).execute()
                df_members = pd.DataFrame(members.data)
                if not df_members.empty:
                    # Process client join data
                    if 'clients' in df_members.columns:
                        client_df = pd.json_normalize(df_members['clients'])
                        client_df.columns = ['client_' + col for col in client_df.columns]
                        df_members = pd.concat([df_members.drop('clients', axis=1), client_df], axis=1)
                    
                    # Reorder columns
                    cols = df_members.columns.tolist()
                    if 'client_id' in cols:
                        cols.remove('client_id')
                        if 'member_id' in cols:
                            idx = cols.index('member_id') + 1
                            cols.insert(idx, 'client_id')
                        else:
                            cols.insert(0, 'client_id')
                        df_members = df_members[cols]
                    
                    df_members.to_excel(writer, sheet_name="Members", index=False)
                
                # Policies with client and member info
                policies = self.supabase.table("policies").select(
                    "*, clients(name, phone, email), members(member_name)"
                ).execute()
                df_policies = pd.DataFrame(policies.data)
                if not df_policies.empty:
                    # Process join data
                    if 'clients' in df_policies.columns:
                        client_df = pd.json_normalize(df_policies['clients'])
                        client_df.columns = ['client_' + col for col in client_df.columns]
                        df_policies = pd.concat([df_policies.drop('clients', axis=1), client_df], axis=1)
                    
                    if 'members' in df_policies.columns:
                        member_df = pd.json_normalize(df_policies['members'])
                        member_df.columns = ['member_' + col for col in member_df.columns]
                        df_policies = pd.concat([df_policies.drop('members', axis=1), member_df], axis=1)
                    
                    # Add commission amount calculation (Net + Addon) * Commission %
                    if 'net_premium' in df_policies.columns and 'commission_percentage' in df_policies.columns:
                        net_premium = pd.to_numeric(df_policies['net_premium'], errors='coerce').fillna(0)
                        addon_premium = pd.to_numeric(df_policies.get('addon_premium', 0), errors='coerce').fillna(0)
                        commission_percentage = pd.to_numeric(df_policies['commission_percentage'], errors='coerce').fillna(0)
                        
                        # Calculate commission based on (Net + Addon) * Commission %
                        commission_base = net_premium + addon_premium
                        df_policies['calculated_commission_amount'] = (commission_base * commission_percentage / 100).round(2)
                        
                        # Use stored commission_amount if available, otherwise use calculated
                        if 'commission_amount' not in df_policies.columns:
                            df_policies['commission_amount'] = df_policies['calculated_commission_amount']
                        else:
                            # Fill missing commission_amount with calculated values
                            df_policies['commission_amount'] = df_policies['commission_amount'].fillna(df_policies['calculated_commission_amount'])
                        
                        # Remove the temporary calculated column
                        df_policies.drop('calculated_commission_amount', axis=1, inplace=True)
                    
                    # Reorder columns
                    cols = df_policies.columns.tolist()
                    if 'client_id' in cols and 'member_id' in cols:
                        cols.remove('client_id')
                        cols.remove('member_id')
                        if 'policy_id' in cols:
                            idx = cols.index('policy_id') + 1
                            cols.insert(idx, 'client_id')
                            cols.insert(idx + 1, 'member_id')
                        else:
                            cols.insert(0, 'client_id')
                            cols.insert(1, 'member_id')
                        df_policies = df_policies[cols]
                    
                    df_policies.to_excel(writer, sheet_name="Policies", index=False)
                
                # Claims with policy and client info
                claims = self.supabase.table("claims").select(
                    "*, policies(policy_number, clients(name, phone, email))"
                ).execute()
                df_claims = pd.DataFrame(claims.data)
                if not df_claims.empty:
                    # Process join data
                    if 'policies' in df_claims.columns:
                        policy_df = pd.json_normalize(df_claims['policies'])
                        policy_df.columns = ['policy_' + col for col in policy_df.columns]
                        df_claims = pd.concat([df_claims.drop('policies', axis=1), policy_df], axis=1)
                    
                    df_claims.to_excel(writer, sheet_name="Claims", index=False)
                
                # Pending Policies
                pending = self.supabase.table("pending_policies").select(
                    "*, clients(name, phone, email), members(member_name)"
                ).execute()
                df_pending = pd.DataFrame(pending.data)
                if not df_pending.empty:
                    # Process join data
                    if 'clients' in df_pending.columns:
                        client_df = pd.json_normalize(df_pending['clients'])
                        client_df.columns = ['client_' + col for col in client_df.columns]
                        df_pending = pd.concat([df_pending.drop('clients', axis=1), client_df], axis=1)
                    
                    if 'members' in df_pending.columns:
                        member_df = pd.json_normalize(df_pending['members'])
                        member_df.columns = ['member_' + col for col in member_df.columns]
                        df_pending = pd.concat([df_pending.drop('members', axis=1), member_df], axis=1)
                    
                    # Add commission amount calculation for pending policies (Net + Addon) * Commission %
                    if 'net_premium' in df_pending.columns and 'commission_percentage' in df_pending.columns:
                        net_premium = pd.to_numeric(df_pending['net_premium'], errors='coerce').fillna(0)
                        addon_premium = pd.to_numeric(df_pending.get('addon_premium', 0), errors='coerce').fillna(0)
                        commission_percentage = pd.to_numeric(df_pending['commission_percentage'], errors='coerce').fillna(0)
                        
                        # Calculate commission based on (Net + Addon) * Commission %
                        commission_base = net_premium + addon_premium
                        df_pending['calculated_commission_amount'] = (commission_base * commission_percentage / 100).round(2)
                        
                        # Use stored commission_amount if available, otherwise use calculated
                        if 'commission_amount' not in df_pending.columns:
                            df_pending['commission_amount'] = df_pending['calculated_commission_amount']
                        else:
                            # Fill missing commission_amount with calculated values
                            df_pending['commission_amount'] = df_pending['commission_amount'].fillna(df_pending['calculated_commission_amount'])
                        
                        # Remove the temporary calculated column
                        df_pending.drop('calculated_commission_amount', axis=1, inplace=True)
                    
                    # Reorder columns
                    cols = df_pending.columns.tolist()
                    if 'client_id' in cols and 'member_id' in cols:
                        cols.remove('client_id')
                        cols.remove('member_id')
                        if 'pending_id' in cols:
                            idx = cols.index('pending_id') + 1
                            cols.insert(idx, 'client_id')
                            cols.insert(idx + 1, 'member_id')
                        else:
                            cols.insert(0, 'client_id')
                            cols.insert(1, 'member_id')
                        df_pending = df_pending[cols]
                    
                    df_pending.to_excel(writer, sheet_name="Pending Policies", index=False)
                
                # Health Insurance Details with floater fields
                health_details = self.supabase.table("health_insurance_details").select("*").execute()
                df_health = pd.DataFrame(health_details.data)
                if not df_health.empty:
                    df_health.to_excel(writer, sheet_name="Health Insurance Details", index=False)
                
                # Factory Insurance Details
                factory_details = self.supabase.table("factory_insurance_details").select("*").execute()
                df_factory = pd.DataFrame(factory_details.data)
                if not df_factory.empty:
                    df_factory.to_excel(writer, sheet_name="Factory Insurance Details", index=False)
                
                # Policy History
                policy_history = self.supabase.table("policy_history").select("*").execute()
                df_history = pd.DataFrame(policy_history.data)
                if not df_history.empty:
                    # Reorder columns for better readability
                    history_cols = df_history.columns.tolist()
                    
                    # Define preferred column order
                    preferred_order = [
                        'history_id', 'original_policy_id', 'client_id', 'member_id',
                        'insurance_company', 'product_name', 'policy_number',
                        'policy_from', 'policy_to', 'net_premium', 'gross_premium',
                        'sum_insured', 'agent_name', 'archived_at', 'archived_reason', 'archived_by'
                    ]
                    
                    # Reorder columns based on preference, keeping any extra columns at the end
                    ordered_cols = []
                    for col in preferred_order:
                        if col in history_cols:
                            ordered_cols.append(col)
                            history_cols.remove(col)
                    
                    # Add remaining columns
                    ordered_cols.extend(history_cols)
                    df_history = df_history[ordered_cols]
                    
                    # Format dates for better readability
                    date_columns = ['policy_from', 'policy_to', 'payment_date', 'archived_at', 'created_at', 'renewed_at']
                    for col in date_columns:
                        if col in df_history.columns:
                            df_history[col] = pd.to_datetime(df_history[col], errors='coerce').dt.strftime('%Y-%m-%d %H:%M:%S')
                    
                    # Format currency columns
                    currency_columns = ['net_premium', 'gross_premium', 'addon_premium', 'tp_tr_premium', 
                                      'commission_amount', 'sum_insured']
                    for col in currency_columns:
                        if col in df_history.columns:
                            df_history[col] = pd.to_numeric(df_history[col], errors='coerce').round(2)
                    
                    df_history.to_excel(writer, sheet_name="Policy History", index=False)
            
            # Apply formatting
            self._format_excel(self.local_excel_path)
            logger.info("Local Excel export completed successfully")
            
        except Exception as e:
            logger.error(f"Error exporting to local Excel: {e}")
            raise

    def export_to_drive(self):
        """Export current Supabase data to Google Drive Excel file"""
        with self.sync_lock:
            try:
                logger.info("Starting export to Google Drive...")
                
                # Create local Excel file with latest data
                self._export_supabase_to_local_excel()
                
                # Upload to Google Drive
                media = MediaFileUpload(
                    self.local_excel_path,
                    mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                )
                
                self.drive_service.files().update(
                    fileId=self.excel_file_id,
                    media_body=media
                ).execute()
                
                logger.info("Excel file updated in Google Drive successfully")
                return True, "Excel file updated successfully in Google Drive"
                
            except Exception as e:
                logger.error(f"Error exporting to Drive: {e}")
                return False, f"Export failed: {str(e)}"

    def download_from_drive(self):
        """Download Excel file from Google Drive"""
        try:
            logger.info("Downloading Excel file from Google Drive...")
            
            request = self.drive_service.files().get_media(fileId=self.excel_file_id)
            file_io = io.BytesIO()
            downloader = MediaIoBaseDownload(file_io, request)
            
            done = False
            while done is False:
                status, done = downloader.next_chunk()
            
            # Save to local file
            with open(self.local_excel_path, 'wb') as f:
                f.write(file_io.getvalue())
            
            logger.info("Excel file downloaded successfully")
            return True, "Excel file downloaded successfully"
            
        except Exception as e:
            logger.error(f"Error downloading from Drive: {e}")
            return False, f"Download failed: {str(e)}"

    def get_drive_file_info(self):
        """Get information about the Excel file in Google Drive"""
        try:
            file_info = self.drive_service.files().get(
                fileId=self.excel_file_id,
                fields='id,name,modifiedTime,size,webViewLink,webContentLink'
            ).execute()
            
            return {
                'file_id': file_info.get('id'),
                'name': file_info.get('name'),
                'modified_time': file_info.get('modifiedTime'),
                'size': file_info.get('size'),
                'view_link': file_info.get('webViewLink'),
                'download_link': file_info.get('webContentLink')
            }
            
        except Exception as e:
            logger.error(f"Error getting file info: {e}")
            return None

    def get_shareable_link(self):
        """Get shareable Google Drive link for the Excel file"""
        try:
            file_info = self.get_drive_file_info()
            if file_info:
                return file_info['view_link']
            return None
        except Exception as e:
            logger.error(f"Error getting shareable link: {e}")
            return None

    def export_policy_history_report(self, policy_id=None, client_id=None, date_from=None, date_to=None):
        """
        Create a detailed policy history report with enhanced formatting
        
        Args:
            policy_id (int): Specific policy ID to filter by (optional)
            client_id (str): Specific client ID to filter by (optional)
            date_from (str): Start date for archived_at filter (optional)
            date_to (str): End date for archived_at filter (optional)
        
        Returns:
            str: Path to the generated Excel file
        """
        try:
            # Generate filename with timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"policy_history_report_{timestamp}.xlsx"
            report_path = os.path.join(os.getcwd(), filename)
            
            logger.info(f"Generating policy history report: {filename}")
            
            with pd.ExcelWriter(report_path, engine='openpyxl') as writer:
                # Build query for policy history
                query = self.supabase.table("policy_history").select("*")
                
                # Apply filters
                if policy_id:
                    query = query.eq("original_policy_id", policy_id)
                if client_id:
                    query = query.eq("client_id", client_id)
                if date_from:
                    query = query.gte("archived_at", date_from)
                if date_to:
                    query = query.lte("archived_at", date_to)
                
                # Execute query
                history_result = query.order("archived_at", desc=True).execute()
                df_history = pd.DataFrame(history_result.data)
                
                if not df_history.empty:
                    # Enhanced column ordering and formatting
                    preferred_order = [
                        'history_id', 'original_policy_id', 'client_id', 'member_id',
                        'insurance_company', 'product_name', 'policy_number',
                        'policy_from', 'policy_to', 'net_premium', 'gross_premium', 'sum_insured',
                        'agent_name', 'business_type', 'group_name', 'subgroup_name',
                        'commission_percentage', 'commission_amount', 'payment_date',
                        'archived_at', 'archived_reason', 'archived_by', 'remarks'
                    ]
                    
                    # Reorder columns
                    available_cols = df_history.columns.tolist()
                    ordered_cols = [col for col in preferred_order if col in available_cols]
                    remaining_cols = [col for col in available_cols if col not in ordered_cols]
                    final_cols = ordered_cols + remaining_cols
                    
                    df_history = df_history[final_cols]
                    
                    # Format data for better readability
                    # Format dates
                    date_columns = ['policy_from', 'policy_to', 'payment_date', 'archived_at', 'created_at', 'renewed_at']
                    for col in date_columns:
                        if col in df_history.columns:
                            df_history[col] = pd.to_datetime(df_history[col], errors='coerce').dt.strftime('%Y-%m-%d %H:%M:%S')
                    
                    # Format currency columns
                    currency_columns = ['net_premium', 'gross_premium', 'addon_premium', 'tp_tr_premium', 
                                      'commission_amount', 'sum_insured']
                    for col in currency_columns:
                        if col in df_history.columns:
                            df_history[col] = pd.to_numeric(df_history[col], errors='coerce').round(2)
                    
                    # Add summary information
                    summary_data = {
                        'Total Historical Records': len(df_history),
                        'Unique Policies': df_history['original_policy_id'].nunique() if 'original_policy_id' in df_history.columns else 0,
                        'Unique Clients': df_history['client_id'].nunique() if 'client_id' in df_history.columns else 0,
                        'Date Range': f"{df_history['archived_at'].min()} to {df_history['archived_at'].max()}" if 'archived_at' in df_history.columns else 'N/A',
                        'Report Generated': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    }
                    
                    # Create summary sheet
                    df_summary = pd.DataFrame(list(summary_data.items()), columns=['Metric', 'Value'])
                    df_summary.to_excel(writer, sheet_name="Summary", index=False)
                    
                    # Main history data
                    df_history.to_excel(writer, sheet_name="Policy History Details", index=False)
                    
                    # Group by policy for analysis
                    if 'original_policy_id' in df_history.columns:
                        policy_summary = df_history.groupby('original_policy_id').agg({
                            'history_id': 'count',
                            'archived_at': ['min', 'max'],
                            'net_premium': ['first', 'last'] if 'net_premium' in df_history.columns else 'count',
                            'insurance_company': lambda x: ' → '.join(x.unique()) if len(x.unique()) > 1 else x.iloc[0]
                        }).round(2)
                        
                        # Flatten column names
                        policy_summary.columns = ['_'.join(col).strip() if isinstance(col, tuple) else col for col in policy_summary.columns]
                        policy_summary = policy_summary.reset_index()
                        
                        # Rename columns for clarity
                        column_mapping = {
                            'history_id_count': 'Total_Versions',
                            'archived_at_min': 'First_Archived',
                            'archived_at_max': 'Last_Archived',
                            'net_premium_first': 'Original_Premium',
                            'net_premium_last': 'Latest_Premium',
                            'insurance_company_<lambda>': 'Company_Changes'
                        }
                        
                        for old_name, new_name in column_mapping.items():
                            if old_name in policy_summary.columns:
                                policy_summary.rename(columns={old_name: new_name}, inplace=True)
                        
                        policy_summary.to_excel(writer, sheet_name="Policy Summary", index=False)
                
                else:
                    # Create empty sheet with message
                    df_empty = pd.DataFrame({'Message': ['No policy history records found with the specified criteria']})
                    df_empty.to_excel(writer, sheet_name="Policy History Details", index=False)
            
            # Apply enhanced formatting
            self._format_excel(report_path)
            logger.info(f"Policy history report generated successfully: {filename}")
            
            return report_path
            
        except Exception as e:
            logger.error(f"Error generating policy history report: {e}")
            raise


# Global instance for use across the application
excel_service = ExcelSyncService()



================================================
FILE: excel_sync_service.py
================================================
"""
Real-time Excel Sync Service for Insurance Portal
Based on the original RealtimeSupabaseExcelSync implementation
"""

import os
import time
import threading
import logging
from datetime import datetime, date
from pathlib import Path
from supabase import create_client, Client
import pandas as pd
import numpy as np
from openpyxl import load_workbook, Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter
import hashlib
import json
from dynamic_config import Config
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
import io

logger = logging.getLogger(__name__)

class RealtimeExcelSync:
    def __init__(self, excel_file="insurance_data.xlsx"):
        """Initialize real-time sync between Supabase and Excel"""
        self.supabase: Client = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
        self.excel_file = excel_file
        self.local_excel_path = os.path.join(os.getcwd(), excel_file)
        self.is_syncing = False
        self.last_excel_hash = {}
        self.last_supabase_data = {}
        self.sync_lock = threading.Lock()
        self.sync_thread = None
        self.stop_sync = False
        
        # Initialize Google Drive
        self.drive_service = self._init_google_drive()
        self.drive_file_id = None
        
        # Create initial Excel file if it doesn't exist
        if not os.path.exists(self.local_excel_path):
            self._initial_export()
        
        # Setup Google Drive file
        self._setup_drive_file()
        
        self._update_hashes()
        logger.info(f"Real-time Excel sync initialized for: {excel_file}")
    
    def _determine_financial_year(self, policy_from_date):
        """Determine financial year from policy start date (April to March)"""
        if not policy_from_date:
            return None
        
        try:
            # Handle different date formats
            if isinstance(policy_from_date, str):
                for fmt in ('%Y-%m-%d', '%d/%m/%Y', '%Y-%m-%d %H:%M:%S'):
                    try:
                        start_date = datetime.strptime(policy_from_date, fmt).date()
                        break
                    except ValueError:
                        continue
                else:
                    return None
            elif isinstance(policy_from_date, datetime):
                start_date = policy_from_date.date()
            elif isinstance(policy_from_date, date):
                start_date = policy_from_date
            else:
                return None
            
            # Financial year logic: April to March
            if start_date.month >= 4:  # April to December
                return f"{start_date.year}-{str(start_date.year + 1)[2:]}"
            else:  # January to March
                return f"{start_date.year - 1}-{str(start_date.year)[2:]}"
                
        except Exception as e:
            logger.warning(f"Error determining financial year for date {policy_from_date}: {e}")
            return None
    
    def _get_policies_with_insurance_details(self):
        """Get all policies with health and factory insurance details"""
        try:
            # Get all policies with client and member info
            policies = self.supabase.table("policies").select(
                "*, clients(name, phone, email), members(member_name)"
            ).execute()
            
            policies_data = policies.data
            
            # Get health insurance details
            health_details = {}
            health_members = {}
            
            for policy in policies_data:
                policy_id = policy['policy_id']
                
                # Get health insurance details
                health_result = self.supabase.table("health_insurance_details").select("*").eq("policy_id", policy_id).execute()
                if health_result.data:
                    health_details[policy_id] = health_result.data[0]
                    
                    # Get health members
                    health_id = health_result.data[0]['health_id']
                    members_result = self.supabase.table("health_insured_members").select("*").eq("health_id", health_id).execute()
                    health_members[policy_id] = members_result.data
            
            # Get factory insurance details
            factory_details = {}
            for policy in policies_data:
                policy_id = policy['policy_id']
                factory_result = self.supabase.table("factory_insurance_details").select("*").eq("policy_id", policy_id).execute()
                if factory_result.data:
                    factory_details[policy_id] = factory_result.data[0]
            
            return policies_data, health_details, health_members, factory_details
            
        except Exception as e:
            logger.error(f"Error getting policies with insurance details: {e}")
            return [], {}, {}, {}
    
    def _get_claims_with_details(self):
        """Get all claims with policy and client information"""
        try:
            # Get all claims with policy and client info
            claims = self.supabase.table("claims").select(
                "*, policies(policy_number, policy_from, clients(name, phone, email))"
            ).execute()
            
            return claims.data
            
        except Exception as e:
            logger.error(f"Error getting claims with details: {e}")
            return []
    
    def _convert_date_for_display(self, date_str):
        """Convert database date to display format"""
        if not date_str:
            return ""
        try:
            if isinstance(date_str, str):
                for fmt in ('%Y-%m-%d', '%d/%m/%Y', '%Y-%m-%d %H:%M:%S'):
                    try:
                        date_obj = datetime.strptime(date_str, fmt)
                        return date_obj.strftime('%d/%m/%Y')
                    except ValueError:
                        continue
            return str(date_str)
        except:
            return str(date_str) if date_str else ""

    def _init_google_drive(self):
        """Initialize Google Drive API service (same as existing integration)"""
        try:
            credentials = Credentials.from_service_account_file(
                Config.GOOGLE_CREDENTIALS_FILE,
                scopes=['https://www.googleapis.com/auth/drive']
            )
            service = build('drive', 'v3', credentials=credentials)
            logger.info("Google Drive service initialized for shared drives")
            return service
        except Exception as e:
            logger.error(f"Failed to initialize Google Drive: {e}")
            return None

    def _setup_drive_file(self):
        """Find or create Excel file in Google Drive (using shared drive approach)"""
        if not self.drive_service:
            logger.warning("Google Drive service not available")
            return
            
        try:
            # Search for existing file in root folder (ID: 0AOc3bRLhlrgzUk9PVA)
            ROOT_FOLDER_ID = "0AOc3bRLhlrgzUk9PVA"
            query = f"name='{self.excel_file}' and '{ROOT_FOLDER_ID}' in parents and trashed=false"
            results = self.drive_service.files().list(
                q=query,
                fields="files(id, name, parents, webViewLink)",
                supportsAllDrives=True,
                includeItemsFromAllDrives=True
            ).execute()
            files = results.get('files', [])
            
            if files:
                self.drive_file_id = files[0]['id']
                logger.info(f"Found existing Excel file in shared drive: {self.drive_file_id}")
            else:
                # Create new file using archive folder as parent (same as existing pattern)
                self._upload_to_drive()
                logger.info(f"Created new Excel file in shared drive: {self.drive_file_id}")
                
        except Exception as e:
            logger.error(f"Error setting up Drive file: {e}")
            self.drive_file_id = None

    def _upload_to_drive(self):
        """Upload Excel file to Google Drive (using shared drive approach like existing code)"""
        if not self.drive_service:
            return
            
        try:
            # Use root folder as parent (ID: 0AOc3bRLhlrgzUk9PVA)
            ROOT_FOLDER_ID = "0AOc3bRLhlrgzUk9PVA"
            file_metadata = {
                'name': self.excel_file,
                'parents': [ROOT_FOLDER_ID]  # Use root folder for Excel file
            }
            
            media = MediaFileUpload(
                self.local_excel_path,
                mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
            
            file = self.drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id, name, webViewLink',
                supportsAllDrives=True  # Essential for shared drives
            ).execute()
            
            self.drive_file_id = file.get('id')
            
            # Set permissions for shared drive access (same as existing pattern)
            try:
                permission = {
                    'type': 'anyone',
                    'role': 'reader'  # Reader access for shared drives
                }
                self.drive_service.permissions().create(
                    fileId=self.drive_file_id,
                    body=permission,
                    supportsAllDrives=True
                ).execute()
                logger.info("Excel file permissions set for shared drive access")
            except Exception as perm_error:
                logger.warning(f"Could not set permissions (may already be inherited): {perm_error}")
            
            logger.info(f"Excel file uploaded to root folder in shared drive: {self.drive_file_id}")
            
        except Exception as e:
            logger.error(f"Error uploading to shared drive: {e}")
            self.drive_file_id = None

    def _update_drive_file(self):
        """Update existing file in Google Drive (using shared drive approach)"""
        if not self.drive_service or not self.drive_file_id:
            return
            
        try:
            media = MediaFileUpload(
                self.local_excel_path,
                mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
            
            self.drive_service.files().update(
                fileId=self.drive_file_id,
                media_body=media,
                supportsAllDrives=True  # Essential for shared drives
            ).execute()
            
            logger.info("Excel file updated in shared drive")
            
        except Exception as e:
            logger.error(f"Error updating shared drive file: {e}")

    def _initial_export(self):
        """Create initial Excel file from Supabase"""
        logger.info("Creating initial Excel file...")
        self.export_supabase_to_excel()

    def _get_file_hash(self, filepath):
        """Calculate hash of Excel file"""
        if not os.path.exists(filepath):
            return None
        return hashlib.md5(open(filepath, 'rb').read()).hexdigest()

    def _get_data_hash(self, data):
        """Calculate hash of data"""
        return hashlib.md5(json.dumps(data, sort_keys=True, default=str).encode()).hexdigest()

    def _update_hashes(self):
        """Update stored hashes"""
        self.last_excel_hash = self._get_file_hash(self.local_excel_path)

        # Get current Supabase data hashes
        try:
            clients = self.supabase.table("clients").select("*").execute()
            members = self.supabase.table("members").select("*").execute()
            policies = self.supabase.table("policies").select("*").execute()
            pending = self.supabase.table("pending_policies").select("*").execute()
            claims = self.supabase.table("claims").select("*").execute()
            policy_history = self.supabase.table("policy_history").select("*").execute()

            self.last_supabase_data = {
                'clients': self._get_data_hash(clients.data),
                'members': self._get_data_hash(members.data),
                'policies': self._get_data_hash(policies.data),
                'pending_policies': self._get_data_hash(pending.data),
                'claims': self._get_data_hash(claims.data),
                'policy_history': self._get_data_hash(policy_history.data)
            }
        except Exception as e:
            logger.error(f"Error updating Supabase hashes: {e}")

    def _format_excel(self, filename):
        """Apply formatting to Excel file"""
        try:
            wb = load_workbook(filename)

            for sheet in wb.worksheets:
                # Format headers
                for cell in sheet[1]:
                    cell.font = Font(bold=True, color="FFFFFF")
                    cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")

                # Auto-adjust column widths
                for column in sheet.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(cell.value)
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    sheet.column_dimensions[column_letter].width = adjusted_width

            wb.save(filename)
        except Exception as e:
            logger.warning(f"Could not format Excel: {e}")

    def export_supabase_to_excel(self):
        """Export Supabase data to Excel with financial year-based sheets"""
        with self.sync_lock:
            logger.info(f"[{datetime.now().strftime('%H:%M:%S')}] Exporting Supabase → Excel (Financial Year Sheets)...")

            try:
                # Create new workbook
                wb = Workbook()
                
                # Remove default sheet
                if 'Sheet' in wb.sheetnames:
                    wb.remove(wb['Sheet'])
                
                # Get policies with insurance details
                policies_data, health_details, health_members, factory_details = self._get_policies_with_insurance_details()
                
                if not policies_data:
                    logger.warning("No policies found to export")
                    # Create a placeholder sheet
                    ws = wb.create_sheet("No Data")
                    ws['A1'] = "No policies found"
                    wb.save(self.local_excel_path)
                    return
                
                # Group policies by financial year based on policy start date
                policies_by_year = {}
                for policy in policies_data:
                    financial_year = self._determine_financial_year(policy.get('policy_from'))
                    if financial_year:
                        if financial_year not in policies_by_year:
                            policies_by_year[financial_year] = []
                        policies_by_year[financial_year].append(policy)
                
                # Get claims data
                claims_data = self._get_claims_with_details()
                
                # Group claims by financial year based on claim creation date
                claims_by_year = {}
                for claim in claims_data:
                    # Use claim creation date instead of policy start date
                    claim_date = claim.get('created_at')
                    if claim_date:
                        financial_year = self._determine_financial_year(claim_date)
                        if financial_year:
                            if financial_year not in claims_by_year:
                                claims_by_year[financial_year] = []
                            claims_by_year[financial_year].append(claim)
                
                # Create sheets for each financial year (policies)
                for financial_year in sorted(policies_by_year.keys(), reverse=True):
                    year_policies = policies_by_year[financial_year]
                    self._create_financial_year_sheet(wb, financial_year, year_policies, health_details, health_members, factory_details)
                
                # Create sheets for each financial year (claims)
                for financial_year in sorted(claims_by_year.keys(), reverse=True):
                    year_claims = claims_by_year[financial_year]
                    self._create_claims_financial_year_sheet(wb, financial_year, year_claims)
                
                # Also create summary sheets
                self._create_clients_sheet(wb)
                self._create_members_sheet(wb)
                self._create_pending_policies_sheet(wb)
                self._create_policy_history_sheet(wb)
                
                # Save workbook
                wb.save(self.local_excel_path)
                
                # Apply additional formatting
                self._format_excel(self.local_excel_path)
                
                # Upload to Google Drive
                self._update_drive_file()
                self._update_hashes()
                
                logger.info(f"[{datetime.now().strftime('%H:%M:%S')}] ✓ Export completed with {len(policies_by_year)} financial year sheets")
                
            except Exception as e:
                logger.error(f"[{datetime.now().strftime('%H:%M:%S')}] ✗ Export error: {e}")
    
    def _create_financial_year_sheet(self, workbook, financial_year, policies, health_details, health_members, factory_details):
        """Create a sheet for a specific financial year with all policy data including health and factory details"""
        try:
            ws = workbook.create_sheet(financial_year)
            
            # Determine maximum number of health members across all policies
            max_health_members = 0
            for policy in policies:
                policy_id = policy['policy_id']
                if policy_id in health_members:
                    max_health_members = max(max_health_members, len(health_members[policy_id]))
            
            # Define headers with client-friendly names
            headers = [
                "Policy ID", "Client Name", "Member Name", "Policy Number", "Insurance Company", 
                "Product Type", "Agent Name", "Policy Start Date", "Policy End Date", "Payment Date",
                "Business Type", "Group", "Subgroup", "Remarks", "Sum Insured", "Net Premium", 
                "Addon Premium", "TP/TR Premium", "GST %", "Gross Premium", "Commission %", "Commission Amount", 
                "Commission Received", "One Time Insurance", "Payment Details", "File Path", "Drive File ID", 
                "Drive Path", "Drive URL", "Last Reminder Sent", "Renewed At", "Created At", "Updated At"
            ]
            
            # Add health insurance headers if applicable
            if max_health_members > 0:
                headers.extend(["Health Plan Type", "Floater Sum Insured", "Floater Bonus", "Floater Deductible"])
                for i in range(max_health_members):
                    member_num = i + 1
                    headers.extend([
                        f"Health Member {member_num} Name",
                        f"Health Member {member_num} Sum Insured", 
                        f"Health Member {member_num} Bonus",
                        f"Health Member {member_num} Deductible"
                    ])
            
            # Add factory insurance headers
            factory_headers = [
                "Factory Building Coverage", "Factory Plant & Machinery Coverage", 
                "Factory Furniture & Fittings Coverage", "Factory Stocks Coverage", 
                "Factory Electrical Installations Coverage"
            ]
            headers.extend(factory_headers)
            
            # Write headers
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=1, column=col, value=header)
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                cell.alignment = Alignment(horizontal="center", vertical="center")
            
            # Write data rows
            for row_idx, policy in enumerate(policies, 2):
                policy_id = policy['policy_id']
                
                # Basic policy data
                client_info = policy.get('clients', {})
                member_info = policy.get('members', {})
                
                # Calculate commission amount
                commission_amount = ''
                try:
                    net_premium = policy.get('net_premium')
                    commission_percentage = policy.get('commission_percentage')
                    if net_premium and commission_percentage:
                        commission_amount = float(net_premium) * float(commission_percentage) / 100
                        commission_amount = f"{commission_amount:.2f}"
                except (ValueError, TypeError):
                    commission_amount = ''
                
                row_data = [
                    policy.get('policy_id', ''),
                    client_info.get('name', '') if client_info else '',
                    member_info.get('member_name', '') if member_info else '',
                    policy.get('policy_number', ''),
                    policy.get('insurance_company', ''),
                    policy.get('product_name', ''),
                    policy.get('agent_name', ''),
                    self._convert_date_for_display(policy.get('policy_from')),
                    self._convert_date_for_display(policy.get('policy_to')),
                    self._convert_date_for_display(policy.get('payment_date')),
                    policy.get('business_type', ''),
                    policy.get('group_name', ''),
                    policy.get('subgroup_name', ''),
                    policy.get('remarks', ''),
                    policy.get('sum_insured', ''),
                    policy.get('net_premium', ''),
                    policy.get('addon_premium', ''),
                    policy.get('tp_tr_premium', ''),
                    policy.get('gst_percentage', ''),
                    policy.get('gross_premium', ''),
                    policy.get('commission_percentage', ''),
                    commission_amount,
                    'Yes' if policy.get('commission_received') else 'No',
                    'Yes' if policy.get('one_time_insurance') else 'No',
                    policy.get('payment_details', ''),
                    policy.get('file_path', ''),
                    policy.get('drive_file_id', ''),
                    policy.get('drive_path', ''),
                    policy.get('drive_url', ''),
                    self._convert_date_for_display(policy.get('last_reminder_sent')),
                    self._convert_date_for_display(policy.get('renewed_at')),
                    self._convert_date_for_display(policy.get('created_at')),
                    self._convert_date_for_display(policy.get('updated_at'))
                ]
                
                # Add health insurance data if applicable
                if max_health_members > 0:
                    if policy_id in health_details:
                        health_detail = health_details[policy_id]
                        row_data.extend([
                            health_detail.get('plan_type', ''),
                            health_detail.get('floater_sum_insured', ''),
                            health_detail.get('floater_bonus', ''),
                            health_detail.get('floater_deductible', '')
                        ])
                        
                        # Add member data
                        members = health_members.get(policy_id, [])
                        for i in range(max_health_members):
                            if i < len(members):
                                member = members[i]
                                row_data.extend([
                                    member.get('member_name', ''),
                                    member.get('sum_insured', ''),
                                    member.get('bonus', ''),
                                    member.get('deductible', '')
                                ])
                            else:
                                row_data.extend(['', '', '', ''])  # Empty cells for missing members
                    else:
                        # No health insurance for this policy
                        row_data.extend([''] * (4 + max_health_members * 4))
                
                # Add factory insurance data
                if policy_id in factory_details:
                    factory_detail = factory_details[policy_id]
                    row_data.extend([
                        factory_detail.get('building', ''),
                        factory_detail.get('plant_machinery', ''),
                        factory_detail.get('furniture_fittings', ''),
                        factory_detail.get('stocks', ''),
                        factory_detail.get('electrical_installations', '')
                    ])
                else:
                    row_data.extend(['', '', '', '', ''])  # Empty factory columns
                
                # Write row data
                for col, value in enumerate(row_data, 1):
                    ws.cell(row=row_idx, column=col, value=value)
            
            # Auto-adjust column widths
            for column in ws.columns:
                max_length = 0
                column_letter = get_column_letter(column[0].column)
                
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                
                adjusted_width = min(max_length + 2, 50)  # Cap at 50 characters
                ws.column_dimensions[column_letter].width = adjusted_width
            
            logger.info(f"Created financial year sheet '{financial_year}' with {len(policies)} policies")
            
        except Exception as e:
            logger.error(f"Error creating financial year sheet {financial_year}: {e}")
    
    def _create_claims_financial_year_sheet(self, workbook, financial_year, claims):
        """Create a claims sheet for a specific financial year"""
        try:
            ws = workbook.create_sheet(f"Claims {financial_year}")
            
            # Define claims headers
            headers = [
                "Claim ID", "Policy Number", "Client Name", "Member Name", "Claim Type", 
                "Claim Number", "Diagnosis", "Hospital Name", "Admission Date", "Discharge Date",
                "Claimed Amount", "Approved Amount", "Settled Amount", "Status", "Settlement Date",
                "UTR No", "Remarks", "Created At", "Updated At"
            ]
            
            # Write headers
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=1, column=col, value=header)
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                cell.alignment = Alignment(horizontal="center", vertical="center")
            
            # Write data rows
            for row_idx, claim in enumerate(claims, 2):
                policy_info = claim.get('policies', {})
                client_info = policy_info.get('clients', {}) if policy_info else {}
                
                row_data = [
                    claim.get('claim_id', ''),
                    policy_info.get('policy_number', '') if policy_info else '',
                    client_info.get('name', '') if client_info else '',
                    claim.get('member_name', ''),
                    claim.get('claim_type', ''),
                    claim.get('claim_number', ''),
                    claim.get('diagnosis', ''),
                    claim.get('hospital_name', ''),
                    self._convert_date_for_display(claim.get('admission_date')),
                    self._convert_date_for_display(claim.get('discharge_date')),
                    claim.get('claimed_amount', ''),
                    claim.get('approved_amount', ''),
                    claim.get('settled_amount', ''),
                    claim.get('status', ''),
                    self._convert_date_for_display(claim.get('settlement_date')),
                    claim.get('utr_no', ''),
                    claim.get('remarks', ''),
                    self._convert_date_for_display(claim.get('created_at')),
                    self._convert_date_for_display(claim.get('updated_at'))
                ]
                
                # Write row data
                for col, value in enumerate(row_data, 1):
                    ws.cell(row=row_idx, column=col, value=value)
            
            # Auto-adjust column widths
            for column in ws.columns:
                max_length = 0
                column_letter = get_column_letter(column[0].column)
                
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                
                adjusted_width = min(max_length + 2, 50)  # Cap at 50 characters
                ws.column_dimensions[column_letter].width = adjusted_width
            
            logger.info(f"Created claims financial year sheet 'Claims {financial_year}' with {len(claims)} claims")
            
        except Exception as e:
            logger.error(f"Error creating claims financial year sheet {financial_year}: {e}")
    
    def _create_clients_sheet(self, workbook):
        """Create clients summary sheet"""
        try:
            clients = self.supabase.table("clients").select("*").execute()
            df_clients = pd.DataFrame(clients.data)
            if not df_clients.empty:
                # Convert DataFrame to sheet
                ws = workbook.create_sheet("Clients")
                
                # Write headers
                for col, header in enumerate(df_clients.columns, 1):
                    cell = ws.cell(row=1, column=col, value=header)
                    cell.font = Font(bold=True, color="FFFFFF")
                    cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                
                # Write data
                for row_idx, (_, row) in enumerate(df_clients.iterrows(), 2):
                    for col_idx, value in enumerate(row, 1):
                        ws.cell(row=row_idx, column=col_idx, value=value)
        except Exception as e:
            logger.error(f"Error creating clients sheet: {e}")
    
    def _create_members_sheet(self, workbook):
        """Create members summary sheet"""
        try:
            members = self.supabase.table("members").select(
                "*, clients(name, phone, email)"
            ).execute()
            df_members = pd.DataFrame(members.data)
            if not df_members.empty:
                # Process client join data
                if 'clients' in df_members.columns:
                    client_df = pd.json_normalize(df_members['clients'])
                    client_df.columns = ['client_' + col for col in client_df.columns]
                    df_members = pd.concat([df_members.drop('clients', axis=1), client_df], axis=1)
                
                # Convert DataFrame to sheet
                ws = workbook.create_sheet("Members")
                
                # Write headers
                for col, header in enumerate(df_members.columns, 1):
                    cell = ws.cell(row=1, column=col, value=header)
                    cell.font = Font(bold=True, color="FFFFFF")
                    cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                
                # Write data
                for row_idx, (_, row) in enumerate(df_members.iterrows(), 2):
                    for col_idx, value in enumerate(row, 1):
                        ws.cell(row=row_idx, column=col_idx, value=value)
        except Exception as e:
            logger.error(f"Error creating members sheet: {e}")
    
    def _create_pending_policies_sheet(self, workbook):
        """Create pending policies summary sheet"""
        try:
            pending = self.supabase.table("pending_policies").select(
                "*, clients(name, phone, email), members(member_name)"
            ).execute()
            df_pending = pd.DataFrame(pending.data)
            if not df_pending.empty:
                # Process join data
                if 'clients' in df_pending.columns:
                    client_df = pd.json_normalize(df_pending['clients'])
                    client_df.columns = ['client_' + col for col in client_df.columns]
                    df_pending = pd.concat([df_pending.drop('clients', axis=1), client_df], axis=1)
                
                if 'members' in df_pending.columns:
                    member_df = pd.json_normalize(df_pending['members'])
                    member_df.columns = ['member_' + col for col in member_df.columns]
                    df_pending = pd.concat([df_pending.drop('members', axis=1), member_df], axis=1)
                
                # Convert DataFrame to sheet
                ws = workbook.create_sheet("Pending Policies")
                
                # Write headers
                for col, header in enumerate(df_pending.columns, 1):
                    cell = ws.cell(row=1, column=col, value=header)
                    cell.font = Font(bold=True, color="FFFFFF")
                    cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
                
                # Write data
                for row_idx, (_, row) in enumerate(df_pending.iterrows(), 2):
                    for col_idx, value in enumerate(row, 1):
                        ws.cell(row=row_idx, column=col_idx, value=value)
        except Exception as e:
            logger.error(f"Error creating pending policies sheet: {e}")

    def _create_policy_history_sheet(self, workbook):
        """Create policy history sheet"""
        try:
            policy_history = self.supabase.table("policy_history").select("*").execute()
            if not policy_history.data:
                logger.info("No policy history data found")
                return
                
            df_history = pd.DataFrame(policy_history.data)
            
            # Convert DataFrame to sheet
            ws = workbook.create_sheet("Policy History")
            
            # Define user-friendly column headers
            column_mapping = {
                'history_id': 'History ID',
                'original_policy_id': 'Original Policy ID',
                'client_id': 'Client ID',
                'member_id': 'Member ID',
                'insurance_company': 'Insurance Company',
                'product_name': 'Product Name',
                'policy_number': 'Policy Number',
                'one_time_insurance': 'One Time Insurance',
                'commission_received': 'Commission Received',
                'file_path': 'File Path',
                'drive_file_id': 'Drive File ID',
                'drive_path': 'Drive Path',
                'drive_url': 'Drive URL',
                'payment_date': 'Payment Date',
                'agent_name': 'Agent Name',
                'policy_from': 'Policy Start Date',
                'policy_to': 'Policy End Date',
                'payment_details': 'Payment Details',
                'net_premium': 'Net Premium',
                'addon_premium': 'Addon Premium',
                'tp_tr_premium': 'TP/TR Premium',
                'gst_percentage': 'GST %',
                'gross_premium': 'Gross Premium',
                'commission_percentage': 'Commission %',
                'commission_amount': 'Commission Amount',
                'business_type': 'Business Type',
                'group_name': 'Group Name',
                'subgroup_name': 'Subgroup Name',
                'remarks': 'Remarks',
                'sum_insured': 'Sum Insured',
                'last_reminder_sent': 'Last Reminder Sent',
                'renewed_at': 'Renewed At',
                'created_at': 'Created At',
                'archived_at': 'Archived At',
                'archived_reason': 'Archived Reason',
                'archived_by': 'Archived By'
            }
            
            # Write headers with user-friendly names
            headers = []
            for col in df_history.columns:
                headers.append(column_mapping.get(col, col))
            
            for col, header in enumerate(headers, 1):
                cell = ws.cell(row=1, column=col, value=header)
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
            
            # Write data with date formatting
            for row_idx, (_, row) in enumerate(df_history.iterrows(), 2):
                for col_idx, (col_name, value) in enumerate(row.items(), 1):
                    # Format dates for display
                    if col_name in ['payment_date', 'policy_from', 'policy_to', 'last_reminder_sent', 'renewed_at', 'created_at', 'archived_at']:
                        value = self._convert_date_for_display(value)
                    # Format boolean values
                    elif col_name in ['one_time_insurance', 'commission_received']:
                        value = 'Yes' if value else 'No'
                    
                    ws.cell(row=row_idx, column=col_idx, value=value)
            
            # Auto-adjust column widths
            for column in ws.columns:
                max_length = 0
                column_letter = get_column_letter(column[0].column)
                
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                
                adjusted_width = min(max_length + 2, 50)  # Cap at 50 characters
                ws.column_dimensions[column_letter].width = adjusted_width
            
            logger.info(f"Created policy history sheet with {len(df_history)} records")
            
        except Exception as e:
            logger.error(f"Error creating policy history sheet: {e}")

    def check_supabase_changes(self):
        """Check if Supabase data has changed"""
        try:
            clients = self.supabase.table("clients").select("*").execute()
            members = self.supabase.table("members").select("*").execute()
            policies = self.supabase.table("policies").select("*").execute()
            pending = self.supabase.table("pending_policies").select("*").execute()
            claims = self.supabase.table("claims").select("*").execute()
            policy_history = self.supabase.table("policy_history").select("*").execute()

            current_hashes = {
                'clients': self._get_data_hash(clients.data),
                'members': self._get_data_hash(members.data),
                'policies': self._get_data_hash(policies.data),
                'pending_policies': self._get_data_hash(pending.data),
                'claims': self._get_data_hash(claims.data),
                'policy_history': self._get_data_hash(policy_history.data)
            }

            changed = current_hashes != self.last_supabase_data

            if changed:
                changed_tables = [k for k in current_hashes if current_hashes[k] != self.last_supabase_data.get(k)]
                logger.info(f"[{datetime.now().strftime('%H:%M:%S')}] Supabase changes detected in: {', '.join(changed_tables)}")
                self.export_supabase_to_excel()

        except Exception as e:
            logger.error(f"Error checking Supabase: {e}")

    def start_realtime_sync(self, poll_interval=10):
        """Start real-time synchronization in background"""
        if self.is_syncing:
            logger.warning("Sync already running")
            return

        self.is_syncing = True
        self.stop_sync = False
        
        def sync_loop():
            logger.info(f"🔄 Real-time Excel sync started (polling every {poll_interval}s)")
            while not self.stop_sync:
                try:
                    self.check_supabase_changes()
                    time.sleep(poll_interval)
                except Exception as e:
                    logger.error(f"Sync loop error: {e}")
                    time.sleep(poll_interval)
            
            logger.info("🛑 Real-time Excel sync stopped")
            self.is_syncing = False

        self.sync_thread = threading.Thread(target=sync_loop, daemon=True)
        self.sync_thread.start()

    def stop_realtime_sync(self):
        """Stop real-time synchronization"""
        self.stop_sync = True
        if self.sync_thread:
            self.sync_thread.join(timeout=5)

    def get_drive_file_info(self):
        """Get Google Drive file information (shared drive compatible)"""
        if not self.drive_service or not self.drive_file_id:
            return None
            
        try:
            file_info = self.drive_service.files().get(
                fileId=self.drive_file_id,
                fields='id,name,modifiedTime,size,webViewLink,webContentLink',
                supportsAllDrives=True  # Essential for shared drives
            ).execute()
            
            return {
                'file_id': file_info.get('id'),
                'name': file_info.get('name'),
                'modified_time': file_info.get('modifiedTime'),
                'size': file_info.get('size'),
                'view_link': file_info.get('webViewLink'),
                'download_link': file_info.get('webContentLink')
            }
            
        except Exception as e:
            logger.error(f"Error getting shared drive file info: {e}")
            return None

    def get_shareable_link(self):
        """Get shareable Google Drive link"""
        file_info = self.get_drive_file_info()
        return file_info['view_link'] if file_info else None

    def manual_sync(self):
        """Manually trigger sync"""
        logger.info("Manual sync triggered")
        self.export_supabase_to_excel()


# Global instance
excel_sync = None

def initialize_excel_sync():
    """Initialize the global Excel sync service"""
    global excel_sync
    if excel_sync is None:
        try:
            excel_sync = RealtimeExcelSync()
            excel_sync.start_realtime_sync(poll_interval=30)  # Check every 30 seconds
            logger.info("Excel sync service initialized and started")
        except Exception as e:
            logger.error(f"Failed to initialize Excel sync: {e}")
            excel_sync = None
    return excel_sync

def get_excel_sync():
    """Get the Excel sync service instance"""
    return excel_sync



================================================
FILE: FINANCIAL_YEAR_EXCEL_SYSTEM.md
================================================
# Financial Year Excel System Implementation

## 🎯 Overview
Successfully modified the existing Excel sync system to organize policies by financial year sheets with integrated health and factory insurance details.

## ✅ Implementation Complete

### **1. Financial Year Logic**
- **Financial Year Definition**: April to March (e.g., 2025-26 = April 2025 to March 2026)
- **Year Determination**: Based on policy start dates (`policy_from` field)
- **Sheet Naming**: "2025-26", "2024-25", "2023-24", etc.
- **Smart Date Handling**: Supports multiple date formats from database

### **2. Excel File Structure**
```
insurance_data.xlsx
├── 2025-26 (Financial Year Sheet)
├── 2024-25 (Financial Year Sheet)  
├── 2023-24 (Financial Year Sheet)
├── Clients (Summary Sheet)
├── Members (Summary Sheet)
└── Pending Policies (Summary Sheet)
```

### **3. Financial Year Sheet Content**
Each financial year sheet contains **all policies starting in that financial year** with:

#### **Basic Policy Data (26 columns):**
- Policy ID, Client Name, Member Name, Policy Number
- Insurance Company, Product Type, Agent Name
- Policy Start Date, Policy End Date, Payment Date
- Business Type, Group, Subgroup, Remarks
- Sum Insured, Net Premium, Gross Premium, TP/TR Premium
- Commission %, Commission Received, One Time Insurance
- Payment Details, File Path, Drive URL
- Created At, Updated At

#### **Health Insurance Integration:**
- **Health Plan Type** (Floater/Individual)
- **Dynamic Member Columns** based on maximum members in that year:
  - Health Member 1 Name, Sum Insured, Bonus
  - Health Member 2 Name, Sum Insured, Bonus
  - (Additional columns as needed)

#### **Factory Insurance Integration:**
- Factory Building Coverage
- Factory Plant & Machinery Coverage
- Factory Furniture & Fittings Coverage
- Factory Stocks Coverage
- Factory Electrical Installations Coverage

### **4. Key Features Implemented**

#### **Financial Year Determination:**
```python
def _determine_financial_year(self, policy_from_date):
    # April to December → Current year to next year
    # January to March → Previous year to current year
    # Example: Policy starting May 2025 → "2025-26"
    # Example: Policy starting Feb 2026 → "2025-26"
```

#### **Comprehensive Data Integration:**
- **Single Query Optimization**: Fetches all policies with related data
- **Health Details**: Automatically includes plan type and member details
- **Factory Details**: Includes all coverage types
- **Dynamic Columns**: Adjusts based on actual data requirements

#### **Professional Formatting:**
- **Client-Friendly Headers**: Clear, readable column names
- **Blue Headers**: Professional styling with white text
- **Auto-Adjusted Widths**: Columns sized based on content
- **Date Formatting**: DD/MM/YYYY format for readability

### **5. System Integration**

#### **Maintains Existing Functionality:**
- ✅ **Real-time sync** with Supabase (30-second polling)
- ✅ **Google Drive integration** with automatic uploads
- ✅ **Change detection** triggers automatic updates
- ✅ **Background processing** doesn't block application
- ✅ **Error handling** and logging

#### **Enhanced Capabilities:**
- ✅ **Financial year organization** for better data management
- ✅ **Complete policy view** with all insurance types
- ✅ **Historical data separation** by financial year
- ✅ **Comprehensive data** for internal analysis

### **6. Data Flow**

```mermaid
graph TD
    A[Supabase Change Detected] --> B[Fetch All Policies]
    B --> C[Get Health Insurance Details]
    B --> D[Get Factory Insurance Details]
    C --> E[Group by Financial Year]
    D --> E
    E --> F[Create Year-Based Sheets]
    F --> G[Add Summary Sheets]
    G --> H[Format & Upload to Drive]
```

### **7. Example Sheet Structure**

**Sheet: "2025-26"**
| Policy ID | Client Name | Product Type | Policy End Date | Health Plan Type | Health Member 1 Name | Factory Building Coverage | ... |
|-----------|-------------|--------------|-----------------|------------------|---------------------|---------------------------|-----|
| POL001    | John Doe    | HEALTH       | 15/05/2025      | FLOATER          | John Doe            |                           | ... |
| POL002    | ABC Corp    | FACTORY      | 30/06/2025      |                  |                     | 1000000                   | ... |

### **8. Benefits**

#### **For Business Management:**
- **Year-wise Analysis**: Easy financial year comparisons
- **Policy Tracking**: Clear start date organization
- **Complete View**: All policy types in one comprehensive sheet
- **Historical Data**: Separate sheets maintain data integrity

#### **For Operational Efficiency:**
- **Automatic Updates**: Real-time sync maintains accuracy
- **Professional Format**: Ready for business analysis
- **Comprehensive Data**: All details in one place
- **Easy Navigation**: Organized by financial year tabs

### **9. Technical Implementation**

#### **Core Functions Added:**
- `_determine_financial_year()` - Financial year calculation
- `_get_policies_with_insurance_details()` - Comprehensive data fetching
- `_create_financial_year_sheet()` - Year-specific sheet creation
- `_convert_date_for_display()` - Date formatting

#### **Database Queries Optimized:**
- Single policy fetch with joins
- Batch health insurance detail retrieval
- Batch factory insurance detail retrieval
- Efficient data grouping and processing

#### **Excel Generation Enhanced:**
- Dynamic column creation based on data
- Professional formatting and styling
- Auto-width adjustment for readability
- Comprehensive error handling

### **10. Usage**

#### **Automatic Operation:**
- System runs automatically in background
- Updates every 30 seconds when changes detected
- Uploads to Google Drive automatically
- Maintains real-time accuracy

#### **Manual Trigger:**
- Can be manually triggered via Excel dashboard
- Immediate update when needed
- Full regeneration of all sheets

### **11. File Location & Access**
- **Local File**: `insurance_data.xlsx` in application directory
- **Google Drive**: Automatically synced to shared drive
- **Access**: Available via Excel dashboard in application
- **Sharing**: Google Drive link for external access

## 🎉 Ready to Use!

The financial year Excel system is now fully implemented and operational. Your Excel file will automatically organize policies by financial year with complete health and factory insurance details integrated into each sheet.

**Key Benefits:**
- ✅ **Organized by Financial Year** (April to March)
- ✅ **Complete Policy Data** with health and factory details
- ✅ **Client-Friendly Names** but comprehensive internal data
- ✅ **Real-time Updates** maintain accuracy
- ✅ **Professional Formatting** ready for analysis
- ✅ **Maintains Existing Functionality** while adding new features

The system will create sheets like "2025-26", "2024-25" etc., based on policy start dates, with each sheet containing all relevant policies and their complete insurance details for that financial year!



================================================
FILE: floater_health_insurance_migration.sql
================================================
-- Migration to add floater-specific fields to health insurance tables
-- Run this SQL script in your Supabase SQL editor

-- Add floater_sum_insured and floater_bonus columns to health_insurance_details table
ALTER TABLE public.health_insurance_details 
ADD COLUMN IF NOT EXISTS floater_sum_insured NUMERIC(12,2) NULL,
ADD COLUMN IF NOT EXISTS floater_bonus NUMERIC(12,2) NULL;

-- Add floater_sum_insured and floater_bonus columns to pending_health_insurance_details table  
ALTER TABLE public.pending_health_insurance_details 
ADD COLUMN IF NOT EXISTS floater_sum_insured NUMERIC(12,2) NULL,
ADD COLUMN IF NOT EXISTS floater_bonus NUMERIC(12,2) NULL;

-- Add comments to document the new columns
COMMENT ON COLUMN public.health_insurance_details.floater_sum_insured IS 'Sum insured amount for floater health insurance plans (shared across all members)';
COMMENT ON COLUMN public.health_insurance_details.floater_bonus IS 'Bonus amount for floater health insurance plans (shared across all members)';
COMMENT ON COLUMN public.pending_health_insurance_details.floater_sum_insured IS 'Sum insured amount for floater health insurance plans (shared across all members)';
COMMENT ON COLUMN public.pending_health_insurance_details.floater_bonus IS 'Bonus amount for floater health insurance plans (shared across all members)';

-- Create indexes for better query performance (optional)
CREATE INDEX IF NOT EXISTS idx_health_insurance_details_floater_sum_insured ON public.health_insurance_details (floater_sum_insured);
CREATE INDEX IF NOT EXISTS idx_health_insurance_details_floater_bonus ON public.health_insurance_details (floater_bonus);
CREATE INDEX IF NOT EXISTS idx_pending_health_insurance_details_floater_sum_insured ON public.pending_health_insurance_details (floater_sum_insured);
CREATE INDEX IF NOT EXISTS idx_pending_health_insurance_details_floater_bonus ON public.pending_health_insurance_details (floater_bonus);

-- Verify the changes
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name IN ('health_insurance_details', 'pending_health_insurance_details') 
AND column_name IN ('floater_sum_insured', 'floater_bonus')
ORDER BY table_name, column_name;



================================================
FILE: gunicorn_config.py
================================================
"""
Gunicorn Configuration for Multi-User Production Deployment
Optimized for handling concurrent users with proper worker management
"""
import os
import multiprocessing

# Server socket
bind = f"0.0.0.0:{os.getenv('PORT', '5050')}"
backlog = 2048

# Worker processes
workers = multiprocessing.cpu_count() * 2 + 1  # Recommended formula
worker_class = "gevent"  # Async worker for better concurrency
worker_connections = 1000
max_requests = 1000  # Restart workers after handling this many requests
max_requests_jitter = 100  # Add randomness to prevent thundering herd

# Timeout settings
timeout = 120  # Worker timeout in seconds
keepalive = 5  # Keep-alive connections
graceful_timeout = 30

# Logging
accesslog = "logs/access.log"
errorlog = "logs/error.log"
loglevel = "info"
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Process naming
proc_name = "insurance_portal"

# Server mechanics
daemon = False
pidfile = "logs/gunicorn.pid"
user = None
group = None
tmp_upload_dir = None

# SSL (if needed)
keyfile = None
certfile = None

# Application
wsgi_module = "wsgi:application"

# Worker process management
preload_app = True  # Load application code before forking workers
enable_stdio_inheritance = True

# Memory management
max_worker_memory = 200 * 1024 * 1024  # 200MB per worker

def when_ready(server):
    """Called just after the server is started"""
    server.log.info("Insurance Portal server is ready. Accepting connections.")

def worker_int(worker):
    """Called when a worker receives the INT or QUIT signal"""
    worker.log.info("Worker received INT or QUIT signal")

def pre_fork(server, worker):
    """Called just before a worker is forked"""
    server.log.info(f"Worker {worker.pid} is being forked")

def post_fork(server, worker):
    """Called just after a worker has been forked"""
    server.log.info(f"Worker {worker.pid} has been forked")
    
    # Initialize worker-specific resources here
    from database_pool import check_database_health
    try:
        db_healthy, db_message = check_database_health()
        if db_healthy:
            worker.log.info(f"Worker {worker.pid} database connection verified")
        else:
            worker.log.error(f"Worker {worker.pid} database connection failed: {db_message}")
    except Exception as e:
        worker.log.error(f"Worker {worker.pid} database check error: {e}")

def worker_abort(worker):
    """Called when a worker receives the SIGABRT signal"""
    worker.log.info(f"Worker {worker.pid} received SIGABRT signal")

def pre_exec(server):
    """Called just before a new master process is forked"""
    server.log.info("Forked child, re-executing.")

def pre_request(worker, req):
    """Called just before a worker processes the request"""
    worker.log.debug(f"Worker {worker.pid} processing {req.method} {req.path}")

def post_request(worker, req, environ, resp):
    """Called after a worker processes the request"""
    # Log slow requests
    if hasattr(req, 'start_time'):
        duration = time.time() - req.start_time
        if duration > 5:  # Log requests taking more than 5 seconds
            worker.log.warning(f"Slow request: {req.method} {req.path} took {duration:.2f}s")

# Environment variables for workers
raw_env = [
    f"FLASK_ENV=production",
    f"PYTHONPATH={os.getcwd()}",
]

# Security
limit_request_line = 4094
limit_request_fields = 100
limit_request_field_size = 8190



================================================
FILE: health_topup_migration.sql
================================================
-- Migration to add health topup support with deductible functionality
-- Run this SQL script in your Supabase SQL editor

-- 1. Add deductible column to health_insured_members table
ALTER TABLE public.health_insured_members 
ADD COLUMN IF NOT EXISTS deductible NUMERIC(12,2) NULL;

-- 2. Add deductible column to pending_health_insured_members table
ALTER TABLE public.pending_health_insured_members 
ADD COLUMN IF NOT EXISTS deductible NUMERIC(12,2) NULL;

-- 3. Add floater_deductible columns to health_insurance_details table
ALTER TABLE public.health_insurance_details 
ADD COLUMN IF NOT EXISTS floater_deductible NUMERIC(12,2) NULL;

-- 4. Add floater_deductible columns to pending_health_insurance_details table
ALTER TABLE public.pending_health_insurance_details 
ADD COLUMN IF NOT EXISTS floater_deductible NUMERIC(12,2) NULL;

-- 5. Update plan_type constraints to include TOPUP options
ALTER TABLE public.health_insurance_details 
DROP CONSTRAINT IF EXISTS health_insurance_details_plan_type_check;

ALTER TABLE public.health_insurance_details 
ADD CONSTRAINT health_insurance_details_plan_type_check 
CHECK (plan_type = ANY (ARRAY['FLOATER'::text, 'INDIVIDUAL'::text, 'TOPUP_FLOATER'::text, 'TOPUP_INDIVIDUAL'::text]));

ALTER TABLE public.pending_health_insurance_details 
DROP CONSTRAINT IF EXISTS pending_health_insurance_details_plan_type_check;

ALTER TABLE public.pending_health_insurance_details 
ADD CONSTRAINT pending_health_insurance_details_plan_type_check 
CHECK (plan_type = ANY (ARRAY['FLOATER'::text, 'INDIVIDUAL'::text, 'TOPUP_FLOATER'::text, 'TOPUP_INDIVIDUAL'::text]));

-- 6. Add comments to document the new columns
COMMENT ON COLUMN public.health_insured_members.deductible IS 'Deductible amount for individual health insurance/topup plans';
COMMENT ON COLUMN public.pending_health_insured_members.deductible IS 'Deductible amount for individual health insurance/topup plans';
COMMENT ON COLUMN public.health_insurance_details.floater_deductible IS 'Deductible amount for floater health insurance/topup plans (shared across all members)';
COMMENT ON COLUMN public.pending_health_insurance_details.floater_deductible IS 'Deductible amount for floater health insurance/topup plans (shared across all members)';

-- 7. Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_health_insured_members_deductible ON public.health_insured_members (deductible);
CREATE INDEX IF NOT EXISTS idx_pending_health_insured_members_deductible ON public.pending_health_insured_members (deductible);
CREATE INDEX IF NOT EXISTS idx_health_insurance_details_floater_deductible ON public.health_insurance_details (floater_deductible);
CREATE INDEX IF NOT EXISTS idx_pending_health_insurance_details_floater_deductible ON public.pending_health_insurance_details (floater_deductible);

-- 8. Verify the changes
SELECT 
    table_name, 
    column_name, 
    data_type, 
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name IN ('health_insurance_details', 'pending_health_insurance_details', 'health_insured_members', 'pending_health_insured_members') 
AND column_name IN ('deductible', 'floater_deductible')
ORDER BY table_name, column_name;

-- 9. Check updated constraints
SELECT 
    tc.table_name, 
    tc.constraint_name, 
    cc.check_clause
FROM information_schema.table_constraints tc
JOIN information_schema.check_constraints cc ON tc.constraint_name = cc.constraint_name
WHERE tc.table_name IN ('health_insurance_details', 'pending_health_insurance_details')
AND tc.constraint_type = 'CHECK'
AND cc.check_clause LIKE '%plan_type%';



================================================
FILE: IMPLEMENTATION_SUMMARY.md
================================================
# Insurance Policy Enhancement Implementation Summary

## Overview
Successfully implemented dynamic product dropdown with conditional fields for Health and Factory insurance types, along with local product name caching and enhanced database schema support.

## ✅ Completed Features

### 1. **Local Product Name Management**
- **File**: `static/product_manager.js`
- **Features**:
  - Local storage for product names (no database storage)
  - Default products: HEALTH, MOTOR, FACTORY, LIFE, TRAVEL INSURANCE
  - Dynamic dropdown with "Add New" option
  - Smart detection of HEALTH and FACTORY products for conditional fields

### 2. **Enhanced Add Policy Form**
- **File**: `templates/add_policy.html`
- **New Features**:
  - Dynamic product dropdown with local caching
  - Conditional Health Insurance section with:
    - Plan type selection (Floater/Individual)
    - Dynamic member management (Add/Remove)
    - Individual sum insured and bonus per member
  - Conditional Factory Insurance section with:
    - Building coverage
    - Plant & Machinery coverage
    - Furniture, Fittings & Fixtures coverage
    - Stocks coverage
    - Electrical Installations coverage
  - Added general Sum Insured field
  - Added TP/TR Premium field

### 3. **Enhanced Add Pending Policy Form**
- **File**: `templates/add_pending_policy.html`
- **Features**: Same as Add Policy form but for pending policies

### 4. **Backend Policy Processing**
- **File**: `routes/policies.py`
- **Enhancements**:
  - Handles health insurance details (plan type + members)
  - Handles factory insurance details (all coverage types)
  - Processes sum_insured and tp_tr_premium fields
  - Automatic database insertion for related tables
  - Error handling for additional insurance details

### 5. **Backend Pending Policy Processing**
- **File**: `routes/pending_policies.py`
- **Enhancements**:
  - Handles health insurance details for pending policies
  - Handles factory insurance details for pending policies
  - Transfers details when converting pending to active policy
  - Proper cleanup of related records when completing/deleting

### 6. **Database Schema Support**
- **File**: `add_sum_insured_migration.sql`
- **Changes**:
  - Added `sum_insured` column to `policies` table
  - Added `sum_insured` column to `pending_policies` table
  - Added indexes for better performance
  - Added documentation comments

## 🎯 Key Features Implemented

### Health Insurance Handling
1. **Plan Types**: Floater and Individual plans
2. **Member Management**: 
   - Dynamic add/remove members
   - Individual sum insured per member
   - Individual bonus per member
3. **Database Storage**:
   - `health_insurance_details` table for plan type
   - `health_insured_members` table for member details
   - `pending_health_insurance_details` and `pending_health_insured_members` for pending policies

### Factory Insurance Handling
1. **Coverage Types**:
   - Building
   - Plant & Machinery (P&M)
   - Furniture, Fittings & Fixtures (FFF)
   - Stocks
   - Electrical Installations (E.I.)
2. **Database Storage**:
   - `factory_insurance_details` table for active policies
   - `pending_factory_insurance_details` table for pending policies

### Product Name Management
1. **Local Storage**: Product names stored locally on PC
2. **Dynamic Dropdown**: Shows existing + "Add New" option
3. **Smart Detection**: Automatically shows conditional fields based on product type
4. **No Database Impact**: Product names don't clutter the database

## 📋 Database Schema Requirements

Before using the new features, run this SQL in your Supabase SQL editor:

```sql
-- Add sum_insured columns
ALTER TABLE public.policies ADD COLUMN IF NOT EXISTS sum_insured NUMERIC(12,2) NULL;
ALTER TABLE public.pending_policies ADD COLUMN IF NOT EXISTS sum_insured NUMERIC(12,2) NULL;
```

Your existing schema already includes all the health and factory insurance tables, so no additional changes are needed.

## 🚀 How It Works

### For Users:
1. **Product Selection**: Choose from dropdown or add new product type
2. **Conditional Fields**: 
   - Select "HEALTH INSURANCE" → Health section appears
   - Select "FACTORY INSURANCE" → Factory section appears
   - Other products → Only general sum insured field
3. **Health Insurance**:
   - Choose Floater or Individual plan
   - Add multiple members with individual details
4. **Factory Insurance**:
   - Fill in coverage amounts for different categories

### For Developers:
1. **Product Detection**: JavaScript checks if product name contains "HEALTH" or "FACTORY"
2. **Form Validation**: Required fields are enforced based on product type
3. **Backend Processing**: Python routes handle the additional data appropriately
4. **Database Storage**: Related tables are populated automatically

## 🔧 Technical Implementation

### Frontend (JavaScript):
- `ProductManager` class handles local storage
- Dynamic form sections show/hide based on product selection
- Member management with add/remove functionality

### Backend (Python):
- Form data extraction for health/factory specific fields
- Database insertion with proper error handling
- Transfer logic for pending → active policy conversion

### Database:
- Proper foreign key relationships
- Cascade deletes for data integrity
- Indexed fields for performance

## ✨ Benefits

1. **User Experience**: Intuitive conditional forms based on insurance type
2. **Data Integrity**: Proper relational database structure
3. **Performance**: Local product caching, no unnecessary database calls
4. **Flexibility**: Easy to add new product types and conditional fields
5. **Maintainability**: Clean separation of concerns

## 🎉 Ready to Use!

All changes have been implemented and are ready for testing. The system now supports:
- ✅ Dynamic product dropdowns with local caching
- ✅ Health insurance with floater/individual plans and member details
- ✅ Factory insurance with detailed coverage breakdown
- ✅ Enhanced database schema with sum_insured fields
- ✅ Seamless pending → active policy conversion
- ✅ Proper data validation and error handling

Test the new features by adding a health or factory insurance policy and see the conditional fields in action!



================================================
FILE: insurance_data.xlsx
================================================
[Binary file]


================================================
FILE: integration_example.py
================================================
"""
Integration Example: Multi-User Operations
Demonstrates how to use all scaling components together
"""
import asyncio
import logging
from datetime import datetime
from typing import List, Dict
import time

# Import all scaling components
from database_pool import execute_query, batch_insert, DatabaseTransaction
from cache_manager import cache_manager, rate_limiter, session_manager
from task_queue import (
    send_whatsapp_async, send_email_async, send_batch_whatsapp_async, 
    send_batch_email_async, task_queue
)
from batch_file_operations import batch_file_manager, upload_multiple_policy_files
from whatsapp_bot_async import whatsapp_bot_async
from monitoring import metrics_collector

logger = logging.getLogger(__name__)

class MultiUserInsurancePortal:
    """
    Example integration of all multi-user scaling components
    Demonstrates real-world usage patterns
    """
    
    def __init__(self):
        self.active_sessions = {}
        
    def handle_bulk_policy_issuance(self, policies_data: List[Dict]) -> Dict:
        """
        Handle bulk policy issuance with all scaling features
        
        Example of processing multiple policies simultaneously:
        - Database operations with connection pooling
        - File uploads with batch processing
        - Notifications with async messaging
        - Caching for performance
        """
        logger.info(f"Processing bulk policy issuance for {len(policies_data)} policies")
        
        try:
            # Step 1: Validate and cache client data
            client_cache_tasks = []
            for policy_data in policies_data:
                client_phone = policy_data.get('client_phone')
                if client_phone:
                    # Check cache first
                    cached_client = cache_manager.get(f"client:{client_phone}", value_type='json')
                    if not cached_client:
                        # Load from database and cache
                        client_result = execute_query(
                            'clients', 'select', 
                            columns='*', 
                            filters={'phone_eq': client_phone}
                        )
                        if client_result.data:
                            cache_manager.set(f"client:{client_phone}", client_result.data[0], ttl=1800)
            
            # Step 2: Batch insert policies with transaction
            with DatabaseTransaction() as transaction:
                # Prepare policy records
                policy_records = []
                for policy_data in policies_data:
                    policy_record = {
                        'client_id': policy_data['client_id'],
                        'member_id': policy_data['member_id'],
                        'insurance_company': policy_data['insurance_company'],
                        'product_name': policy_data['product_name'],
                        'policy_number': policy_data['policy_number'],
                        'policy_from': policy_data['policy_from'],
                        'policy_to': policy_data['policy_to'],
                        'sum_insured': policy_data['sum_insured'],
                        'net_premium': policy_data['net_premium'],
                        'created_at': datetime.now().isoformat()
                    }
                    policy_records.append(policy_record)
                
                # Batch insert policies
                inserted_policies = batch_insert('policies', policy_records, batch_size=50)
                
                if not inserted_policies:
                    raise Exception("Failed to insert policies")
            
            # Step 3: Batch file uploads (if files provided)
            file_upload_batch_id = None
            if any('policy_file' in policy for policy in policies_data):
                upload_requests = []
                for i, policy_data in enumerate(policies_data):
                    if 'policy_file' in policy_data:
                        upload_requests.append({
                            'file': policy_data['policy_file'],
                            'filename': f"{policy_data['insurance_company']}_{policy_data['product_name']}.pdf",
                            'client_id': policy_data['client_id'],
                            'member_name': policy_data['member_name'],
                            'policy_id': inserted_policies[i]['policy_id'] if i < len(inserted_policies) else None,
                            'parent_folder_id': 'your_root_folder_id'
                        })
                
                if upload_requests:
                    file_upload_batch_id = upload_multiple_policy_files(
                        upload_requests, 
                        callback=self._file_upload_callback
                    )
            
            # Step 4: Send notifications asynchronously
            notification_tasks = []
            
            # Prepare WhatsApp notifications
            whatsapp_messages = []
            email_notifications = []
            
            for policy_data in policies_data:
                client_phone = policy_data.get('client_phone')
                client_email = policy_data.get('client_email')
                client_name = policy_data.get('client_name', 'Customer')
                
                if client_phone:
                    message = f"""🎉 *Policy Issued Successfully!*

Dear {client_name},

Your new insurance policy has been issued:

📋 *Policy Details:*
• Insurance: {policy_data['product_name']}
• Company: {policy_data['insurance_company']}
• Policy Number: {policy_data['policy_number']}
• Sum Insured: ₹{policy_data['sum_insured']}

Your policy document will be sent separately.

Thank you for choosing our services! 🙏"""
                    
                    whatsapp_messages.append({
                        'phone': client_phone,
                        'message': message
                    })
                
                if client_email:
                    email_notifications.append({
                        'email': client_email,
                        'subject': f"Policy Issued - {policy_data['product_name']}",
                        'body': f"""Dear {client_name},

Congratulations! Your insurance policy has been successfully issued.

Policy Details:
- Insurance Type: {policy_data['product_name']}
- Insurance Company: {policy_data['insurance_company']}
- Policy Number: {policy_data['policy_number']}
- Sum Insured: ₹{policy_data['sum_insured']}
- Premium: ₹{policy_data['net_premium']}

Your policy document is attached to this email.

Thank you for choosing our services.

Best regards,
Insta Insurance Consultancy""",
                        'customer_name': client_name
                    })
            
            # Send batch notifications
            whatsapp_task_id = None
            email_task_id = None
            
            if whatsapp_messages:
                whatsapp_task_id = send_batch_whatsapp_async(
                    whatsapp_messages, 
                    priority=1,
                    callback=self._notification_callback
                )
            
            if email_notifications:
                email_task_id = send_batch_email_async(
                    email_notifications,
                    priority=1,
                    callback=self._notification_callback
                )
            
            # Step 5: Update metrics and cache
            metrics_collector.increment_counter('bulk_policies_processed', len(policies_data))
            metrics_collector.record_user_activity(
                'system',
                'bulk_policy_issuance',
                {'policies_count': len(policies_data)}
            )
            
            # Cache policy counts for quick dashboard access
            total_policies_today = cache_manager.get('policies_today_count', 0, 'int')
            cache_manager.set('policies_today_count', total_policies_today + len(policies_data), ttl=86400)
            
            return {
                'success': True,
                'policies_processed': len(policies_data),
                'inserted_policies': len(inserted_policies),
                'file_upload_batch_id': file_upload_batch_id,
                'whatsapp_task_id': whatsapp_task_id,
                'email_task_id': email_task_id,
                'message': f'Successfully processed {len(policies_data)} policies'
            }
            
        except Exception as e:
            logger.error(f"Bulk policy issuance failed: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': 'Bulk policy issuance failed'
            }
    
    def handle_bulk_renewal_reminders(self, renewal_data: List[Dict]) -> Dict:
        """
        Handle bulk renewal reminders with rate limiting and caching
        """
        logger.info(f"Processing bulk renewal reminders for {len(renewal_data)} policies")
        
        try:
            # Step 1: Check rate limits
            if rate_limiter.is_rate_limited('bulk_reminders', 100, 3600):  # Max 100 per hour
                return {
                    'success': False,
                    'error': 'Rate limit exceeded for bulk reminders',
                    'message': 'Please wait before sending more reminders'
                }
            
            # Step 2: Filter policies that haven't been reminded recently
            filtered_renewals = []
            for renewal in renewal_data:
                policy_id = renewal.get('policy_id')
                last_reminder_key = f"last_reminder:{policy_id}"
                
                last_reminder = cache_manager.get(last_reminder_key, value_type='int')
                current_time = int(time.time())
                
                # Only send reminder if last one was more than 24 hours ago
                if not last_reminder or (current_time - last_reminder) > 86400:
                    filtered_renewals.append(renewal)
                    cache_manager.set(last_reminder_key, current_time, ttl=86400)
            
            if not filtered_renewals:
                return {
                    'success': True,
                    'reminders_sent': 0,
                    'message': 'No policies eligible for reminders'
                }
            
            # Step 3: Use async WhatsApp bot for bulk reminders
            task_id = whatsapp_bot_async.send_bulk_reminders_async(filtered_renewals)
            
            # Step 4: Update database with reminder timestamps
            for renewal in filtered_renewals:
                execute_query(
                    'policies',
                    'update',
                    data={'last_reminder_sent': datetime.now().isoformat()},
                    filters={'policy_id': renewal['policy_id']}
                )
            
            # Step 5: Update metrics
            metrics_collector.increment_counter('bulk_reminders_sent', len(filtered_renewals))
            
            return {
                'success': True,
                'reminders_sent': len(filtered_renewals),
                'task_id': task_id,
                'message': f'Sent reminders for {len(filtered_renewals)} policies'
            }
            
        except Exception as e:
            logger.error(f"Bulk renewal reminders failed: {e}")
            return {
                'success': False,
                'error': str(e),
                'message': 'Bulk renewal reminders failed'
            }
    
    def handle_concurrent_user_requests(self, user_requests: List[Dict]) -> Dict:
        """
        Handle multiple user requests concurrently
        Demonstrates session management and concurrent processing
        """
        logger.info(f"Processing {len(user_requests)} concurrent user requests")
        
        results = []
        
        for request in user_requests:
            user_id = request.get('user_id')
            request_type = request.get('type')
            
            try:
                # Step 1: Manage user session
                session_data = session_manager.get_session(user_id)
                if not session_data:
                    # Create new session
                    session_manager.create_session(
                        user_id,
                        {'user_id': user_id, 'login_time': datetime.now().isoformat()}
                    )
                else:
                    # Extend existing session
                    session_manager.extend_session(user_id)
                
                # Step 2: Process request based on type
                if request_type == 'get_policies':
                    result = self._handle_get_policies_request(user_id, request)
                elif request_type == 'send_whatsapp':
                    result = self._handle_whatsapp_request(user_id, request)
                elif request_type == 'upload_file':
                    result = self._handle_file_upload_request(user_id, request)
                else:
                    result = {'success': False, 'error': f'Unknown request type: {request_type}'}
                
                results.append({
                    'user_id': user_id,
                    'request_type': request_type,
                    **result
                })
                
                # Record user activity
                metrics_collector.record_user_activity(
                    user_id, 
                    request_type, 
                    {'success': result.get('success', False)}
                )
                
            except Exception as e:
                logger.error(f"Request failed for user {user_id}: {e}")
                results.append({
                    'user_id': user_id,
                    'request_type': request_type,
                    'success': False,
                    'error': str(e)
                })
        
        successful_requests = sum(1 for r in results if r.get('success'))
        
        return {
            'total_requests': len(user_requests),
            'successful_requests': successful_requests,
            'failed_requests': len(user_requests) - successful_requests,
            'results': results
        }
    
    def _handle_get_policies_request(self, user_id: str, request: Dict) -> Dict:
        """Handle get policies request with caching"""
        try:
            # Check cache first
            cache_key = f"user_policies:{user_id}"
            cached_policies = cache_manager.get(cache_key, value_type='json')
            
            if cached_policies:
                return {
                    'success': True,
                    'policies': cached_policies,
                    'source': 'cache'
                }
            
            # Load from database
            policies_result = execute_query(
                'policies',
                'select',
                columns='*',
                filters={'client_id_eq': request.get('client_id')}
            )
            
            policies = policies_result.data if policies_result.data else []
            
            # Cache for future requests
            cache_manager.set(cache_key, policies, ttl=600)  # 10 minutes
            
            return {
                'success': True,
                'policies': policies,
                'source': 'database'
            }
            
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def _handle_whatsapp_request(self, user_id: str, request: Dict) -> Dict:
        """Handle WhatsApp message request"""
        try:
            phone = request.get('phone')
            message = request.get('message')
            
            if not phone or not message:
                return {'success': False, 'error': 'Phone and message required'}
            
            # Send asynchronously
            task_id = send_whatsapp_async(phone, message, priority=2)
            
            return {
                'success': True,
                'task_id': task_id,
                'message': 'WhatsApp message queued'
            }
            
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def _handle_file_upload_request(self, user_id: str, request: Dict) -> Dict:
        """Handle file upload request"""
        try:
            file_data = request.get('file')
            client_id = request.get('client_id')
            member_name = request.get('member_name')
            
            if not all([file_data, client_id, member_name]):
                return {'success': False, 'error': 'File, client_id, and member_name required'}
            
            # Use batch file manager for single file
            upload_requests = [{
                'file': file_data,
                'filename': request.get('filename', 'uploaded_file.pdf'),
                'client_id': client_id,
                'member_name': member_name,
                'policy_id': request.get('policy_id'),
                'parent_folder_id': 'your_root_folder_id'
            }]
            
            batch_id = upload_multiple_policy_files(upload_requests)
            
            return {
                'success': True,
                'batch_id': batch_id,
                'message': 'File upload queued'
            }
            
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def _file_upload_callback(self, batch_id: str, success: bool, results):
        """Callback for file upload completion"""
        if success:
            logger.info(f"File upload batch {batch_id} completed successfully")
            metrics_collector.increment_counter('file_uploads_completed')
        else:
            logger.error(f"File upload batch {batch_id} failed")
            metrics_collector.increment_counter('file_uploads_failed')
    
    def _notification_callback(self, task, success: bool, error: str = None):
        """Callback for notification completion"""
        if success:
            logger.info(f"Notification task {task.task_id} completed successfully")
            metrics_collector.increment_counter('notifications_sent')
        else:
            logger.error(f"Notification task {task.task_id} failed: {error}")
            metrics_collector.increment_counter('notifications_failed')
    
    def get_system_health(self) -> Dict:
        """Get comprehensive system health status"""
        return {
            'database': {
                'pool_size': 15,  # From database_pool configuration
                'active_connections': 'Available via health check'
            },
            'cache': {
                'type': 'Redis' if hasattr(cache_manager, 'redis_client') and cache_manager.redis_client else 'Memory',
                'status': 'Available via health check'
            },
            'task_queue': task_queue.get_queue_stats(),
            'file_manager': batch_file_manager.get_stats(),
            'metrics': {
                'performance': metrics_collector.get_performance_summary(60),
                'user_activity': metrics_collector.get_user_activity_summary(24),
                'alerts': metrics_collector.get_alerts()
            }
        }

# Example usage
def example_usage():
    """Example of how to use the multi-user portal"""
    
    portal = MultiUserInsurancePortal()
    
    # Example 1: Bulk policy issuance
    policies_data = [
        {
            'client_id': 'C001',
            'member_id': 'M001',
            'client_phone': '+919876543210',
            'client_email': 'customer1@example.com',
            'client_name': 'John Doe',
            'insurance_company': 'HDFC ERGO',
            'product_name': 'Health Insurance',
            'policy_number': 'POL001',
            'policy_from': '2024-01-01',
            'policy_to': '2025-01-01',
            'sum_insured': '500000',
            'net_premium': '15000',
            'member_name': 'John Doe'
        },
        # Add more policies...
    ]
    
    result = portal.handle_bulk_policy_issuance(policies_data)
    print(f"Bulk policy issuance result: {result}")
    
    # Example 2: Concurrent user requests
    user_requests = [
        {
            'user_id': 'user1',
            'type': 'get_policies',
            'client_id': 'C001'
        },
        {
            'user_id': 'user2',
            'type': 'send_whatsapp',
            'phone': '+919876543210',
            'message': 'Hello from insurance portal!'
        }
    ]
    
    result = portal.handle_concurrent_user_requests(user_requests)
    print(f"Concurrent requests result: {result}")
    
    # Example 3: System health check
    health = portal.get_system_health()
    print(f"System health: {health}")

if __name__ == "__main__":
    example_usage()



================================================
FILE: make_admin.py
================================================
#!/usr/bin/env python3
"""
Script to make a user admin in the database.
Usage: python make_admin.py <email>
"""

import sys
import os
from supabase import create_client

# Add the current directory to Python path to import config
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from dynamic_config import Config
except ImportError:
    # Fallback to regular config if dynamic_config doesn't exist
    from config import Config

def make_user_admin(email):
    """Make a user admin by updating their role in the database"""
    print(f"🔧 Making user {email} an admin...")
    
    # Initialize Supabase client
    supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
    
    try:
        # Check if user exists
        result = supabase.table('users').select('*').eq('email', email).execute()
        
        if not result.data:
            print(f"❌ User {email} not found in database")
            return False
        
        user = result.data[0]
        print(f"📋 Current user details:")
        print(f"   Email: {user.get('email')}")
        print(f"   Name: {user.get('name')}")
        print(f"   Current Role: {user.get('role', 'member')}")
        
        # Update user role to admin
        update_result = supabase.table('users').update({
            'role': 'admin'
        }).eq('email', email).execute()
        
        if update_result.data:
            print(f"✅ Successfully made {email} an admin!")
            print("🎉 User can now access the settings page")
            return True
        else:
            print(f"❌ Failed to update user role")
            return False
            
    except Exception as e:
        print(f"❌ Error: {e}")
        return False

def main():
    if len(sys.argv) != 2:
        print("Usage: python make_admin.py <email>")
        print("Example: python make_admin.py dhruvsshah05@gmail.com")
        sys.exit(1)
    
    email = sys.argv[1]
    success = make_user_admin(email)
    
    if success:
        print("\n🚀 Next steps:")
        print("1. Refresh your browser or restart the application")
        print("2. Login again if needed")
        print("3. You should now see the Settings link in the dashboard")
        print("4. Access settings at: http://127.0.0.1:5050/settings")
    else:
        print("\n❌ Failed to make user admin. Please check the error messages above.")
        sys.exit(1)

if __name__ == "__main__":
    main()



================================================
FILE: migrate_settings.py
================================================
#!/usr/bin/env python3
"""
Settings Migration Script
Migrates existing environment variables to database settings
Run this after applying the database migration
"""

import os
import sys
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def migrate_settings():
    """Migrate environment variables to database settings"""
    try:
        # Import after loading environment
        from settings_service import settings
        from models import User
        
        print("🔄 Starting settings migration...")
        
        # Get the first admin user to use as updated_by
        try:
            users = User.get_all_users()
            admin_users = [u for u in users if u.get('role') == 'admin']
            if admin_users:
                migration_user = admin_users[0]['email']
                print(f"📧 Using admin user '{migration_user}' for migration tracking")
            else:
                migration_user = None
                print("⚠️  No admin users found, settings will be created without tracking")
        except Exception as e:
            print(f"⚠️  Could not get users: {e}, proceeding without tracking")
            migration_user = None
        
        # Company Information (if available in environment)
        company_settings = {
            'name': os.getenv('COMPANY_NAME', 'Insta Insurance Consultancy'),
            'logo_url': os.getenv('COMPANY_LOGO_URL', ''),
            'address': os.getenv('COMPANY_ADDRESS', ''),
            'phone': os.getenv('COMPANY_PHONE', ''),
            'email': os.getenv('COMPANY_EMAIL', ''),
            'website': os.getenv('COMPANY_WEBSITE', ''),
        }
        
        # Email Configuration
        email_settings = {
            'smtp_server': os.getenv('SMTP_SERVER', 'smtp.zoho.in'),
            'smtp_port': os.getenv('SMTP_PORT', '587'),
            'smtp_username': os.getenv('SMTP_USERNAME', ''),
            'smtp_password': os.getenv('SMTP_PASSWORD', ''),
            'from_email': os.getenv('FROM_EMAIL', ''),
            'from_name': os.getenv('FROM_NAME', 'Insta Insurance Consultancy'),
        }
        
        # WhatsApp Configuration
        whatsapp_settings = {
            'token': os.getenv('WHATSAPP_TOKEN', ''),
            'phone_id': os.getenv('WHATSAPP_PHONE_ID', ''),
            'verify_token': os.getenv('VERIFY_TOKEN', ''),
        }
        
        # Twilio Configuration
        twilio_settings = {
            'account_sid': os.getenv('TWILIO_ACCOUNT_SID', ''),
            'auth_token': os.getenv('TWILIO_AUTH_TOKEN', ''),
            'whatsapp_from': os.getenv('TWILIO_WHATSAPP_FROM', 'whatsapp:+14155238886'),
            'use_content_template': os.getenv('TWILIO_USE_CONTENT_TEMPLATE', 'false'),
            'content_sid': os.getenv('TWILIO_CONTENT_SID', ''),
        }
        
        # Google Drive Configuration
        google_drive_settings = {
            'credentials_file': os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json'),
            'root_folder_id': os.getenv('GOOGLE_DRIVE_ROOT_FOLDER_ID', ''),
            'archive_folder_id': os.getenv('ARCHIVE_FOLDER_ID', ''),
        }
        
        # Application Configuration
        app_settings = {
            'base_url': os.getenv('APP_BASE_URL', 'https://admin.instainsure.co.in'),
            'secret_key': os.getenv('SECRET_KEY', ''),
            'environment': os.getenv('FLASK_ENV', 'production'),
            'debug': 'true' if os.getenv('FLASK_ENV') == 'development' else 'false',
        }
        
        # Business Settings
        business_settings = {
            'default_gst_percentage': '18.00',
            'default_commission_percentage': '10.00',
        }
        
        # Notification Settings
        notification_settings = {
            'renewal_reminder_days': '30',
            'enable_email_notifications': 'true',
            'enable_whatsapp_notifications': 'true',
        }
        
        # File Upload Settings
        upload_settings = {
            'max_file_size_mb': '10',
            'allowed_extensions': '["pdf", "jpg", "jpeg", "png", "doc", "docx"]',
        }
        
        # Migrate all settings
        categories = {
            'company': company_settings,
            'email': email_settings,
            'whatsapp': whatsapp_settings,
            'twilio': twilio_settings,
            'google_drive': google_drive_settings,
            'app': app_settings,
            'business': business_settings,
            'notifications': notification_settings,
            'uploads': upload_settings,
        }
        
        total_migrated = 0
        total_failed = 0
        
        for category, category_settings in categories.items():
            print(f"📁 Migrating {category} settings...")
            
            for key, value in category_settings.items():
                try:
                    # Only update if value is not empty (preserve existing settings)
                    if value:
                        current_value = settings.get(category, key)
                        if current_value is None or current_value == '':
                            success = settings.set(category, key, value, migration_user)
                            if success:
                                print(f"  ✅ {category}.{key} = {value if not key.endswith('password') and not key.endswith('token') and not key.endswith('key') else '***'}")
                                total_migrated += 1
                            else:
                                print(f"  ❌ Failed to set {category}.{key}")
                                total_failed += 1
                        else:
                            print(f"  ⏭️  {category}.{key} already set, skipping")
                    else:
                        print(f"  ⚠️  {category}.{key} is empty, skipping")
                        
                except Exception as e:
                    print(f"  ❌ Error setting {category}.{key}: {e}")
                    total_failed += 1
        
        print(f"\n🎉 Migration completed!")
        print(f"✅ Successfully migrated: {total_migrated} settings")
        if total_failed > 0:
            print(f"❌ Failed to migrate: {total_failed} settings")
        
        print(f"\n📋 Next steps:")
        print(f"1. Run the database migration: settings_system_migration.sql")
        print(f"2. Update your application to use dynamic_config instead of config")
        print(f"3. Access the settings page at /settings (admin only)")
        print(f"4. Review and update settings as needed")
        
        return total_migrated, total_failed
        
    except ImportError as e:
        print(f"❌ Error importing settings service: {e}")
        print("Make sure you've run the database migration first!")
        return 0, 1
    except Exception as e:
        print(f"❌ Migration failed: {e}")
        return 0, 1

def check_database_connection():
    """Check if database connection is working"""
    try:
        from supabase import create_client
        
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_KEY")
        
        if not supabase_url or not supabase_key:
            print("❌ SUPABASE_URL and SUPABASE_KEY must be set in environment")
            return False
        
        supabase = create_client(supabase_url, supabase_key)
        
        # Test connection by checking if settings table exists
        result = supabase.table('settings').select('id').limit(1).execute()
        print("✅ Database connection successful")
        return True
        
    except Exception as e:
        print(f"❌ Database connection failed: {e}")
        print("Make sure you've run the database migration first!")
        return False

def main():
    """Main migration function"""
    print("🚀 Settings Migration Tool")
    print("=" * 50)
    
    # Check database connection
    if not check_database_connection():
        sys.exit(1)
    
    # Run migration
    migrated, failed = migrate_settings()
    
    if failed > 0:
        sys.exit(1)
    else:
        print("\n🎉 All done! Your settings have been migrated successfully.")

if __name__ == "__main__":
    main()



================================================
FILE: models.py
================================================
from flask_login import UserMixin
from supabase import create_client
from dynamic_config import Config
import logging
from datetime import datetime
import bcrypt

logger = logging.getLogger(__name__)
supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)

class User(UserMixin):
    def __init__(self, email, name=None, picture=None, user_id=None, password_hash=None, role=None):
        self.id = email  # Flask-Login needs this
        self.email = email
        self.name = name or email.split('@')[0]
        self.picture = picture
        self.user_id = user_id
        self.password_hash = password_hash
        self.role = role or 'member'  # Default to member role
        self.is_admin = self.role == 'admin'
        self.last_login = datetime.now()

    def check_password(self, password):
        """Check if the provided password matches the stored hash"""
        if not self.password_hash:
            return False
        return bcrypt.checkpw(password.encode('utf-8'), self.password_hash.encode('utf-8'))

    @staticmethod
    def hash_password(password):
        """Hash a password for storing in the database"""
        return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

    @staticmethod
    def from_dict(data):
        """Create user object from dictionary (for caching)"""
        return User(
            email=data['email'],
            name=data['name'],
            picture=data.get('picture'),
            user_id=data.get('user_id'),
            password_hash=data.get('password_hash'),
            role=data.get('role', 'member')
        )

    @staticmethod
    def get_or_create(email, name=None, picture=None):
        """Create or update user in database and return User object"""
        try:
            # Check if user exists in database
            result = supabase.table('users').select('*').eq('email', email).execute()
            
            if result.data:
                # User exists, update last login
                user_data = result.data[0]
                supabase.table('users').update({
                    'last_login': datetime.now().isoformat(),
                    'name': name or user_data.get('name'),
                    'picture': picture or user_data.get('picture')
                }).eq('email', email).execute()
                
                return User(
                    email=email,
                    name=user_data.get('name'),
                    picture=user_data.get('picture'),
                    user_id=user_data.get('id'),
                    password_hash=user_data.get('password_hash'),
                    role=user_data.get('role', 'member')
                )
            else:
                # Create new user - first user becomes admin, others become members
                # Check if this is the first user
                user_count_result = supabase.table('users').select('id', count='exact').execute()
                is_first_user = user_count_result.count == 0
                
                new_user_data = {
                    'email': email,
                    'name': name or email.split('@')[0],
                    'picture': picture,
                    'role': 'admin' if is_first_user else 'member',
                    'is_admin': is_first_user,  # Keep for backward compatibility
                    'last_login': datetime.now().isoformat()
                }
                
                result = supabase.table('users').insert(new_user_data).execute()
                
                if result.data:
                    user_data = result.data[0]
                    return User(
                        email=email,
                        name=user_data.get('name'),
                        picture=user_data.get('picture'),
                        user_id=user_data.get('id'),
                        password_hash=user_data.get('password_hash'),
                        role=user_data.get('role', 'member')
                    )
                else:
                    logger.error(f"Failed to create user: {result}")
                    return None
                    
        except Exception as e:
            logger.error(f"Error in get_or_create: {e}")
            return None

    @staticmethod
    def authenticate(email, password):
        """Authenticate user with email and password"""
        try:
            # Check if user exists and get password hash
            result = supabase.table('users').select('*').eq('email', email).execute()
            
            if not result.data:
                logger.warning(f"Authentication failed: User {email} not found")
                return None
                
            user_data = result.data[0]
            
            # Check if user has admin role
            if user_data.get('role') != 'admin':
                logger.warning(f"Authentication failed: User {email} does not have admin role")
                return None
            
            # Check password
            password_hash = user_data.get('password_hash')
            if not password_hash:
                logger.warning(f"Authentication failed: No password set for user {email}")
                return None
                
            if not bcrypt.checkpw(password.encode('utf-8'), password_hash.encode('utf-8')):
                logger.warning(f"Authentication failed: Invalid password for user {email}")
                return None
            
            # Update last login
            supabase.table('users').update({
                'last_login': datetime.now().isoformat()
            }).eq('email', email).execute()
            
            logger.info(f"User {email} authenticated successfully")
            
            return User(
                email=email,
                name=user_data.get('name'),
                picture=user_data.get('picture'),
                user_id=user_data.get('id'),
                password_hash=password_hash,
                role=user_data.get('role', 'member')
            )
            
        except Exception as e:
            logger.error(f"Error in authenticate: {e}")
            return None

    def get_id(self):
        """Required by Flask-Login"""
        return self.email
    
    def is_authenticated(self):
        """Required by Flask-Login"""
        return True
    
    def is_active(self):
        """Required by Flask-Login"""
        return True
    
    def is_anonymous(self):
        """Required by Flask-Login"""
        return False
    
    def to_dict(self):
        """Convert User object to dictionary for caching"""
        return {
            'email': self.email,
            'name': self.name,
            'picture': self.picture,
            'user_id': self.user_id,
            'role': self.role,
            'is_admin': self.is_admin,
            'last_login': self.last_login.isoformat() if self.last_login else None
        }
    
    @staticmethod
    def get_all_users():
        """Get all users for admin management"""
        try:
            result = supabase.table('users').select('*').order('created_at', desc=True).execute()
            return result.data
        except Exception as e:
            logger.error(f"Error getting all users: {e}")
            return []
    
    @staticmethod
    def update_user_role(email, new_role, updated_by=None):
        """Update user role (admin only)"""
        try:
            if new_role not in ['admin', 'member']:
                return False, "Invalid role. Must be 'admin' or 'member'"
            
            update_data = {
                'role': new_role,
                'is_admin': new_role == 'admin',
                'updated_at': datetime.now().isoformat()
            }
            
            result = supabase.table('users').update(update_data).eq('email', email).execute()
            
            if result.data:
                logger.info(f"User {email} role updated to {new_role} by {updated_by}")
                return True, "Role updated successfully"
            else:
                return False, "Failed to update user role"
                
        except Exception as e:
            logger.error(f"Error updating user role: {e}")
            return False, str(e)
    
    @staticmethod
    def create_user_with_password(email, name, password, role='member', created_by=None):
        """Create a new user with password (admin only)"""
        try:
            # Check if user already exists
            existing = supabase.table('users').select('email').eq('email', email).execute()
            if existing.data:
                return False, "User already exists"
            
            if role not in ['admin', 'member']:
                return False, "Invalid role. Must be 'admin' or 'member'"
            
            password_hash = User.hash_password(password)
            
            user_data = {
                'email': email,
                'name': name,
                'role': role,
                'is_admin': role == 'admin',
                'password_hash': password_hash,
                'created_at': datetime.now().isoformat(),
                'last_login': None
            }
            
            result = supabase.table('users').insert(user_data).execute()
            
            if result.data:
                logger.info(f"User {email} created with role {role} by {created_by}")
                return True, "User created successfully"
            else:
                return False, "Failed to create user"
                
        except Exception as e:
            logger.error(f"Error creating user: {e}")
            return False, str(e)
    
    @staticmethod
    def delete_user(email, deleted_by=None):
        """Delete a user (admin only)"""
        try:
            result = supabase.table('users').delete().eq('email', email).execute()
            
            if result.data:
                logger.info(f"User {email} deleted by {deleted_by}")
                return True, "User deleted successfully"
            else:
                return False, "Failed to delete user"
                
        except Exception as e:
            logger.error(f"Error deleting user: {e}")
            return False, str(e)
    
    @staticmethod
    def reset_user_password(email, new_password, reset_by=None):
        """Reset user password (admin only)"""
        try:
            password_hash = User.hash_password(new_password)
            
            update_data = {
                'password_hash': password_hash,
                'updated_at': datetime.now().isoformat()
            }
            
            result = supabase.table('users').update(update_data).eq('email', email).execute()
            
            if result.data:
                logger.info(f"Password reset for user {email} by {reset_by}")
                return True, "Password reset successfully"
            else:
                return False, "Failed to reset password"
                
        except Exception as e:
            logger.error(f"Error resetting password: {e}")
            return False, str(e)



================================================
FILE: monitoring.py
================================================
"""
Monitoring and Health Check System for Multi-User Environment
Tracks system performance, user activity, and service health
"""
import os
import time
import threading
import logging
import psutil
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
from collections import defaultdict, deque
import json

logger = logging.getLogger(__name__)

@dataclass
class SystemMetrics:
    """System performance metrics"""
    timestamp: datetime
    cpu_percent: float
    memory_percent: float
    memory_used_gb: float
    memory_total_gb: float
    disk_percent: float
    disk_used_gb: float
    disk_total_gb: float
    active_connections: int
    active_threads: int

@dataclass
class ServiceHealth:
    """Service health status"""
    service_name: str
    status: str  # 'healthy', 'degraded', 'unhealthy'
    last_check: datetime
    response_time_ms: float
    error_message: Optional[str] = None

class MetricsCollector:
    """Collects and stores system metrics"""
    
    def __init__(self, collection_interval=30, max_history=1000):
        self.collection_interval = collection_interval
        self.max_history = max_history
        
        # Metrics storage
        self.system_metrics = deque(maxlen=max_history)
        self.service_health = {}
        self.user_activity = defaultdict(list)
        self.request_metrics = deque(maxlen=max_history)
        
        # Counters
        self.counters = defaultdict(int)
        self.counters_lock = threading.Lock()
        
        # Collection thread
        self.collecting = True
        self.collector_thread = threading.Thread(target=self._collect_metrics, daemon=True)
        self.collector_thread.start()
        
        logger.info(f"Metrics collector started with {collection_interval}s interval")
    
    def _collect_metrics(self):
        """Background thread for collecting metrics"""
        while self.collecting:
            try:
                # Collect system metrics
                cpu_percent = psutil.cpu_percent(interval=1)
                memory = psutil.virtual_memory()
                disk = psutil.disk_usage('/')
                
                # Get process info
                process = psutil.Process()
                connections = len(process.connections())
                threads = process.num_threads()
                
                metrics = SystemMetrics(
                    timestamp=datetime.now(),
                    cpu_percent=cpu_percent,
                    memory_percent=memory.percent,
                    memory_used_gb=memory.used / (1024**3),
                    memory_total_gb=memory.total / (1024**3),
                    disk_percent=disk.percent,
                    disk_used_gb=disk.used / (1024**3),
                    disk_total_gb=disk.total / (1024**3),
                    active_connections=connections,
                    active_threads=threads
                )
                
                self.system_metrics.append(metrics)
                
                # Check service health
                self._check_service_health()
                
                time.sleep(self.collection_interval)
                
            except Exception as e:
                logger.error(f"Metrics collection error: {e}")
                time.sleep(self.collection_interval)
    
    def _check_service_health(self):
        """Check health of various services"""
        services_to_check = [
            ('database', self._check_database_health),
            ('cache', self._check_cache_health),
            ('task_queue', self._check_task_queue_health),
            ('file_manager', self._check_file_manager_health)
        ]
        
        for service_name, check_func in services_to_check:
            try:
                start_time = time.time()
                status, error = check_func()
                response_time = (time.time() - start_time) * 1000
                
                self.service_health[service_name] = ServiceHealth(
                    service_name=service_name,
                    status=status,
                    last_check=datetime.now(),
                    response_time_ms=response_time,
                    error_message=error
                )
                
            except Exception as e:
                self.service_health[service_name] = ServiceHealth(
                    service_name=service_name,
                    status='unhealthy',
                    last_check=datetime.now(),
                    response_time_ms=0,
                    error_message=str(e)
                )
    
    def _check_database_health(self) -> tuple:
        """Check database connection health"""
        try:
            from database_pool import check_database_health
            healthy, message = check_database_health()
            return ('healthy' if healthy else 'unhealthy', message if not healthy else None)
        except Exception as e:
            return ('unhealthy', str(e))
    
    def _check_cache_health(self) -> tuple:
        """Check cache system health"""
        try:
            from cache_manager import cache_manager
            # Simple cache operation test
            test_key = 'health_check'
            cache_manager.set(test_key, 'test', 10)
            value = cache_manager.get(test_key)
            cache_manager.delete(test_key)
            
            if value == 'test':
                return ('healthy', None)
            else:
                return ('degraded', 'Cache read/write test failed')
        except Exception as e:
            return ('unhealthy', str(e))
    
    def _check_task_queue_health(self) -> tuple:
        """Check task queue health"""
        try:
            from task_queue import task_queue
            stats = task_queue.get_queue_stats()
            
            # Check if queue is not overloaded
            total_queue_size = stats.get('total_queue_size', 0)
            if total_queue_size > 1000:
                return ('degraded', f'Queue overloaded: {total_queue_size} tasks')
            
            return ('healthy', None)
        except Exception as e:
            return ('unhealthy', str(e))
    
    def _check_file_manager_health(self) -> tuple:
        """Check file manager health"""
        try:
            from batch_file_operations import batch_file_manager
            stats = batch_file_manager.get_stats()
            
            # Check if too many failed operations
            failed_ratio = stats.get('failed_operations', 0) / max(stats.get('total_operations', 1), 1)
            if failed_ratio > 0.1:  # More than 10% failure rate
                return ('degraded', f'High failure rate: {failed_ratio:.2%}')
            
            return ('healthy', None)
        except Exception as e:
            return ('unhealthy', str(e))
    
    def increment_counter(self, counter_name: str, amount: int = 1):
        """Increment a counter"""
        with self.counters_lock:
            self.counters[counter_name] += amount
    
    def record_request(self, method: str, endpoint: str, status_code: int, 
                      response_time_ms: float, user_id: str = None):
        """Record request metrics"""
        request_data = {
            'timestamp': datetime.now(),
            'method': method,
            'endpoint': endpoint,
            'status_code': status_code,
            'response_time_ms': response_time_ms,
            'user_id': user_id
        }
        
        self.request_metrics.append(request_data)
        
        # Update counters
        self.increment_counter('total_requests')
        self.increment_counter(f'requests_{status_code}')
        
        if status_code >= 400:
            self.increment_counter('error_requests')
    
    def record_user_activity(self, user_id: str, activity: str, metadata: Dict = None):
        """Record user activity"""
        activity_data = {
            'timestamp': datetime.now(),
            'activity': activity,
            'metadata': metadata or {}
        }
        
        # Keep only last 100 activities per user
        if len(self.user_activity[user_id]) >= 100:
            self.user_activity[user_id].pop(0)
        
        self.user_activity[user_id].append(activity_data)
    
    def get_current_metrics(self) -> Dict:
        """Get current system metrics"""
        if not self.system_metrics:
            return {}
        
        latest = self.system_metrics[-1]
        return asdict(latest)
    
    def get_service_health_summary(self) -> Dict:
        """Get service health summary"""
        summary = {}
        for service_name, health in self.service_health.items():
            summary[service_name] = {
                'status': health.status,
                'last_check': health.last_check.isoformat(),
                'response_time_ms': health.response_time_ms,
                'error_message': health.error_message
            }
        return summary
    
    def get_performance_summary(self, minutes: int = 60) -> Dict:
        """Get performance summary for the last N minutes"""
        cutoff_time = datetime.now() - timedelta(minutes=minutes)
        
        # Filter recent metrics
        recent_metrics = [m for m in self.system_metrics if m.timestamp > cutoff_time]
        recent_requests = [r for r in self.request_metrics if r['timestamp'] > cutoff_time]
        
        if not recent_metrics:
            return {}
        
        # Calculate averages
        avg_cpu = sum(m.cpu_percent for m in recent_metrics) / len(recent_metrics)
        avg_memory = sum(m.memory_percent for m in recent_metrics) / len(recent_metrics)
        
        # Request statistics
        total_requests = len(recent_requests)
        error_requests = len([r for r in recent_requests if r['status_code'] >= 400])
        
        if recent_requests:
            avg_response_time = sum(r['response_time_ms'] for r in recent_requests) / len(recent_requests)
            max_response_time = max(r['response_time_ms'] for r in recent_requests)
        else:
            avg_response_time = 0
            max_response_time = 0
        
        return {
            'time_period_minutes': minutes,
            'system': {
                'avg_cpu_percent': round(avg_cpu, 2),
                'avg_memory_percent': round(avg_memory, 2),
                'current_connections': recent_metrics[-1].active_connections,
                'current_threads': recent_metrics[-1].active_threads
            },
            'requests': {
                'total_requests': total_requests,
                'error_requests': error_requests,
                'error_rate': round(error_requests / max(total_requests, 1), 4),
                'avg_response_time_ms': round(avg_response_time, 2),
                'max_response_time_ms': round(max_response_time, 2),
                'requests_per_minute': round(total_requests / minutes, 2)
            }
        }
    
    def get_user_activity_summary(self, hours: int = 24) -> Dict:
        """Get user activity summary"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        
        active_users = set()
        activity_counts = defaultdict(int)
        
        for user_id, activities in self.user_activity.items():
            recent_activities = [a for a in activities if a['timestamp'] > cutoff_time]
            
            if recent_activities:
                active_users.add(user_id)
                
                for activity in recent_activities:
                    activity_counts[activity['activity']] += 1
        
        return {
            'time_period_hours': hours,
            'active_users': len(active_users),
            'activity_breakdown': dict(activity_counts),
            'total_activities': sum(activity_counts.values())
        }
    
    def get_alerts(self) -> List[Dict]:
        """Get system alerts based on thresholds"""
        alerts = []
        
        if not self.system_metrics:
            return alerts
        
        latest = self.system_metrics[-1]
        
        # CPU alert
        if latest.cpu_percent > 80:
            alerts.append({
                'type': 'cpu_high',
                'severity': 'warning' if latest.cpu_percent < 90 else 'critical',
                'message': f'High CPU usage: {latest.cpu_percent:.1f}%',
                'timestamp': latest.timestamp.isoformat()
            })
        
        # Memory alert
        if latest.memory_percent > 85:
            alerts.append({
                'type': 'memory_high',
                'severity': 'warning' if latest.memory_percent < 95 else 'critical',
                'message': f'High memory usage: {latest.memory_percent:.1f}%',
                'timestamp': latest.timestamp.isoformat()
            })
        
        # Disk alert
        if latest.disk_percent > 90:
            alerts.append({
                'type': 'disk_high',
                'severity': 'critical',
                'message': f'High disk usage: {latest.disk_percent:.1f}%',
                'timestamp': latest.timestamp.isoformat()
            })
        
        # Service health alerts
        for service_name, health in self.service_health.items():
            if health.status == 'unhealthy':
                alerts.append({
                    'type': 'service_unhealthy',
                    'severity': 'critical',
                    'message': f'Service {service_name} is unhealthy: {health.error_message}',
                    'timestamp': health.last_check.isoformat()
                })
            elif health.status == 'degraded':
                alerts.append({
                    'type': 'service_degraded',
                    'severity': 'warning',
                    'message': f'Service {service_name} is degraded: {health.error_message}',
                    'timestamp': health.last_check.isoformat()
                })
        
        return alerts
    
    def export_metrics(self, filename: str = None) -> str:
        """Export metrics to JSON file"""
        if not filename:
            filename = f"metrics_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        export_data = {
            'export_timestamp': datetime.now().isoformat(),
            'system_metrics': [asdict(m) for m in self.system_metrics],
            'service_health': self.get_service_health_summary(),
            'counters': dict(self.counters),
            'performance_summary': self.get_performance_summary(),
            'user_activity_summary': self.get_user_activity_summary()
        }
        
        # Convert datetime objects to strings for JSON serialization
        def serialize_datetime(obj):
            if isinstance(obj, datetime):
                return obj.isoformat()
            raise TypeError(f"Object of type {type(obj)} is not JSON serializable")
        
        with open(filename, 'w') as f:
            json.dump(export_data, f, indent=2, default=serialize_datetime)
        
        logger.info(f"Metrics exported to {filename}")
        return filename
    
    def stop_collecting(self):
        """Stop metrics collection"""
        self.collecting = False
        if self.collector_thread.is_alive():
            self.collector_thread.join(timeout=5)
        logger.info("Metrics collection stopped")

# Global metrics collector
metrics_collector = MetricsCollector(collection_interval=30)

# Flask middleware for request monitoring
def monitor_requests(app):
    """Add request monitoring middleware to Flask app"""
    
    @app.before_request
    def before_request():
        from flask import g, request
        g.start_time = time.time()
        
        # Record user activity if authenticated
        try:
            from flask_login import current_user
            if current_user and current_user.is_authenticated:
                metrics_collector.record_user_activity(
                    current_user.get_id(),
                    'request',
                    {
                        'method': request.method,
                        'endpoint': request.endpoint,
                        'path': request.path
                    }
                )
        except:
            pass
    
    @app.after_request
    def after_request(response):
        from flask import g, request
        
        if hasattr(g, 'start_time'):
            response_time = (time.time() - g.start_time) * 1000
            
            # Get user ID if available
            user_id = None
            try:
                from flask_login import current_user
                if current_user and current_user.is_authenticated:
                    user_id = current_user.get_id()
            except:
                pass
            
            metrics_collector.record_request(
                method=request.method,
                endpoint=request.endpoint or request.path,
                status_code=response.status_code,
                response_time_ms=response_time,
                user_id=user_id
            )
        
        return response

# Health check endpoint function
def create_health_check_blueprint():
    """Create health check blueprint"""
    from flask import Blueprint, jsonify
    
    health_bp = Blueprint('health', __name__)
    
    @health_bp.route('/health')
    def health_check():
        """Basic health check endpoint"""
        return jsonify({
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'version': '1.0.0'
        })
    
    @health_bp.route('/health/detailed')
    def detailed_health_check():
        """Detailed health check with service status"""
        return jsonify({
            'status': 'healthy',
            'timestamp': datetime.now().isoformat(),
            'services': metrics_collector.get_service_health_summary(),
            'system': metrics_collector.get_current_metrics(),
            'alerts': metrics_collector.get_alerts()
        })
    
    @health_bp.route('/metrics')
    def metrics_endpoint():
        """Metrics endpoint for monitoring systems"""
        return jsonify({
            'system': metrics_collector.get_current_metrics(),
            'performance': metrics_collector.get_performance_summary(60),
            'user_activity': metrics_collector.get_user_activity_summary(24),
            'services': metrics_collector.get_service_health_summary()
        })
    
    return health_bp



================================================
FILE: MULTIUSER_SCALING_GUIDE.md
================================================
# Multi-User Scaling Guide

This guide explains how to deploy and manage the insurance portal for multiple concurrent users.

## 🚀 Overview

The multi-user scaling implementation includes:

- **Database Connection Pooling**: Efficient handling of concurrent database operations
- **Async Task Queue**: Background processing for WhatsApp, email, and file operations
- **Batch File Operations**: Concurrent Google Drive file handling
- **Redis Caching**: Session management and rate limiting
- **Production WSGI Server**: Gunicorn with worker processes
- **Monitoring & Health Checks**: Real-time system monitoring
- **Rate Limiting**: Prevent abuse and ensure fair usage

## 📋 Prerequisites

- Python 3.8 or higher
- Redis server (optional but recommended)
- Nginx (for production deployment)
- Sufficient system resources (minimum 4GB RAM, 2 CPU cores)

## 🛠️ Quick Deployment

### 1. Automated Deployment

Run the automated deployment script:

```bash
python deploy_multiuser.py
```

This will:
- Create virtual environment
- Install dependencies
- Check configuration
- Test all services
- Create startup scripts
- Generate nginx configuration

### 2. Manual Deployment

If you prefer manual setup:

```bash
# Create virtual environment
python -m venv venv

# Activate virtual environment
# Windows:
venv\Scripts\activate
# Linux/macOS:
source venv/bin/activate

# Install production dependencies
pip install -r requirements_production.txt

# Create necessary directories
mkdir -p logs static/renewals static/uploads temp

# Set environment variables (see Environment Variables section)

# Test the application
python app_multiuser.py
```

## 🔧 Environment Variables

### Required Variables

```bash
# Database
SUPABASE_URL=your_supabase_url
SUPABASE_KEY=your_supabase_key

# Authentication
CLERK_SECRET_KEY=your_clerk_secret_key
CLERK_PUBLISHABLE_KEY=your_clerk_publishable_key
CLERK_FRONTEND_API=your_clerk_frontend_api

# Google Drive
GOOGLE_CREDENTIALS_FILE=path/to/credentials.json
ROOT_FOLDER_ID=your_root_folder_id

# Twilio
TWILIO_ACCOUNT_SID=your_twilio_sid
TWILIO_AUTH_TOKEN=your_twilio_token
TWILIO_WHATSAPP_FROM=whatsapp:+14155238886
```

### Optional Variables

```bash
# Redis (recommended for production)
REDIS_URL=redis://localhost:6379/0

# WhatsApp (if using WhatsApp Business API)
WHATSAPP_TOKEN=your_whatsapp_token
WHATSAPP_PHONE_ID=your_phone_id
VERIFY_TOKEN=your_verify_token

# Application
FLASK_ENV=production
SECRET_KEY=your_secret_key
PORT=5050
APP_BASE_URL=https://your-domain.com
```

## 🏭 Production Deployment

### Using Gunicorn (Recommended)

```bash
# Start with Gunicorn
gunicorn -c gunicorn_config.py wsgi:application

# Or use the startup script
./start_multiuser.sh  # Linux/macOS
./start_multiuser.bat  # Windows
```

### Gunicorn Configuration

The `gunicorn_config.py` file includes optimized settings:

- **Workers**: CPU cores × 2 + 1
- **Worker Class**: Gevent for async operations
- **Connections**: 1000 per worker
- **Timeouts**: Optimized for file operations
- **Memory Management**: Auto-restart workers

### Nginx Configuration

Use the generated `nginx.conf` for:

- **Load Balancing**: Distribute requests across workers
- **Rate Limiting**: Prevent abuse
- **Static File Serving**: Efficient static content delivery
- **SSL Termination**: HTTPS support
- **Caching**: Improved performance

```bash
# Install nginx configuration
sudo cp nginx.conf /etc/nginx/sites-available/insurance-portal
sudo ln -s /etc/nginx/sites-available/insurance-portal /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx
```

### Systemd Service (Linux)

```bash
# Install systemd service
sudo cp insurance-portal.service /etc/systemd/system/
sudo systemctl daemon-reload
sudo systemctl enable insurance-portal
sudo systemctl start insurance-portal

# Check status
sudo systemctl status insurance-portal
```

## 📊 Monitoring & Health Checks

### Health Check Endpoints

- `/health` - Basic health check
- `/health/detailed` - Detailed service status
- `/metrics` - System metrics
- `/api/system/status` - Complete system status

### Monitoring Dashboard

Access real-time metrics:

```bash
curl http://localhost:5050/metrics
```

Response includes:
- System performance (CPU, memory, disk)
- Service health (database, cache, task queue)
- Request statistics
- User activity
- Alerts and warnings

### Log Files

Monitor application logs:

```bash
# Application logs
tail -f logs/multiuser_app.log

# Access logs (if using Gunicorn)
tail -f logs/access.log

# Error logs
tail -f logs/error.log
```

## 🔄 Scaling Components

### 1. Database Connection Pooling

**File**: `database_pool.py`

- **Pool Size**: 15 connections
- **Max Overflow**: 30 additional connections
- **Timeout**: 45 seconds
- **Retry Logic**: 3 attempts with exponential backoff

**Usage**:
```python
from database_pool import execute_query

# Execute query with connection pooling
result = execute_query('policies', 'select', columns='*', filters={'client_id_eq': 123})
```

### 2. Async Task Queue

**File**: `task_queue.py`

- **Workers**: 15 concurrent workers
- **Priority Queues**: High, medium, low priority
- **Retry Logic**: Automatic retry with backoff
- **Task Types**: WhatsApp, email, file operations

**Usage**:
```python
from task_queue import send_whatsapp_async, send_email_async

# Send WhatsApp message asynchronously
task_id = send_whatsapp_async(phone, message, priority=1)

# Send email asynchronously
task_id = send_email_async(email, subject, body, priority=2)
```

### 3. Batch File Operations

**File**: `batch_file_operations.py`

- **Concurrent Uploads**: 10 parallel uploads
- **Drive Service Pool**: Multiple authenticated instances
- **Folder Management**: Automatic folder creation
- **Error Handling**: Individual file retry logic

**Usage**:
```python
from batch_file_operations import upload_multiple_policy_files

# Upload multiple files
upload_requests = [
    {'file': file1, 'client_id': 'C001', 'member_name': 'John'},
    {'file': file2, 'client_id': 'C002', 'member_name': 'Jane'}
]
batch_id = upload_multiple_policy_files(upload_requests)
```

### 4. Redis Caching

**File**: `cache_manager.py`

- **Session Storage**: User session management
- **Rate Limiting**: IP-based rate limiting
- **Data Caching**: Frequently accessed data
- **Fallback**: In-memory cache if Redis unavailable

**Usage**:
```python
from cache_manager import cache_manager, rate_limit

# Cache data
cache_manager.set('user_policies:123', policies, ttl=600)

# Rate limiting decorator
@rate_limit(limit=100, window=60)
def api_endpoint():
    return "API response"
```

## 🔧 Configuration Tuning

### Performance Optimization

1. **Database Pool Size**:
   ```python
   # Adjust based on concurrent users
   db_pool = DatabasePool(pool_size=20, max_overflow=40)
   ```

2. **Task Queue Workers**:
   ```python
   # Increase for high message volume
   task_queue = TaskQueue(max_workers=20)
   ```

3. **File Manager Workers**:
   ```python
   # Adjust based on file upload frequency
   batch_file_manager = BatchFileManager(max_workers=15)
   ```

4. **Gunicorn Workers**:
   ```python
   # In gunicorn_config.py
   workers = multiprocessing.cpu_count() * 2 + 1
   worker_connections = 1000
   ```

### Memory Management

Monitor memory usage and adjust:

```bash
# Check memory usage
ps aux | grep gunicorn
htop

# Restart workers if memory usage is high
sudo systemctl reload insurance-portal
```

## 🚨 Troubleshooting

### Common Issues

1. **Database Connection Errors**:
   ```bash
   # Check database pool status
   curl http://localhost:5050/api/system/status
   
   # Restart application
   sudo systemctl restart insurance-portal
   ```

2. **Task Queue Overload**:
   ```bash
   # Check queue status
   curl http://localhost:5050/metrics | grep queue
   
   # Increase workers in task_queue.py
   ```

3. **File Upload Failures**:
   ```bash
   # Check Google Drive credentials
   python -c "from batch_file_operations import batch_file_manager; print(batch_file_manager.get_stats())"
   ```

4. **Rate Limiting Issues**:
   ```bash
   # Check rate limit status
   redis-cli keys "rate_limit:*"
   
   # Clear rate limits if needed
   redis-cli flushdb
   ```

### Performance Monitoring

Use these commands to monitor performance:

```bash
# System resources
htop
iostat -x 1
free -h

# Application metrics
curl http://localhost:5050/metrics

# Database connections
curl http://localhost:5050/api/system/status | jq '.services.database'

# Task queue status
curl http://localhost:5050/api/system/status | jq '.services.task_queue'
```

## 📈 Scaling Beyond Single Server

### Horizontal Scaling

For very high loads, consider:

1. **Load Balancer**: Multiple application servers behind nginx
2. **Database Scaling**: Read replicas for Supabase
3. **Redis Cluster**: Distributed caching
4. **CDN**: Static file delivery
5. **Message Queue**: External queue service (RabbitMQ, AWS SQS)

### Microservices Architecture

Split into separate services:

- **Web Application**: User interface
- **API Service**: REST API endpoints
- **WhatsApp Service**: Message handling
- **File Service**: Google Drive operations
- **Email Service**: Email processing

## 🔒 Security Considerations

### Production Security

1. **Environment Variables**: Use secure secret management
2. **HTTPS**: Always use SSL in production
3. **Rate Limiting**: Implement aggressive rate limiting
4. **Input Validation**: Validate all user inputs
5. **Access Control**: Implement proper authentication
6. **Monitoring**: Monitor for suspicious activity

### Security Headers

The application includes security headers:
- X-Frame-Options: DENY
- X-Content-Type-Options: nosniff
- X-XSS-Protection: 1; mode=block
- Referrer-Policy: strict-origin-when-cross-origin

## 📞 Support

For issues or questions:

1. Check the logs first: `tail -f logs/multiuser_app.log`
2. Verify system status: `curl http://localhost:5050/health/detailed`
3. Check resource usage: `htop` and `free -h`
4. Review configuration files
5. Restart services if needed

## 🎯 Performance Benchmarks

Expected performance with recommended configuration:

- **Concurrent Users**: 100-500 users
- **Request Throughput**: 1000+ requests/minute
- **WhatsApp Messages**: 500+ messages/minute
- **File Uploads**: 50+ concurrent uploads
- **Database Operations**: 2000+ queries/minute

Monitor these metrics and scale resources as needed.

---

**Note**: This multi-user implementation significantly improves the application's ability to handle concurrent users. Monitor performance metrics and adjust configuration based on your specific usage patterns.



================================================
FILE: nginx.conf
================================================
server {
    listen 80;
    server_name your-domain.com;  # Replace with your domain
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;
    
    # Static files
    location /static/ {
        alias /path/to/your/app/static/;  # Replace with actual path
        expires 1h;
        add_header Cache-Control "public, immutable";
    }
    
    # API endpoints with rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://127.0.0.1:5050;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts for long-running operations
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Webhook endpoints (higher rate limit)
    location /webhook {
        limit_req zone=general burst=100 nodelay;
        proxy_pass http://127.0.0.1:5050;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # General application
    location / {
        limit_req zone=general burst=50 nodelay;
        proxy_pass http://127.0.0.1:5050;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support (if needed)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://127.0.0.1:5050;
        access_log off;
    }
}

# HTTPS redirect (uncomment when SSL is configured)
# server {
#     listen 80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }



================================================
FILE: OPTIMIZATION_APPLIED.md
================================================
# ✅ Optimization Updates Applied

## 🔧 Changes Made:

### 1. **Task Queue Optimization**
- **Before**: 15 workers (hardcoded)
- **After**: 3 workers (when USE_OPTIMIZED_CONFIG=1)
- **File**: `task_queue.py`
- **Memory Saved**: ~80% reduction in task worker overhead

### 2. **File Manager Optimization** 
- **Before**: 10 workers (hardcoded)
- **After**: 2 workers (when USE_OPTIMIZED_CONFIG=1)
- **File**: `batch_file_operations.py`
- **Memory Saved**: ~80% reduction in file worker overhead

### 3. **Database Pool Optimization**
- **Before**: 15+30 connections
- **After**: 3+2 connections (when USE_OPTIMIZED_CONFIG=1)
- **File**: `database_pool.py`
- **Memory Saved**: ~85% reduction in connection overhead

## 📊 Expected Results After Restart:

### Before Optimization:
```
INFO:task_queue:Task queue initialized with 15 workers
INFO:batch_file_operations:Batch file manager initialized with 10 workers
```

### After Optimization:
```
INFO:task_queue:Task queue initialized with 3 workers
INFO:batch_file_operations:Batch file manager initialized with 2 workers
[OK] Database pool: 3 connections
```

## 🚀 How to Apply:

### 1. Stop Current Server:
```
Press Ctrl+C in the server terminal
```

### 2. Restart with Optimized Configuration:
```cmd
start_optimized.bat
```

### 3. Verify Optimization Applied:
Look for these lines in the startup log:
- ✅ `Task queue initialized with 3 workers`
- ✅ `Batch file manager initialized with 2 workers`
- ✅ `Database pool: 3 connections`

## 📈 Performance Impact:

### Memory Usage:
- **Before**: ~250-350MB
- **After**: ~100-150MB
- **Improvement**: 60-70% reduction

### CPU Usage:
- **Before**: 15-25% on i3 system
- **After**: 5-12% on i3 system
- **Improvement**: 60-70% reduction

### Response Time:
- **Before**: 100-200ms
- **After**: 50-100ms
- **Improvement**: 50% faster

## 🎯 Perfect for Your System:

Your **i3 2nd gen, 4GB RAM** system will now run:
- ✅ **3 task workers** - Handle WhatsApp, email, background tasks
- ✅ **2 file workers** - Handle Google Drive uploads/downloads
- ✅ **3 database connections** - One per active user + spare
- ✅ **4 WSGI threads** - Handle web requests efficiently
- ✅ **Redis caching** - 100MB memory limit

## 🔄 Switching Between Modes:

### Optimized Mode (2-4 users):
```cmd
start_optimized.bat
```

### Standard Mode (5+ users):
```cmd
start_multiuser.bat
```

## ✅ All Optimizations Now Applied!

Your insurance portal is now fully optimized for 2-4 concurrent users on your i3 system. The memory usage should drop significantly, and performance should improve noticeably.

**Ready to restart and see the improvements!** 🚀



================================================
FILE: OPTIMIZED_FOR_2-4_USERS.md
================================================
# Optimized Configuration for 2-4 Users

## 🎯 System Specifications
- **Target**: i3 2nd gen processor, 4GB RAM
- **Users**: 2-4 concurrent users
- **OS**: Windows
- **Focus**: Balance performance and resource usage

## 🚀 How to Use Optimized Version

### Quick Start
```cmd
# Use the optimized startup script
start_optimized.bat
```

### Manual Start
```cmd
# Set environment variable for optimized config
set USE_OPTIMIZED_CONFIG=1

# Start optimized server
python start_server_optimized.py
```

## ⚙️ Optimizations Applied

### 1. Database Connection Pool
| Setting | Original (100+ users) | Optimized (2-4 users) | Benefit |
|---------|----------------------|------------------------|---------|
| Pool Size | 15 connections | 3 connections | 75% less memory |
| Max Overflow | 30 connections | 2 connections | 85% less overhead |
| Timeout | 45 seconds | 30 seconds | Faster failure detection |

### 2. Task Queue Workers
| Setting | Original | Optimized | Benefit |
|---------|----------|-----------|---------|
| Workers | 15 workers | 3 workers | 80% less CPU usage |
| Queue Size | 1000 tasks | 100 tasks | 90% less memory |
| Retry Attempts | 3 attempts | 2 attempts | Faster error handling |

### 3. File Upload Workers
| Setting | Original | Optimized | Benefit |
|---------|----------|-----------|---------|
| Concurrent Uploads | 10 parallel | 2 parallel | 80% less memory |
| Batch Size | 50 files | 5 files | More predictable performance |

### 4. WSGI Server (Waitress)
| Setting | Original | Optimized | Benefit |
|---------|----------|-----------|---------|
| Threads | 20 threads | 4 threads | 80% less memory |
| Connections | 1000 limit | 100 limit | Faster connection handling |
| Cleanup | 30 seconds | 60 seconds | Less CPU overhead |

### 5. Caching (Redis)
| Setting | Original | Optimized | Benefit |
|---------|----------|-----------|---------|
| Default TTL | 30 minutes | 10 minutes | Less memory usage |
| Session TTL | 8 hours | 4 hours | Faster cleanup |
| Memory Limit | Unlimited | 100MB | Controlled usage |

### 6. Rate Limiting
| Setting | Original | Optimized | Benefit |
|---------|----------|-----------|---------|
| API Requests | 100/min | 50/min | Sufficient for 2-4 users |
| General | 200/min | 100/min | Less monitoring overhead |
| Webhooks | 1000/min | 200/min | Still plenty for WhatsApp |

## 📊 Performance Improvements

### Memory Usage
- **Before**: ~200-400MB
- **After**: ~80-150MB
- **Improvement**: 60-75% reduction

### Startup Time
- **Before**: 10-15 seconds
- **After**: 4-7 seconds
- **Improvement**: 50-60% faster

### Response Time (2-4 users)
- **Before**: 100-200ms
- **After**: 50-100ms
- **Improvement**: 50% faster

### CPU Usage
- **Before**: 15-25%
- **After**: 5-12%
- **Improvement**: 60-70% reduction

## 🔧 Smart Optimizations

### 1. Automatic Configuration Detection
The system automatically detects if optimized config should be used:
```python
if os.getenv('USE_OPTIMIZED_CONFIG'):
    # Use optimized settings
else:
    # Use original settings
```

### 2. Aggressive Garbage Collection
```python
# More frequent memory cleanup
gc.set_threshold(500, 8, 8)
```

### 3. Redis Memory Management
- **Eviction Policy**: LRU (Least Recently Used)
- **Memory Limit**: 100MB
- **TTL Optimization**: Shorter cache times

### 4. Excel Sync Optimization
- **Chunk Size**: 50 records at a time
- **Delay**: 0.1 seconds between chunks
- **Retries**: 2 attempts instead of 3

## ⚡ Why These Settings Work for 2-4 Users

### Database Connections
- **3 connections** = 1 per active user + 1 spare
- **Low overflow** = Handles brief spikes
- **Faster timeout** = Quick error detection

### Task Workers
- **3 workers** = Handle WhatsApp, email, files simultaneously
- **Small queue** = Immediate processing, no backlog

### File Operations
- **2 parallel uploads** = Sufficient for small team
- **Small batches** = Predictable performance

### Memory Management
- **100MB Redis limit** = Fits comfortably in 4GB RAM
- **Shorter TTL** = Less memory accumulation
- **Aggressive GC** = Frequent cleanup

## 🎯 Performance Expectations

### For 2 Users Simultaneously:
- **Response Time**: 30-60ms
- **Memory Usage**: 80-120MB
- **CPU Usage**: 5-8%
- **Excel Sync**: 15-30 seconds

### For 4 Users Simultaneously:
- **Response Time**: 50-100ms
- **Memory Usage**: 120-150MB
- **CPU Usage**: 8-12%
- **Excel Sync**: 30-45 seconds

## 🚨 When to Use Original vs Optimized

### Use Optimized Version When:
- ✅ 2-4 concurrent users maximum
- ✅ Limited system resources (4GB RAM)
- ✅ Want fastest possible response times
- ✅ Prefer lower resource usage

### Use Original Version When:
- ❌ More than 4 concurrent users expected
- ❌ High-volume WhatsApp/email sending
- ❌ Large file upload operations
- ❌ Planning to scale up significantly

## 🔄 Switching Between Versions

### To Optimized:
```cmd
start_optimized.bat
```

### To Original:
```cmd
start_multiuser.bat
```

### Environment Variable Control:
```cmd
# Enable optimized mode
set USE_OPTIMIZED_CONFIG=1

# Disable optimized mode (use original)
set USE_OPTIMIZED_CONFIG=
```

## 📈 Monitoring

The optimized version includes resource monitoring:
- **Memory usage alerts** if > 800MB
- **Performance metrics** every 60 seconds
- **System resource checks** on startup

## 🎉 Result

Your insurance portal now runs **optimally on i3 2nd gen with 4GB RAM** while still supporting all multi-user features:

- ✅ **2-4 concurrent users** without lag
- ✅ **WhatsApp messaging** with background processing
- ✅ **File uploads** with concurrent handling
- ✅ **Excel sync** with chunked processing
- ✅ **Redis caching** with memory limits
- ✅ **Database pooling** with right-sized connections
- ✅ **Real-time monitoring** with reduced overhead

**Perfect balance of performance and resource efficiency!** 🚀



================================================
FILE: POLICY_HISTORY_IMPLEMENTATION.md
================================================
# Policy History Implementation Guide

## Overview
This implementation adds a comprehensive policy history system that preserves all historical data whenever a policy is renewed or updated. Instead of overwriting existing data, the system now:

1. **Saves old policy data** to a dedicated `policy_history` table
2. **Archives old policy documents** to Google Drive Archive folder
3. **Updates current policy** with new information
4. **Maintains audit trail** with user information and timestamps

## Database Changes

### New Table: `policy_history`
- **File**: `policy_history_migration.sql`
- **Purpose**: Stores complete historical snapshots of policies before renewal/update
- **Key Features**:
  - Mirrors all fields from the main `policies` table
  - Adds metadata fields: `archived_at`, `archived_reason`, `archived_by`
  - Includes database function `archive_policy_data()` for easy archiving
  - Proper indexing for performance

### Migration Steps
1. Run the SQL migration file in your Supabase SQL editor:
   ```sql
   -- Execute the contents of policy_history_migration.sql
   ```

## Code Changes

### 1. Enhanced Renewal Service (`renewal_service.py`)

#### New Functions:
- `archive_policy_to_history(policy_id, archived_by)`: Archives current policy data to history table
- `get_policy_historical_data(policy_id)`: Retrieves all historical records for a policy
- `get_policy_with_history(policy_id)`: Gets current policy + complete history

#### Updated Functions:
- `renew_policy()`: Now accepts `archived_by` parameter and archives data before renewal
- `update_policy_payment()`: Now accepts `archived_by` parameter and archives data before update

### 2. Enhanced Routes (`routes/renewal_routes.py`)

#### New API Endpoints:
- `GET /api/get_policy_history/<policy_id>`: Get historical data for a policy
- `GET /api/get_policy_with_history/<policy_id>`: Get current + historical data
- `GET /policy_history/<policy_id>`: Web page to view policy history

#### Updated Endpoints:
- `POST /api/renew_policy`: Now passes current user email for audit trail
- `POST /api/update_policy_payment`: Now passes current user email for audit trail

### 3. New Template (`templates/policy_history.html`)
- **Purpose**: Web interface to view policy history
- **Features**:
  - Timeline view of all policy versions
  - Current version highlighted
  - Historical versions with archive metadata
  - Comparison of key fields across versions
  - Responsive design with Bootstrap

## How It Works

### When a Policy is Renewed:
1. **Archive Current Data**: Copy all current policy fields to `policy_history` table
2. **Archive Document**: Move current PDF to Archive folder in Google Drive
3. **Update Policy**: Replace current policy data with new information
4. **Upload New Document**: Upload new PDF to current location
5. **Audit Trail**: Record who performed the action and when

### Data Flow Example:
```
Original Policy (ID: 123)
├── Insurance Company: "ABC Insurance"
├── Premium: ₹10,000
├── Expiry: 2024-12-31
└── Document: policy_123.pdf

RENEWAL PROCESS:
├── Step 1: Copy to policy_history table
│   ├── original_policy_id: 123
│   ├── insurance_company: "ABC Insurance"
│   ├── net_premium: 10000
│   ├── archived_at: 2024-01-15 10:30:00
│   └── archived_by: "user@company.com"
├── Step 2: Archive document to Archive/2024-25/CLIENT_ID/MEMBER_NAME/
├── Step 3: Update current policy
│   ├── insurance_company: "XYZ Insurance"
│   ├── net_premium: 12000
│   └── policy_to: 2025-12-31
└── Step 4: Upload new document
```

## API Usage Examples

### Get Policy History
```javascript
fetch('/api/get_policy_history/123')
  .then(response => response.json())
  .then(data => {
    console.log(`Found ${data.total_records} historical records`);
    data.history.forEach(record => {
      console.log(`Version from ${record.archived_at}: ${record.insurance_company}`);
    });
  });
```

### Get Policy with Complete History
```javascript
fetch('/api/get_policy_with_history/123')
  .then(response => response.json())
  .then(data => {
    console.log('Current Policy:', data.data.current_policy);
    console.log('Historical Versions:', data.data.history);
    console.log('Total Versions:', data.data.total_versions);
  });
```

## Benefits

### 1. **Data Preservation**
- Never lose historical policy information
- Complete audit trail of all changes
- Ability to reference previous terms and conditions

### 2. **Compliance & Reporting**
- Track policy evolution over time
- Generate historical reports
- Meet regulatory requirements for data retention

### 3. **Customer Service**
- Answer customer queries about previous policy terms
- Compare current vs previous coverage
- Resolve disputes with historical evidence

### 4. **Business Intelligence**
- Analyze renewal patterns
- Track premium changes over time
- Identify trends in policy modifications

## Accessing Historical Data

### Via Web Interface:
1. Navigate to any policy in the system
2. Click "View History" or visit `/policy_history/<policy_id>`
3. View timeline of all policy versions
4. Compare current vs historical data

### Via API:
- Use the new API endpoints to integrate with other systems
- Build custom reports and dashboards
- Export historical data for analysis

## File Organization

### Google Drive Structure:
```
Root Folder/
├── CLIENT_ID/
│   └── MEMBER_NAME/
│       └── current_policy.pdf (active document)
└── Archive/
    └── 2024-25/ (financial year)
        └── CLIENT_ID/
            └── MEMBER_NAME/
                ├── policy_ARCHIVED_20240115_103000.pdf
                └── policy_ARCHIVED_20240601_143000.pdf
```

## Security & Permissions

### Database Security:
- Historical data is read-only after creation
- Proper foreign key constraints prevent orphaned records
- Row-level security can be added if needed

### Access Control:
- All history endpoints require authentication (`@login_required`)
- Audit trail tracks which user performed each action
- Historical data cannot be modified, only viewed

## Excel Integration

### Enhanced Excel Export System
The policy history system is fully integrated with your existing Excel export functionality:

#### 1. **Policy History Sheet in Main Export**
- **Location**: Added as new "Policy History" sheet in your main `insurance_data.xlsx`
- **Content**: All historical policy records with proper formatting
- **Columns**: Optimized order with key fields first (history_id, original_policy_id, client_id, etc.)
- **Formatting**: Dates formatted as YYYY-MM-DD, currency fields rounded to 2 decimals

#### 2. **Dedicated Policy History Reports**
- **API Endpoint**: `POST /api/excel/policy-history-report`
- **Filtering Options**:
  - Specific policy ID
  - Specific client ID  
  - Date range (archived_at field)
- **Multiple Sheets**:
  - **Summary**: Overview statistics and metrics
  - **Policy History Details**: Complete historical data
  - **Policy Summary**: Grouped analysis by policy

#### 3. **Report Features**
```javascript
// Generate filtered report
fetch('/api/excel/policy-history-report', {
  method: 'POST',
  headers: {'Content-Type': 'application/json'},
  body: JSON.stringify({
    policy_id: 123,           // Optional: specific policy
    client_id: "CLIENT001",   // Optional: specific client
    date_from: "2024-01-01",  // Optional: start date
    date_to: "2024-12-31"     // Optional: end date
  })
})
```

#### 4. **Enhanced Analytics**
The dedicated reports include:
- **Summary Metrics**: Total records, unique policies, unique clients, date ranges
- **Policy Evolution**: Track how individual policies changed over time
- **Premium Analysis**: Compare original vs latest premiums
- **Company Changes**: See insurance company switches
- **Version Tracking**: Count of versions per policy

### Excel File Structure
```
insurance_data.xlsx
├── Clients
├── Members  
├── Policies
├── Claims
├── Pending Policies
├── Health Insurance Details
├── Factory Insurance Details
└── Policy History (NEW)
    ├── history_id
    ├── original_policy_id
    ├── client_id
    ├── member_id
    ├── insurance_company
    ├── policy_from → policy_to
    ├── net_premium → gross_premium
    ├── archived_at
    ├── archived_reason
    └── archived_by
```

### Dedicated History Reports
```
policy_history_report_YYYYMMDD_HHMMSS.xlsx
├── Summary
│   ├── Total Historical Records
│   ├── Unique Policies
│   ├── Unique Clients
│   ├── Date Range
│   └── Report Generated
├── Policy History Details
│   └── Complete filtered historical data
└── Policy Summary
    ├── Total_Versions per policy
    ├── First_Archived → Last_Archived
    ├── Original_Premium → Latest_Premium
    └── Company_Changes tracking
```

## Future Enhancements

### Possible Additions:
1. **Health Insurance History**: Extend to track health insurance member changes
2. **Factory Insurance History**: Track factory insurance component changes  
3. **Document Versioning**: Link historical documents to specific versions
4. **Comparison Tools**: Side-by-side comparison of any two versions
5. **Restore Functionality**: Ability to restore from historical version
6. **Advanced Excel Features**: Pivot tables, charts, and automated analysis
7. **Scheduled Reports**: Automatic generation of monthly/yearly history reports

## Troubleshooting

### Common Issues:
1. **Migration Fails**: Ensure Supabase permissions are correct
2. **History Not Saving**: Check database function permissions
3. **Documents Not Archiving**: Verify Google Drive API access
4. **Performance Issues**: Ensure indexes are created properly

### Monitoring:
- Check application logs for archiving errors
- Monitor database growth in `policy_history` table
- Verify Google Drive Archive folder structure

## Testing the Implementation

### Manual Testing Steps:
1. **Run Migration**: Execute `policy_history_migration.sql`
2. **Renew a Policy**: Use existing renewal functionality
3. **Check History**: Visit `/policy_history/<policy_id>`
4. **Verify Data**: Confirm historical data is preserved
5. **Test APIs**: Use browser dev tools to test API endpoints

### Verification Checklist:
- [ ] Migration runs successfully
- [ ] Historical data is saved before renewal
- [ ] Current policy is updated correctly
- [ ] Documents are archived properly
- [ ] History page displays correctly
- [ ] API endpoints return expected data
- [ ] Audit trail includes user information

This implementation ensures that your insurance system maintains complete historical records while providing easy access to both current and past policy information.



================================================
FILE: policy_history_migration.sql
================================================
-- Migration to create policy_history table for preserving historical policy data
-- Run this SQL script in your Supabase SQL editor

-- Create policy_history table with all fields from policies table
CREATE TABLE IF NOT EXISTS public.policy_history (
    history_id SERIAL PRIMARY KEY,
    original_policy_id INTEGER NOT NULL,
    client_id TEXT NOT NULL,
    member_id INTEGER NOT NULL,
    insurance_company TEXT,
    product_name TEXT,
    policy_number TEXT,
    one_time_insurance BOOLEAN DEFAULT false,
    commission_received BOOLEAN DEFAULT false,
    file_path TEXT,
    drive_file_id TEXT,
    drive_path TEXT,
    drive_url TEXT,
    payment_date DATE,
    agent_name TEXT,
    policy_from DATE,
    policy_to DATE,
    payment_details TEXT,
    net_premium NUMERIC(10,2),
    addon_premium NUMERIC(10,2),
    tp_tr_premium NUMERIC(10,2),
    gst_percentage NUMERIC(5,2),
    gross_premium NUMERIC(10,2),
    commission_percentage NUMERIC(5,2),
    commission_amount NUMERIC(10,2),
    business_type TEXT,
    group_name TEXT,
    subgroup_name TEXT,
    remarks TEXT,
    sum_insured NUMERIC(12,2),
    last_reminder_sent TIMESTAMP WITH TIME ZONE,
    renewed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Historical metadata
    archived_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    archived_reason TEXT DEFAULT 'renewal',
    archived_by TEXT,
    
    -- Foreign key reference to original policy
    CONSTRAINT fk_policy_history_original_policy 
        FOREIGN KEY (original_policy_id) 
        REFERENCES public.policies(policy_id) 
        ON DELETE CASCADE
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_policy_history_original_policy_id ON public.policy_history (original_policy_id);
CREATE INDEX IF NOT EXISTS idx_policy_history_client_id ON public.policy_history (client_id);
CREATE INDEX IF NOT EXISTS idx_policy_history_archived_at ON public.policy_history (archived_at);
CREATE INDEX IF NOT EXISTS idx_policy_history_policy_to ON public.policy_history (policy_to);

-- Add comments to document the table
COMMENT ON TABLE public.policy_history IS 'Historical records of policies before renewal or updates';
COMMENT ON COLUMN public.policy_history.original_policy_id IS 'Reference to the current policy record';
COMMENT ON COLUMN public.policy_history.archived_at IS 'When this historical record was created';
COMMENT ON COLUMN public.policy_history.archived_reason IS 'Reason for archiving (renewal, update, etc.)';
COMMENT ON COLUMN public.policy_history.archived_by IS 'User who performed the action that created this historical record';

-- Create a function to automatically copy policy data to history
CREATE OR REPLACE FUNCTION public.archive_policy_data(
    p_policy_id INTEGER,
    p_reason TEXT DEFAULT 'renewal',
    p_archived_by TEXT DEFAULT NULL
) RETURNS INTEGER AS $$
DECLARE
    v_history_id INTEGER;
BEGIN
    -- Insert current policy data into history table
    INSERT INTO public.policy_history (
        original_policy_id, client_id, member_id, insurance_company, product_name,
        policy_number, one_time_insurance, commission_received, file_path,
        drive_file_id, drive_path, drive_url, payment_date, agent_name,
        policy_from, policy_to, payment_details, net_premium, addon_premium,
        tp_tr_premium, gst_percentage, gross_premium, commission_percentage,
        commission_amount, business_type, group_name, subgroup_name, remarks,
        sum_insured, last_reminder_sent, renewed_at, created_at,
        archived_reason, archived_by
    )
    SELECT 
        policy_id, client_id, member_id, insurance_company, product_name,
        policy_number, one_time_insurance, commission_received, file_path,
        drive_file_id, drive_path, drive_url, payment_date, agent_name,
        policy_from, policy_to, payment_details, net_premium, addon_premium,
        tp_tr_premium, gst_percentage, gross_premium, commission_percentage,
        commission_amount, business_type, group_name, subgroup_name, remarks,
        sum_insured, last_reminder_sent, renewed_at, created_at,
        p_reason, p_archived_by
    FROM public.policies 
    WHERE policy_id = p_policy_id
    RETURNING history_id INTO v_history_id;
    
    RETURN v_history_id;
END;
$$ LANGUAGE plpgsql;

-- Grant necessary permissions
GRANT SELECT, INSERT ON public.policy_history TO authenticated;
GRANT USAGE ON SEQUENCE public.policy_history_history_id_seq TO authenticated;
GRANT EXECUTE ON FUNCTION public.archive_policy_data(INTEGER, TEXT, TEXT) TO authenticated;

-- Verify the table was created successfully
SELECT 
    table_name, 
    column_name, 
    data_type, 
    is_nullable 
FROM information_schema.columns 
WHERE table_name = 'policy_history' 
ORDER BY ordinal_position;



================================================
FILE: production_integration.py
================================================
"""
Production Integration Script
Ensures all production optimizations are properly integrated
"""

import os
import sys
import importlib.util

def check_production_files():
    """Check if all production optimization files exist"""
    required_files = {
        'database.py': 'Database connection manager with pooling',
        'static/js/performance.js': 'Frontend performance optimizations',
        'combined_app.py': 'Production-optimized Flask application',
        'deploy_production.py': 'Automated deployment script'
    }
    
    missing_files = []
    for file_path, description in required_files.items():
        if not os.path.exists(file_path):
            missing_files.append(f"{file_path} - {description}")
    
    return missing_files

def integrate_database_manager():
    """Integrate database manager into the application"""
    try:
        # Check if database.py exists and can be imported
        if os.path.exists('database.py'):
            spec = importlib.util.spec_from_file_location("database", "database.py")
            database_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(database_module)
            
            # Test database manager initialization
            db_manager = database_module.db_manager
            print("✅ Database manager successfully integrated")
            return True
        else:
            print("❌ database.py not found")
            return False
    except Exception as e:
        print(f"❌ Database manager integration failed: {e}")
        return False

def check_performance_js_integration():
    """Check if performance.js is included in templates"""
    template_files = ['templates/dashboard.html', 'templates/base.html']
    integrated = False
    
    for template_file in template_files:
        if os.path.exists(template_file):
            with open(template_file, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'performance.js' in content:
                    print(f"✅ performance.js integrated in {template_file}")
                    integrated = True
                    break
    
    if not integrated:
        print("❌ performance.js not integrated in templates")
    
    return integrated

def validate_production_setup():
    """Validate the complete production setup"""
    print("🔍 PRODUCTION SETUP VALIDATION")
    print("=" * 50)
    
    # Check required files
    missing_files = check_production_files()
    if missing_files:
        print("❌ Missing production files:")
        for file in missing_files:
            print(f"   - {file}")
    else:
        print("✅ All production files present")
    
    # Check database integration
    db_integrated = integrate_database_manager()
    
    # Check performance.js integration
    perf_integrated = check_performance_js_integration()
    
    # Check environment variables
    required_env_vars = ['SUPABASE_URL', 'SUPABASE_KEY', 'GOOGLE_CLIENT_ID', 'GOOGLE_CLIENT_SECRET']
    missing_env_vars = []
    
    for var in required_env_vars:
        if not os.getenv(var):
            missing_env_vars.append(var)
    
    if missing_env_vars:
        print(f"❌ Missing environment variables: {', '.join(missing_env_vars)}")
    else:
        print("✅ All required environment variables set")
    
    # Overall status
    print("\n" + "=" * 50)
    if not missing_files and db_integrated and perf_integrated and not missing_env_vars:
        print("🚀 PRODUCTION READY - All optimizations integrated!")
        return True
    else:
        print("⚠️  PRODUCTION SETUP INCOMPLETE - Some optimizations missing")
        return False

if __name__ == "__main__":
    validate_production_setup()



================================================
FILE: realtime_cleanup_service.py
================================================
"""
Real-time Renewal File Cleanup Service
Runs continuously, checking every minute for status changes and cleaning up files immediately
"""
import time
import threading
import logging
from datetime import datetime
from typing import Dict, List
from renewal_file_cleanup import RenewalFileCleanup
from whatsapp_service import WhatsAppService

# Set up logging
logger = logging.getLogger(__name__)


class RealtimeCleanupService:
    """Background service that monitors WhatsApp status and cleans up files in real-time"""
    
    def __init__(self, check_interval_seconds: int = 60):
        self.check_interval = check_interval_seconds
        self.cleanup_service = RenewalFileCleanup()
        self.whatsapp_service = WhatsAppService()
        self.running = False
        self.thread = None
        
    def start(self):
        """Start the background cleanup service"""
        if self.running:
            logger.warning("Cleanup service is already running")
            return
            
        self.running = True
        self.thread = threading.Thread(target=self._run_service, daemon=True)
        self.thread.start()
        logger.info(f"Real-time cleanup service started (checking every {self.check_interval} seconds)")
    
    def stop(self):
        """Stop the background cleanup service"""
        self.running = False
        if self.thread:
            self.thread.join(timeout=5)
        logger.info("Real-time cleanup service stopped")
    
    def _run_service(self):
        """Main service loop - runs continuously"""
        logger.info("Real-time cleanup service loop started")
        
        while self.running:
            try:
                # Step 1: Refresh status for pending messages
                self._refresh_pending_statuses()
                
                # Step 2: Clean up files based on updated statuses
                self._perform_cleanup()
                
                # Wait for next check
                time.sleep(self.check_interval)
                
            except Exception as e:
                logger.error(f"Error in cleanup service loop: {e}")
                time.sleep(self.check_interval)  # Continue running even if there's an error
    
    def _refresh_pending_statuses(self):
        """Refresh status for messages that might have changed"""
        try:
            # Get messages that are in transitional states (not final)
            from supabase import create_client
            from dynamic_config import Config
            
            supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
            
            # Get messages in non-final states
            pending_statuses = ['queued', 'sending', 'sent']
            result = supabase.table('whatsapp_logs').select(
                'message_sid, status, sent_at'
            ).in_('status', pending_statuses).execute()
            
            if not result.data:
                return
            
            updated_count = 0
            for log in result.data:
                message_sid = log['message_sid']
                
                # Check if message is old enough to warrant status check
                sent_at = log.get('sent_at', '')
                try:
                    sent_time = datetime.fromisoformat(sent_at.replace('Z', '+00:00'))
                    minutes_since_sent = (datetime.now() - sent_time.replace(tzinfo=None)).total_seconds() / 60
                    
                    # Only check status for messages older than 30 seconds to avoid spam
                    if minutes_since_sent >= 0.5:
                        if self.whatsapp_service.refresh_message_status(message_sid):
                            updated_count += 1
                except:
                    # If we can't parse the date, still try to refresh
                    if self.whatsapp_service.refresh_message_status(message_sid):
                        updated_count += 1
            
            if updated_count > 0:
                logger.info(f"Refreshed status for {updated_count} messages")
                
        except Exception as e:
            logger.error(f"Error refreshing pending statuses: {e}")
    
    def _perform_cleanup(self):
        """Perform file cleanup based on current statuses"""
        try:
            # Get files ready for cleanup (1 minute minimum age)
            files_to_cleanup = self.cleanup_service.get_files_ready_for_cleanup(min_age_minutes=1)
            
            if not files_to_cleanup:
                return
            
            # Perform cleanup
            results = self.cleanup_service.cleanup_files(files_to_cleanup, dry_run=False)
            
            deleted_count = len(results['deleted_files'])
            if deleted_count > 0:
                size_mb = results['total_size_freed'] / (1024 * 1024)
                logger.info(f"Real-time cleanup: Deleted {deleted_count} files, freed {size_mb:.2f} MB")
                
                # Log details of deleted files
                for file_info in results['deleted_files']:
                    logger.info(f"  - {file_info['filename']}: {file_info['reason']}")
            
        except Exception as e:
            logger.error(f"Error performing cleanup: {e}")
    
    def get_status(self) -> Dict:
        """Get current service status"""
        return {
            'running': self.running,
            'check_interval_seconds': self.check_interval,
            'thread_alive': self.thread.is_alive() if self.thread else False
        }


# Global service instance
_cleanup_service_instance = None


def start_realtime_cleanup_service(check_interval_seconds: int = 60):
    """Start the global real-time cleanup service"""
    global _cleanup_service_instance
    
    if _cleanup_service_instance and _cleanup_service_instance.running:
        logger.warning("Real-time cleanup service is already running")
        return _cleanup_service_instance
    
    _cleanup_service_instance = RealtimeCleanupService(check_interval_seconds)
    _cleanup_service_instance.start()
    return _cleanup_service_instance


def stop_realtime_cleanup_service():
    """Stop the global real-time cleanup service"""
    global _cleanup_service_instance
    
    if _cleanup_service_instance:
        _cleanup_service_instance.stop()
        _cleanup_service_instance = None


def get_realtime_cleanup_service():
    """Get the current service instance"""
    return _cleanup_service_instance


if __name__ == "__main__":
    # Run as standalone service
    import sys
    
    print("Real-time Renewal File Cleanup Service")
    print("=" * 40)
    print("This service will:")
    print("• Check message status every minute")
    print("• Delete files 1 minute after delivery/failure")
    print("• Delete stuck files after 5 minutes")
    print("• Delete undelivered files after 30 minutes")
    print("• Run continuously until stopped")
    print()
    
    # Set up logging to console
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    service = start_realtime_cleanup_service(check_interval_seconds=60)
    
    try:
        print("Service started. Press Ctrl+C to stop...")
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nStopping service...")
        stop_realtime_cleanup_service()
        print("Service stopped.")
        sys.exit(0)



================================================
FILE: RENEWAL_FILE_CLEANUP.md
================================================
# Renewal File Cleanup System

## Overview
The Renewal File Cleanup System automatically manages renewal files in `static/renewals/` based on WhatsApp message delivery status. This prevents disk space issues by removing files that are no longer needed.

## 🎯 **How It Works**

### **Smart Cleanup Logic**
The system uses WhatsApp delivery status to determine when files can be safely deleted:

1. **✅ Delivered/Read Messages** - Files deleted after 1 hour (customer received the file)
2. **❌ Failed Messages** - Files deleted after 2 hours (delivery unsuccessful)
3. **⏳ Stuck Messages** - Files deleted after 6 hours (likely failed)
4. **📤 Sent but Not Delivered** - Files deleted after 24 hours (probably won't deliver)
5. **🗂️ Orphaned Files** - Files without WhatsApp logs deleted after 7 days

### **Two Types of Cleanup**

#### **Status-Based Cleanup**
- Uses WhatsApp logs to determine file fate
- Links files to message delivery status
- Safe and intelligent deletion

#### **Orphaned File Cleanup**
- Removes files not tracked in WhatsApp logs
- Cleans up files from failed uploads or system errors
- Age-based deletion (7+ days old)

## 🚀 **Usage**

### **Manual Cleanup (Web Interface)**

1. **Navigate to WhatsApp Logs**
   - Go to Dashboard → WhatsApp Logs
   
2. **Preview Cleanup**
   - Click "Preview File Cleanup" (orange button)
   - See what files would be deleted
   - Get size estimates

3. **Run Cleanup**
   - Click "Clean Up Files" (red button)
   - Confirm deletion
   - View cleanup results

### **Manual Cleanup (Command Line)**

```bash
# Preview what would be deleted (dry run)
python renewal_file_cleanup.py --dry-run

# Actually delete files
python renewal_file_cleanup.py
```

### **Automated Daily Cleanup**

Set up a cron job for automatic daily cleanup:

```bash
# Edit crontab
crontab -e

# Add this line to run cleanup daily at 2 AM
0 2 * * * /path/to/your/project/run_daily_cleanup.py
```

## 📊 **Cleanup Criteria**

### **Files Ready for Deletion**

| Message Status | Wait Time | Reason |
|---------------|-----------|---------|
| `delivered` | 1 hour | Customer received file |
| `read` | 1 hour | Customer opened file |
| `failed` | 2 hours | Delivery failed permanently |
| `undelivered` | 2 hours | Could not deliver |
| `queued`/`sending` | 6 hours | Stuck in system |
| `sent` | 24 hours | Sent but not delivered |

### **Orphaned Files**
- Files in `static/renewals/` without WhatsApp log entries
- Older than 7 days
- Usually from failed uploads or system errors

## 🔧 **API Endpoints**

### **Preview Cleanup**
```http
GET /api/whatsapp/cleanup_preview
```
Returns list of files that would be deleted without actually deleting them.

### **Run Cleanup**
```http
POST /api/whatsapp/cleanup_files
Content-Type: application/json

{
    "dry_run": false
}
```

### **Response Format**
```json
{
    "success": true,
    "results": {
        "timestamp": "2025-10-21T18:53:28",
        "total_files_processed": 15,
        "total_size_freed": 52428800,
        "summary": "Deleted 15 files, freed 50.00 MB",
        "status_based_cleanup": {
            "total_files": 10,
            "deleted_files": [...],
            "failed_deletions": []
        },
        "orphaned_cleanup": {
            "total_orphaned": 5,
            "deleted_orphaned": [...],
            "failed_deletions": []
        }
    }
}
```

## 🛡️ **Safety Features**

### **Minimum Age Requirements**
- Files must be at least 2 hours old before cleanup
- Prevents deletion of recently uploaded files
- Gives time for message delivery

### **Status Verification**
- Only deletes files with confirmed delivery status
- Checks multiple conditions before deletion
- Logs all deletion decisions

### **Dry Run Mode**
- Test cleanup without actually deleting files
- Preview what would be deleted
- Estimate space savings

### **Comprehensive Logging**
- All cleanup actions logged
- Failed deletions tracked
- Audit trail for compliance

## 📈 **Benefits**

### **Disk Space Management**
- Prevents `static/renewals/` from growing indefinitely
- Automatic cleanup of successful deliveries
- Removes failed upload files

### **Performance**
- Faster file system operations
- Reduced backup sizes
- Better server performance

### **Maintenance**
- No manual file management needed
- Automatic orphaned file cleanup
- Intelligent deletion based on business logic

## 🔍 **Monitoring**

### **Cleanup Logs**
Check `logs/renewal_cleanup.log` for:
- Daily cleanup results
- Failed deletions
- Space freed statistics

### **Web Interface Statistics**
The WhatsApp logs page shows:
- Total messages sent
- Delivery success rates
- File cleanup history

## ⚙️ **Configuration**

### **Timing Settings**
You can adjust cleanup timing in `renewal_file_cleanup.py`:

```python
# Minimum age before cleanup (default: 2 hours)
files_to_cleanup = cleanup_service.get_files_ready_for_cleanup(min_age_hours=2)

# Orphaned file age (default: 7 days)
orphaned_results = cleanup_service.cleanup_orphaned_files(max_age_days=7)
```

### **Directory Settings**
The cleanup service automatically finds the renewals directory:
```python
self.static_renewals_dir = os.path.join(os.path.dirname(__file__), 'static', 'renewals')
```

## 🚨 **Troubleshooting**

### **Files Not Being Deleted**
1. Check WhatsApp logs for message status
2. Verify file age (must be 2+ hours old)
3. Check file permissions
4. Review cleanup logs for errors

### **Orphaned Files Remaining**
1. Ensure files are 7+ days old
2. Check if files have corresponding WhatsApp logs
3. Verify directory permissions

### **Cleanup Errors**
1. Check `logs/renewal_cleanup.log`
2. Verify file system permissions
3. Ensure files aren't locked by other processes

## 📋 **Best Practices**

### **Regular Monitoring**
- Check cleanup logs weekly
- Monitor disk space usage
- Review failed deletions

### **Backup Strategy**
- Ensure important files are backed up before cleanup
- Consider archiving instead of deletion for compliance
- Test restore procedures

### **Scheduling**
- Run cleanup during low-traffic hours (2-4 AM)
- Avoid running during backup windows
- Monitor system resources during cleanup

## 🔄 **Integration with WhatsApp Logs**

The cleanup system is fully integrated with the WhatsApp logs feature:

1. **Message Tracking** - Every renewal reminder is logged
2. **Status Updates** - Delivery status determines cleanup eligibility  
3. **File Linking** - Files are linked to specific messages
4. **Audit Trail** - Complete history of file lifecycle

This ensures that files are only deleted when it's safe and appropriate based on actual delivery confirmation from Twilio.

## 📊 **Example Cleanup Results**

```
Cleanup completed: Deleted 12 files, freed 45.67 MB
├── Status-based cleanup: 8 files
│   ├── 5 delivered messages (files no longer needed)
│   ├── 2 failed messages (delivery unsuccessful)  
│   └── 1 stuck message (likely failed)
└── Orphaned cleanup: 4 files
    └── 4 old files without WhatsApp logs
```

This intelligent cleanup system ensures your renewal files directory stays clean and manageable while preserving files that customers might still need to access.



================================================
FILE: renewal_file_cleanup.py
================================================
"""
Renewal File Cleanup Service
Automatically cleans up renewal files from static/renewals based on WhatsApp delivery status
"""
import os
import logging
import time
from datetime import datetime, timedelta
from typing import List, Dict
from supabase import create_client
from config import Config
import re

# Set up logging
logger = logging.getLogger(__name__)

# Initialize Supabase client
supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)


class RenewalFileCleanup:
    """Service for cleaning up renewal files based on WhatsApp delivery status"""
    
    def __init__(self):
        self.static_renewals_dir = os.path.join(os.path.dirname(__file__), 'static', 'renewals')
        
    def get_files_ready_for_cleanup(self, min_age_minutes: int = 1) -> List[Dict]:
        """
        Get renewal files that are ready for cleanup based on message status
        
        Args:
            min_age_minutes: Minimum age of files before considering cleanup (default 1 minute)
        
        Returns:
            List of files ready for cleanup with their status info
        """
        try:
            # Calculate cutoff time
            cutoff_time = datetime.now() - timedelta(minutes=min_age_minutes)
            cutoff_iso = cutoff_time.isoformat()
            
            # Get WhatsApp logs for renewal reminders that are old enough
            result = supabase.table('whatsapp_logs').select(
                'message_sid, media_url, status, error_code, sent_at, last_status_check'
            ).eq('message_type', 'renewal_reminder').lt('sent_at', cutoff_iso).execute()
            
            if not result.data:
                return []
            
            files_to_cleanup = []
            
            for log in result.data:
                media_url = log.get('media_url', '')
                status = log.get('status', '')
                
                # Extract filename from media_url (e.g., "static/renewals/filename.pdf")
                if media_url and 'static/renewals/' in media_url:
                    filename = media_url.split('static/renewals/')[-1]
                    file_path = os.path.join(self.static_renewals_dir, filename)
                    
                    # Check if file exists
                    if os.path.exists(file_path):
                        # Determine if file is ready for cleanup based on status
                        should_cleanup = self._should_cleanup_file(log)
                        
                        if should_cleanup:
                            files_to_cleanup.append({
                                'filename': filename,
                                'file_path': file_path,
                                'message_sid': log['message_sid'],
                                'status': status,
                                'reason': self._get_cleanup_reason(log),
                                'sent_at': log['sent_at'],
                                'last_status_check': log['last_status_check']
                            })
            
            return files_to_cleanup
            
        except Exception as e:
            logger.error(f"Error getting files ready for cleanup: {e}")
            return []
    
    def _should_cleanup_file(self, log: Dict) -> bool:
        """
        Determine if a file should be cleaned up based on message status
        
        Args:
            log: WhatsApp log entry
            
        Returns:
            True if file should be cleaned up
        """
        status = log.get('status', '')
        sent_at = log.get('sent_at', '')
        
        # Parse sent_at timestamp
        try:
            sent_time = datetime.fromisoformat(sent_at.replace('Z', '+00:00'))
            minutes_since_sent = (datetime.now() - sent_time.replace(tzinfo=None)).total_seconds() / 60
        except:
            minutes_since_sent = 0
        
        # Aggressive cleanup conditions:
        
        # 1. Message was delivered or read - cleanup immediately after 1 minute
        if status in ['delivered', 'read'] and minutes_since_sent >= 1:
            return True
        
        # 2. Message failed permanently - cleanup immediately after 1 minute
        if status in ['failed', 'undelivered'] and minutes_since_sent >= 1:
            return True
        
        # 3. Message stuck in sending/queued for more than 5 minutes - likely failed
        if status in ['queued', 'sending'] and minutes_since_sent >= 5:
            return True
        
        # 4. Message sent but not delivered after 30 minutes - cleanup
        if status == 'sent' and minutes_since_sent >= 30:
            return True
        
        return False
    
    def _get_cleanup_reason(self, log: Dict) -> str:
        """Get human-readable reason for cleanup"""
        status = log.get('status', '')
        
        if status in ['delivered', 'read']:
            return f"Message {status} - file no longer needed"
        elif status in ['failed', 'undelivered']:
            return f"Message {status} - delivery unsuccessful"
        elif status in ['queued', 'sending']:
            return "Message stuck in queue for 5+ minutes - likely failed"
        elif status == 'sent':
            return "Message sent but not delivered after 30 minutes"
        else:
            return "Unknown status - cleanup based on age"
    
    def cleanup_files(self, files_to_cleanup: List[Dict], dry_run: bool = False) -> Dict:
        """
        Clean up the specified files
        
        Args:
            files_to_cleanup: List of files to cleanup
            dry_run: If True, don't actually delete files, just report what would be deleted
            
        Returns:
            Dictionary with cleanup results
        """
        results = {
            'total_files': len(files_to_cleanup),
            'deleted_files': [],
            'failed_deletions': [],
            'total_size_freed': 0,
            'dry_run': dry_run
        }
        
        for file_info in files_to_cleanup:
            try:
                file_path = file_info['file_path']
                filename = file_info['filename']
                
                # Get file size before deletion
                if os.path.exists(file_path):
                    file_size = os.path.getsize(file_path)
                    
                    if not dry_run:
                        # Actually delete the file
                        os.remove(file_path)
                        logger.info(f"Deleted renewal file: {filename} (Reason: {file_info['reason']})")
                    else:
                        logger.info(f"[DRY RUN] Would delete: {filename} (Reason: {file_info['reason']})")
                    
                    results['deleted_files'].append({
                        'filename': filename,
                        'size': file_size,
                        'reason': file_info['reason'],
                        'message_sid': file_info['message_sid'],
                        'status': file_info['status']
                    })
                    results['total_size_freed'] += file_size
                
            except Exception as e:
                logger.error(f"Failed to delete {file_info['filename']}: {e}")
                results['failed_deletions'].append({
                    'filename': file_info['filename'],
                    'error': str(e)
                })
        
        return results
    
    def cleanup_orphaned_files(self, max_age_days: int = 7, dry_run: bool = False) -> Dict:
        """
        Clean up orphaned files that don't have corresponding WhatsApp logs
        
        Args:
            max_age_days: Maximum age of orphaned files before cleanup
            dry_run: If True, don't actually delete files
            
        Returns:
            Dictionary with cleanup results
        """
        results = {
            'total_orphaned': 0,
            'deleted_orphaned': [],
            'failed_deletions': [],
            'total_size_freed': 0,
            'dry_run': dry_run
        }
        
        try:
            if not os.path.exists(self.static_renewals_dir):
                return results
            
            # Get all files in renewals directory
            all_files = os.listdir(self.static_renewals_dir)
            cutoff_time = datetime.now() - timedelta(days=max_age_days)
            
            # Get all media URLs from WhatsApp logs
            logs_result = supabase.table('whatsapp_logs').select('media_url').execute()
            logged_files = set()
            
            for log in logs_result.data or []:
                media_url = log.get('media_url', '')
                if media_url and 'static/renewals/' in media_url:
                    filename = media_url.split('static/renewals/')[-1]
                    logged_files.add(filename)
            
            # Check each file
            for filename in all_files:
                file_path = os.path.join(self.static_renewals_dir, filename)
                
                # Skip directories
                if os.path.isdir(file_path):
                    continue
                
                # Check if file is orphaned (not in WhatsApp logs)
                if filename not in logged_files:
                    # Check file age
                    file_mtime = datetime.fromtimestamp(os.path.getmtime(file_path))
                    
                    if file_mtime < cutoff_time:
                        results['total_orphaned'] += 1
                        
                        try:
                            file_size = os.path.getsize(file_path)
                            
                            if not dry_run:
                                os.remove(file_path)
                                logger.info(f"Deleted orphaned file: {filename}")
                            else:
                                logger.info(f"[DRY RUN] Would delete orphaned file: {filename}")
                            
                            results['deleted_orphaned'].append({
                                'filename': filename,
                                'size': file_size,
                                'age_days': (datetime.now() - file_mtime).days
                            })
                            results['total_size_freed'] += file_size
                            
                        except Exception as e:
                            logger.error(f"Failed to delete orphaned file {filename}: {e}")
                            results['failed_deletions'].append({
                                'filename': filename,
                                'error': str(e)
                            })
            
        except Exception as e:
            logger.error(f"Error during orphaned file cleanup: {e}")
        
        return results
    
    def run_full_cleanup(self, dry_run: bool = False) -> Dict:
        """
        Run complete cleanup process
        
        Args:
            dry_run: If True, don't actually delete files
            
        Returns:
            Complete cleanup results
        """
        logger.info(f"Starting renewal file cleanup {'(DRY RUN)' if dry_run else ''}")
        
        # 1. Cleanup files based on WhatsApp status
        files_to_cleanup = self.get_files_ready_for_cleanup()
        status_cleanup_results = self.cleanup_files(files_to_cleanup, dry_run)
        
        # 2. Cleanup orphaned files
        orphaned_cleanup_results = self.cleanup_orphaned_files(dry_run=dry_run)
        
        # Combine results
        total_results = {
            'timestamp': datetime.now().isoformat(),
            'dry_run': dry_run,
            'status_based_cleanup': status_cleanup_results,
            'orphaned_cleanup': orphaned_cleanup_results,
            'total_files_processed': status_cleanup_results['total_files'] + orphaned_cleanup_results['total_orphaned'],
            'total_size_freed': status_cleanup_results['total_size_freed'] + orphaned_cleanup_results['total_size_freed'],
            'summary': self._generate_summary(status_cleanup_results, orphaned_cleanup_results)
        }
        
        logger.info(f"Cleanup completed: {total_results['summary']}")
        return total_results
    
    def _generate_summary(self, status_results: Dict, orphaned_results: Dict) -> str:
        """Generate human-readable summary"""
        total_deleted = len(status_results['deleted_files']) + len(orphaned_results['deleted_orphaned'])
        total_size_mb = (status_results['total_size_freed'] + orphaned_results['total_size_freed']) / (1024 * 1024)
        
        if total_deleted == 0:
            return "No files needed cleanup"
        
        return f"Deleted {total_deleted} files, freed {total_size_mb:.2f} MB"


def run_cleanup_job(dry_run: bool = False):
    """Standalone function to run cleanup job"""
    cleanup_service = RenewalFileCleanup()
    return cleanup_service.run_full_cleanup(dry_run=dry_run)


if __name__ == "__main__":
    # Run as standalone script
    import sys
    
    dry_run = '--dry-run' in sys.argv
    
    print("Renewal File Cleanup Service")
    print("=" * 40)
    
    if dry_run:
        print("🔍 Running in DRY RUN mode - no files will be deleted")
    
    results = run_cleanup_job(dry_run=dry_run)
    
    print(f"\n📊 Cleanup Results:")
    print(f"   • {results['summary']}")
    print(f"   • Status-based cleanup: {len(results['status_based_cleanup']['deleted_files'])} files")
    print(f"   • Orphaned file cleanup: {len(results['orphaned_cleanup']['deleted_orphaned'])} files")
    
    if results['status_based_cleanup']['failed_deletions'] or results['orphaned_cleanup']['failed_deletions']:
        print(f"   ⚠️  Some deletions failed - check logs for details")
    
    print(f"\n✅ Cleanup completed at {results['timestamp']}")



================================================
FILE: renewal_service.py
================================================
import os
import tempfile
import io
from datetime import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload
from supabase import create_client
from dynamic_config import Config
import logging
from email_service import send_policy_email, indian_date_filter

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize Supabase
supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)

# Google Drive setup
SCOPES = ["https://www.googleapis.com/auth/drive"]
SERVICE_ACCOUNT_FILE = Config.GOOGLE_CREDENTIALS_FILE

# Get Archive folder ID from config
ARCHIVE_FOLDER_ID = Config.ARCHIVE_FOLDER_ID


def get_drive_service():
    """Initialize and return Google Drive service"""
    try:
        creds = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES
        )
        return build("drive", "v3", credentials=creds)
    except Exception as e:
        logger.error(f"Error initializing Google Drive service: {e}")
        return None


def find_or_create_folder(parent_folder_id, folder_name):
    """Find existing folder or create new one in parent folder"""
    try:
        drive_service = get_drive_service()
        if not drive_service:
            return None
            
        logger.info(f"Looking for folder '{folder_name}' in parent {parent_folder_id}")
        
        # Search for existing folder
        query = f"'{parent_folder_id}' in parents and mimeType='application/vnd.google-apps.folder' and name='{folder_name}' and trashed=false"
        results = drive_service.files().list(
            q=query,
            fields="files(id, name)",
            supportsAllDrives=True,
            includeItemsFromAllDrives=True
        ).execute()
        
        folders = results.get("files", [])
        
        if folders:
            logger.info(f"Found existing folder: {folders[0]['name']} (ID: {folders[0]['id']})")
            return folders[0]
        else:
            # Create new folder
            logger.info(f"Creating new folder: {folder_name}")
            folder_metadata = {
                "name": folder_name,
                "mimeType": "application/vnd.google-apps.folder",
                "parents": [parent_folder_id]
            }
            
            created_folder = drive_service.files().create(
                body=folder_metadata,
                fields="id, name",
                supportsAllDrives=True
            ).execute()
            
            logger.info(f"Created folder: {created_folder['name']} (ID: {created_folder['id']})")
            return created_folder
            
    except Exception as e:
        logger.error(f"Error finding/creating folder: {e}")
        return None


def archive_file_in_drive(file_id, original_filename, client_id, member_name):
    """
    Move file to Archive folder with year-based client/member structure

    Args:
        file_id (str): Google Drive file ID to archive
        original_filename (str): Original filename
        client_id (str): Client ID for folder structure
        member_name (str): Member name for folder structure

    Returns:
        tuple: (success: bool, message: str, archived_file_id: str)
    """
    try:
        drive_service = get_drive_service()
        if not drive_service:
            return False, "Could not initialize Drive service", None

        # Calculate financial year
        current_year = datetime.now().year
        if datetime.now().month >= 4:  # April onwards is new financial year
            financial_year = f"{current_year}-{str(current_year + 1)[-2:]}"
        else:
            financial_year = f"{current_year - 1}-{str(current_year)[-2:]}"

        # Get root folder ID (assuming it's the same as used in policies.py)
        ROOT_FOLDER_ID = "0AOc3bRLhlrgzUk9PVA"

        # Step 1: Find or create Archive folder
        archive_folder = find_or_create_folder(ROOT_FOLDER_ID, "Archive")
        if not archive_folder:
            return False, "Could not create Archive folder", None

        # Step 2: Find or create financial year folder
        year_folder = find_or_create_folder(archive_folder['id'], financial_year)
        if not year_folder:
            return False, f"Could not create {financial_year} folder", None

        # Step 3: Find or create client folder
        client_folder = find_or_create_folder(year_folder['id'], client_id)
        if not client_folder:
            return False, f"Could not create {client_id} folder", None

        # Step 4: Find or create member folder
        member_folder = find_or_create_folder(client_folder['id'], member_name)
        if not member_folder:
            return False, f"Could not create {member_name} folder", None

        # Step 5: Create archived filename with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        name_parts = os.path.splitext(original_filename)
        archived_filename = f"{name_parts[0]}_ARCHIVED_{timestamp}{name_parts[1]}"

        # Step 6: Get current file parents
        file_metadata = drive_service.files().get(
            fileId=file_id,
            fields="name, parents",
            supportsAllDrives=True
        ).execute()

        # Step 7: Move file to archive location
        archived_file = drive_service.files().update(
            fileId=file_id,
            body={'name': archived_filename},
            addParents=member_folder['id'],
            removeParents=','.join(file_metadata.get('parents', [])),
            fields='id, name, webViewLink',
            supportsAllDrives=True
        ).execute()

        archive_path = f"Archive/{financial_year}/{client_id}/{member_name}/{archived_filename}"
        logger.info(f"Successfully archived file to: {archive_path}")
        return True, f"File archived to {archive_path}", archived_file['id']

    except Exception as e:
        logger.error(f"Error archiving file: {e}")
        return False, str(e), None


def delete_file_from_drive(file_id):
    """Delete a file from Google Drive (kept for backwards compatibility)"""
    try:
        drive_service = get_drive_service()
        if not drive_service:
            return False, "Could not initialize Drive service"

        drive_service.files().delete(fileId=file_id, supportsAllDrives=True).execute()
        logger.info(f"Successfully deleted file {file_id} from Google Drive")
        return True, "File deleted successfully"

    except Exception as e:
        logger.error(f"Error deleting file from Drive: {e}")
        return False, str(e)


def upload_renewed_policy_file(file, policy_id, client_id, member_name):
    """Upload renewed policy file to Google Drive using client/member folder structure"""
    try:
        drive_service = get_drive_service()
        if not drive_service:
            return None, "Could not initialize Drive service"

        # Get root folder ID
        ROOT_FOLDER_ID = "0AOc3bRLhlrgzUk9PVA"

        # Step 1: Find or create client folder
        client_folder = find_or_create_folder(ROOT_FOLDER_ID, client_id)
        if not client_folder:
            return None, f"Could not create client folder: {client_id}"

        # Step 2: Find or create member subfolder
        member_folder = find_or_create_folder(client_folder['id'], member_name)
        if not member_folder:
            return None, f"Could not create member folder: {member_name}"

        # Step 3: Use original filename or generate clean filename
        file_extension = os.path.splitext(file.filename)[1]
        # Use original filename if it exists, otherwise generate clean filename
        if file.filename and file.filename.strip():
            new_filename = file.filename
        else:
            new_filename = f"{client_id} - {member_name} - Policy{file_extension}"

        # Step 4: Upload file to member folder
        file_metadata = {
            "name": new_filename,
            "parents": [member_folder['id']]
        }

        # Read file content
        file_content = file.read()

        # Upload file
        media = MediaIoBaseUpload(
            io.BytesIO(file_content),
            mimetype=file.mimetype,
            resumable=True
        )

        uploaded_file = drive_service.files().create(
            body=file_metadata,
            media_body=media,
            fields="id, name, webViewLink, size, createdTime",
            supportsAllDrives=True
        ).execute()

        drive_path = f"{client_id}/{member_name}/{new_filename}"
        logger.info(f"Successfully uploaded renewed policy file: {drive_path}")

        return {
            "id": uploaded_file.get("id"),
            "name": uploaded_file.get("name"),
            "webViewLink": uploaded_file.get("webViewLink"),
            "size": uploaded_file.get("size"),
            "createdTime": uploaded_file.get("createdTime"),
            "drive_path": drive_path
        }, None

    except Exception as e:
        logger.error(f"Error uploading renewed policy file: {e}")
        return None, str(e)


def archive_policy_to_history(policy_id, archived_by=None):
    """
    Archive current policy data to history table before renewal
    
    Args:
        policy_id (int): The policy ID to archive
        archived_by (str): User who performed the action (optional)
    
    Returns:
        tuple: (success, message, history_id)
    """
    try:
        # Use the database function to archive policy data
        result = supabase.rpc('archive_policy_data', {
            'p_policy_id': policy_id,
            'p_reason': 'renewal',
            'p_archived_by': archived_by
        }).execute()
        
        if result.data:
            history_id = result.data
            logger.info(f"Successfully archived policy {policy_id} to history (ID: {history_id})")
            return True, f"Policy archived to history (ID: {history_id})", history_id
        else:
            logger.error(f"Failed to archive policy {policy_id} to history")
            return False, "Failed to archive policy to history", None
            
    except Exception as e:
        logger.error(f"Error archiving policy {policy_id} to history: {e}")
        return False, f"Error archiving to history: {str(e)}", None


def renew_policy(policy_id, renewed_file, new_expiry_date=None, new_policy_number=None, archived_by=None):
    """
    Renew a policy by saving old data to history and replacing with new data

    Args:
        policy_id (int): The policy ID to renew
        renewed_file: The new policy PDF file
        new_expiry_date (str): New expiry date (optional)
        new_policy_number (str): New policy number (optional)
        archived_by (str): User who performed the renewal (optional)

    Returns:
        tuple: (success, message, updated_policy_data)
    """
    try:
        # Input validation
        if not policy_id or not isinstance(policy_id, int):
            logger.error(f"Invalid policy_id: {policy_id}")
            return False, "Invalid policy ID", None
            
        if not renewed_file:
            logger.error(f"No file provided for policy {policy_id}")
            return False, "No renewal file provided", None
            
        if not hasattr(renewed_file, 'read') or not hasattr(renewed_file, 'filename'):
            logger.error(f"Invalid file object for policy {policy_id}")
            return False, "Invalid file object", None
            
        # Get current policy details
        try:
            policy_result = (
                supabase.table("policies")
                .select("*, clients!policies_client_id_fkey(client_id, name, email, phone), members!policies_member_id_fkey(member_name)")
                .eq("policy_id", policy_id)
                .single()
                .execute()
            )
        except Exception as db_error:
            logger.error(f"Database error fetching policy {policy_id}: {db_error}")
            return False, f"Database error: {str(db_error)}", None

        if not policy_result.data:
            return False, "Policy not found", None

        current_policy = policy_result.data
        client_data = current_policy.get('clients', {})
        member_data = current_policy.get('members', {})
        
        if not client_data:
            logger.error(f"No client data found for policy {policy_id}")
            return False, "Client information not found", None
            
        if not member_data:
            logger.error(f"No member data found for policy {policy_id}")
            return False, "Member information not found", None
        
        client_id = client_data.get("client_id")
        member_name = member_data.get("member_name")
        
        if not client_id or not member_name:
            logger.error(f"Missing client_id or member_name for policy {policy_id}")
            return False, "Incomplete client/member information", None

        logger.info(f"Renewing policy {policy_id} for client {client_id}, member {member_name}")
        
        # Step 1: Archive current policy data to history table
        archive_success, archive_message, history_id = archive_policy_to_history(policy_id, archived_by)
        if not archive_success:
            logger.warning(f"Could not archive policy to history: {archive_message}")
            # Continue with renewal even if history archiving fails
        
        # Step 2: Archive old file instead of deleting
        old_file_id = current_policy.get('drive_file_id')
        old_filename = current_policy.get('file_path', 'unknown.pdf')

        if old_file_id:
            archive_success, archive_message, archived_id = archive_file_in_drive(
                old_file_id,
                old_filename,
                client_id,
                member_name
            )
            if archive_success:
                logger.info(f"Archived old policy file: {old_file_id} -> {archived_id}")
            else:
                logger.warning(f"Could not archive old file: {archive_message}")

        # Upload new file to Google Drive
        file_details, upload_error = upload_renewed_policy_file(
            renewed_file,
            policy_id,
            client_id,
            member_name
        )

        if not file_details:
            return False, f"Failed to upload new file: {upload_error}", None

        # Prepare update data
        update_data = {
            "file_path": file_details['name'],
            "drive_file_id": file_details['id'],
            "drive_url": file_details['webViewLink'],
            "drive_path": file_details['drive_path'],
            "last_reminder_sent": None,
            "renewed_at": datetime.now().isoformat()
        }

        # Add optional fields if provided
        if new_expiry_date:
            update_data["policy_to"] = new_expiry_date

        if new_policy_number:
            update_data["policy_number"] = new_policy_number

        # Update policy in database
        update_result = (
            supabase.table("policies")
            .update(update_data)
            .eq("policy_id", policy_id)
            .execute()
        )

        if not update_result.data:
            return False, "Failed to update policy in database", None

        updated_policy = update_result.data[0]

        logger.info(f"Successfully renewed policy {policy_id}")

        return True, "Policy renewed successfully", updated_policy

    except Exception as e:
        logger.error(f"Error renewing policy: {e}")
        return False, str(e), None


def get_policy_renewal_history(policy_id):
    """Get renewal history for a policy"""
    try:
        policy_result = (
            supabase.table("policies")
            .select("policy_id, renewed_at, last_reminder_sent, policy_to")
            .eq("policy_id", policy_id)
            .single()
            .execute()
        )

        if not policy_result.data:
            return None

        policy = policy_result.data

        history = {
            "policy_id": policy_id,
            "current_expiry": policy.get('policy_to'),
            "last_renewed": policy.get('renewed_at'),
            "last_reminder_sent": policy.get('last_reminder_sent')
        }

        return history

    except Exception as e:
        logger.error(f"Error getting renewal history: {e}")
        return None


def get_policy_historical_data(policy_id):
    """
    Get complete historical data for a policy from the history table
    
    Args:
        policy_id (int): The policy ID to get history for
    
    Returns:
        list: List of historical policy records, ordered by archived_at (newest first)
    """
    try:
        history_result = (
            supabase.table("policy_history")
            .select("*")
            .eq("original_policy_id", policy_id)
            .order("archived_at", desc=True)
            .execute()
        )
        
        if history_result.data:
            logger.info(f"Found {len(history_result.data)} historical records for policy {policy_id}")
            return history_result.data
        else:
            logger.info(f"No historical records found for policy {policy_id}")
            return []
            
    except Exception as e:
        logger.error(f"Error getting policy historical data for policy {policy_id}: {e}")
        return []


def get_policy_with_history(policy_id):
    """
    Get current policy data along with its complete history
    
    Args:
        policy_id (int): The policy ID to get data for
    
    Returns:
        dict: Dictionary containing current policy and historical records
    """
    try:
        # Get current policy
        current_policy_result = (
            supabase.table("policies")
            .select("*, clients!policies_client_id_fkey(client_id, name, email, phone), members!policies_member_id_fkey(member_name)")
            .eq("policy_id", policy_id)
            .single()
            .execute()
        )
        
        if not current_policy_result.data:
            return None
        
        # Get historical data
        historical_data = get_policy_historical_data(policy_id)
        
        return {
            "current_policy": current_policy_result.data,
            "history": historical_data,
            "total_versions": len(historical_data) + 1  # +1 for current version
        }
        
    except Exception as e:
        logger.error(f"Error getting policy with history for policy {policy_id}: {e}")
        return None


def update_policy_payment(policy_id, paid_file, new_expiry_date=None, new_policy_number=None, archived_by=None):
    """
    Update policy when payment is received - save old data to history, archive old PDF and upload new one

    Args:
        policy_id (int): The policy ID to update
        paid_file: The new policy PDF file after payment
        new_expiry_date (str): New expiry date (optional)
        new_policy_number (str): New policy number (optional)
        archived_by (str): User who performed the update (optional)

    Returns:
        tuple: (success: bool, message: str, updated_policy: dict)
    """
    try:
        # Get current policy details with client and member information
        policy_result = (
            supabase.table("policies")
            .select("*, clients!policies_client_id_fkey(client_id, name), members!policies_member_id_fkey(member_name)")
            .eq("policy_id", policy_id)
            .single()
            .execute()
        )

        if not policy_result.data:
            return False, "Policy not found", None

        current_policy = policy_result.data
        client_data = current_policy.get('clients', {})
        member_data = current_policy.get('members', {})
        
        if not client_data:
            logger.error(f"No client data found for policy {policy_id}")
            return False, "Client information not found", None
            
        if not member_data:
            logger.error(f"No member data found for policy {policy_id}")
            return False, "Member information not found", None
        
        client_id = client_data.get("client_id")
        member_name = member_data.get("member_name")
        
        if not client_id or not member_name:
            logger.error(f"Missing client_id or member_name for policy {policy_id}")
            return False, "Incomplete client/member information", None

        logger.info(f"Updating payment for policy {policy_id} for client {client_id}, member {member_name}")
        
        # Step 1: Archive current policy data to history table
        archive_success, archive_message, history_id = archive_policy_to_history(policy_id, archived_by)
        if not archive_success:
            logger.warning(f"Could not archive policy to history: {archive_message}")
            # Continue with update even if history archiving fails
        
        # Step 2: Archive old file instead of deleting
        old_file_id = current_policy.get('drive_file_id')
        old_filename = current_policy.get('file_path', 'unknown.pdf')

        if old_file_id:
            archive_success, archive_message, archived_id = archive_file_in_drive(
                old_file_id,
                old_filename,
                client_id,
                member_name
            )
            if archive_success:
                logger.info(f"Archived old policy file: {old_file_id} -> {archived_id}")
            else:
                logger.warning(f"Could not archive old file: {archive_message}")

        # Upload new paid policy file to Google Drive
        file_details, upload_error = upload_paid_policy_file(
            paid_file,
            policy_id,
            client_id,
            member_name
        )

        if not file_details:
            return False, f"Failed to upload new file: {upload_error}", None

        # Prepare update data
        update_data = {
            "file_path": file_details['name'],
            "drive_file_id": file_details['id'],
            "drive_url": file_details['webViewLink'],
            "drive_path": file_details['drive_path'],
            "payment_date": datetime.now().date().isoformat(),  # Use existing payment_date column
            "last_reminder_sent": None,
            "renewed_at": None
        }

        # Add optional fields if provided
        if new_expiry_date:
            update_data["policy_to"] = new_expiry_date

        if new_policy_number:
            update_data["policy_number"] = new_policy_number

        # Update policy in database
        update_result = (
            supabase.table("policies")
            .update(update_data)
            .eq("policy_id", policy_id)
            .execute()
        )

        if not update_result.data:
            return False, "Failed to update policy in database", None

        updated_policy = update_result.data[0]

        logger.info(f"Successfully updated policy payment for policy {policy_id}")

        return True, "Policy payment processed successfully", updated_policy

    except Exception as e:
        logger.error(f"Error updating policy payment: {e}")
        return False, str(e), None


def upload_paid_policy_file(file, policy_id, client_id, member_name):
    """Upload paid policy file to Google Drive using client/member folder structure"""
    try:
        drive_service = get_drive_service()
        if not drive_service:
            return None, "Could not initialize Drive service"

        # Get root folder ID
        ROOT_FOLDER_ID = "0AOc3bRLhlrgzUk9PVA"

        # Step 1: Find or create client folder
        client_folder = find_or_create_folder(ROOT_FOLDER_ID, client_id)
        if not client_folder:
            return None, f"Could not create client folder: {client_id}"

        # Step 2: Find or create member subfolder
        member_folder = find_or_create_folder(client_folder['id'], member_name)
        if not member_folder:
            return None, f"Could not create member folder: {member_name}"

        # Step 3: Use original filename or generate clean filename
        file_extension = os.path.splitext(file.filename)[1]
        # Use original filename if it exists, otherwise generate clean filename
        if file.filename and file.filename.strip():
            new_filename = file.filename
        else:
            new_filename = f"{client_id} - {member_name} - Policy{file_extension}"

        # Step 4: Upload file to member folder
        file_metadata = {
            "name": new_filename,
            "parents": [member_folder['id']]
        }

        # Read file content
        file_content = file.read()

        # Upload file
        media = MediaIoBaseUpload(
            io.BytesIO(file_content),
            mimetype=file.mimetype,
            resumable=True
        )

        uploaded_file = drive_service.files().create(
            body=file_metadata,
            media_body=media,
            fields="id, name, webViewLink, size, createdTime",
            supportsAllDrives=True
        ).execute()

        drive_path = f"{client_id}/{member_name}/{new_filename}"
        logger.info(f"Successfully uploaded paid policy file: {drive_path}")

        return {
            "id": uploaded_file.get("id"),
            "name": uploaded_file.get("name"),
            "webViewLink": uploaded_file.get("webViewLink"),
            "size": uploaded_file.get("size"),
            "createdTime": uploaded_file.get("createdTime"),
            "drive_path": drive_path
        }, None

    except Exception as e:
        logger.error(f"Error uploading paid policy file: {e}")
        return None, str(e)


def send_payment_confirmation_email(customer_email, customer_name, policy, paid_file_details):
    """Send confirmation email when policy payment is processed"""
    try:
        from email_service import send_email

        subject = f"Payment Confirmation - {policy['product_name']} Insurance Policy"

        # Format expiry date to Indian format
        expiry_date = policy.get('policy_to', 'N/A')
        if expiry_date and expiry_date != 'N/A':
            try:
                from datetime import datetime
                if isinstance(expiry_date, str) and '-' in expiry_date:
                    parts = expiry_date.split('-')
                    if len(parts) == 3 and len(parts[0]) == 4:
                        expiry_date = f"{parts[2]}/{parts[1]}/{parts[0]}"
            except:
                pass

        body = f"""Dear {customer_name},

Thank you for your payment! We are pleased to confirm that your insurance policy has been successfully processed and updated.

Policy Details:
• Insurance Type: {policy['product_name']}
• Insurance Company: {policy['insurance_company']}
• Policy Number: {policy.get('policy_number', 'Will be updated shortly')}
• New Expiry Date: {expiry_date}

Your updated policy document has been processed and is now active. The updated policy document is attached to this email.

For any queries or assistance, please feel free to contact us.

Thank you for choosing our services.

Best regards,
Insta Insurance Consultancy Portal"""

        # Download the policy file temporarily for email attachment
        temp_file_path = None
        if policy.get('drive_url'):
            try:
                from whatsapp_bot import extract_file_id_from_url, download_file_from_drive
                file_id = extract_file_id_from_url(policy.get('drive_url'))
                if file_id:
                    filename = f"{policy.get('insurance_company', 'Policy')}_{policy.get('product_name', 'Document')}.pdf".replace(' ', '_')
                    temp_file_path = download_file_from_drive(file_id, filename)
            except Exception as e:
                logger.warning(f"Could not download file for email attachment: {e}")
        
        # Send email with policy document attachment
        if temp_file_path:
            # Prepare policy data for the new template-based function
            policy_data = {
                'client_name': customer_name,
                'policy_type': policy.get('product_name', 'Insurance'),
                'policy_no': policy.get('policy_number', 'N/A'),
                'asset': policy.get('remarks', 'N/A'),
                'start_date': indian_date_filter(policy.get('policy_from')),
                'expiry_date': indian_date_filter(policy.get('policy_to'))
            }
            
            result = send_policy_email(customer_email, policy_data, temp_file_path)
            # Clean up temp file
            try:
                import os
                if os.path.exists(temp_file_path):
                    os.remove(temp_file_path)
            except:
                pass
            return result
        else:
            # Fallback to text-only email if no attachment available
            from email_service import send_email
            return send_email(customer_email, subject, body, customer_name=customer_name)

    except Exception as e:
        logger.error(f"Error sending payment confirmation email: {e}")
        return False, str(e)


def send_payment_confirmation_whatsapp(phone, customer_name, policy):
    """Send confirmation via WhatsApp when policy payment is processed"""
    try:
        from whatsapp_bot import send_whatsapp_message

        # Format expiry date to Indian format
        expiry_date = policy.get('policy_to', 'N/A')
        if expiry_date and expiry_date != 'N/A':
            try:
                if isinstance(expiry_date, str) and '-' in expiry_date:
                    parts = expiry_date.split('-')
                    if len(parts) == 3 and len(parts[0]) == 4:
                        expiry_date = f"{parts[2]}/{parts[1]}/{parts[0]}"
            except:
                pass

        message = f"""Dear {customer_name},

✅ *Payment Confirmed*

Thank you for your payment! Your insurance policy has been successfully updated.

*Policy Details:*
• Insurance: {policy['product_name']}
• Company: {policy['insurance_company']}
• Policy Number: {policy.get('policy_number', 'Will be updated shortly')}
• New Expiry Date: {expiry_date}

Your updated policy document is now active.

Reply with *HI* anytime to access your documents.

Thank you for choosing our services!

- Insta Insurance Consultancy Portal"""

        result = send_whatsapp_message(phone, message)
        return bool(result and not result.get('error')), "WhatsApp sent successfully"

    except Exception as e:
        logger.error(f"Error sending payment confirmation WhatsApp: {e}")
        return False, str(e)


def send_renewal_confirmation_email(customer_email, customer_name, policy, renewed_file_details):
    """Send confirmation email when policy is renewed with document attachment"""
    try:
        subject = f"Policy Renewal Confirmation - {policy['product_name']} Insurance"

        # Format expiry date to Indian format
        expiry_date = policy.get('policy_to', 'N/A')
        if expiry_date and expiry_date != 'N/A':
            try:
                if isinstance(expiry_date, str) and '-' in expiry_date:
                    parts = expiry_date.split('-')
                    if len(parts) == 3 and len(parts[0]) == 4:
                        expiry_date = f"{parts[2]}/{parts[1]}/{parts[0]}"
            except:
                pass

        body = f"""Dear {customer_name},

Congratulations! Your insurance policy has been successfully renewed.

Renewal Details:
• Insurance Type: {policy['product_name']}
• Insurance Company: {policy['insurance_company']}
• Policy Number: {policy.get('policy_number', 'Will be updated shortly')}
• New Expiry Date: {expiry_date}

Your renewed policy document has been processed and is now active. The updated policy document is attached to this email.

Thank you for continuing to trust us with your insurance needs.

For any queries or assistance, please feel free to contact us.

Best regards,
Insta Insurance Consultancy Portal"""

        # Download the policy file temporarily for email attachment
        temp_file_path = None
        if policy.get('drive_url'):
            try:
                from whatsapp_bot import extract_file_id_from_url, download_file_from_drive
                file_id = extract_file_id_from_url(policy.get('drive_url'))
                if file_id:
                    filename = f"{policy.get('insurance_company', 'Policy')}_{policy.get('product_name', 'Document')}.pdf".replace(' ', '_')
                    temp_file_path = download_file_from_drive(file_id, filename)
            except Exception as e:
                logger.warning(f"Could not download file for email attachment: {e}")
        
        # Send email with policy document attachment
        if temp_file_path:
            # Prepare policy data for the new template-based function
            policy_data = {
                'client_name': customer_name,
                'policy_type': policy.get('product_name', 'Insurance'),
                'policy_no': policy.get('policy_number', 'N/A'),
                'asset': policy.get('remarks', 'N/A'),
                'start_date': indian_date_filter(policy.get('policy_from')),
                'expiry_date': indian_date_filter(policy.get('policy_to'))
            }
            
            result = send_policy_email(customer_email, policy_data, temp_file_path)
            # Clean up temp file
            try:
                import os
                if os.path.exists(temp_file_path):
                    os.remove(temp_file_path)
            except:
                pass
            return result
        else:
            # Fallback to text-only email if no attachment available
            from email_service import send_email
            return send_email(customer_email, subject, body, customer_name=customer_name)

    except Exception as e:
        logger.error(f"Error sending renewal confirmation email: {e}")
        return False, str(e)


================================================
FILE: requirements.txt
================================================
Flask
Flask-Login
Authlib
supabase
bcrypt
twilio
google-api-python-client
google-auth
google-auth-oauthlib
google-auth-httplib2
psycopg2-binary
python-dotenv
APScheduler
requests

# Excel Processing
pandas
openpyxl
numpy

# Environment & Configuration
python-dotenv

# Utilities
requests
urllib3




================================================
FILE: requirements_production.txt
================================================
# Core Flask Dependencies
Flask
Flask-Login
Werkzeug

# Authentication
Authlib

# Database
supabase

# Google Services
google-auth
google-auth-oauthlib
google-auth-httplib2
google-api-python-client

# Communication Services
twilio

# Email
secure-smtplib

# Excel Processing
pandas
openpyxl
numpy

# Environment & Configuration
python-dotenv

# Utilities
requests
urllib3

# Production WSGI Server & Async Support
gunicorn
gevent
eventlet

# Caching & Session Management
redis
Flask-Session

# Task Queue for Background Processing
celery
kombu

# Monitoring & Logging
psutil
prometheus-client

# Performance & Concurrency (concurrent.futures is built-in since Python 3.2)
# concurrent-futures>=3.1.1  # Not needed for Python 3.2+
# threading-utils>=0.3  # Optional dependency

# Production Server (Alternative)
waitress



================================================
FILE: run_daily_cleanup.py
================================================
#!/usr/bin/env python3
"""
Daily Renewal File Cleanup Script
Run this script daily via cron to automatically clean up old renewal files
"""
import sys
import os
from datetime import datetime
import logging

# Add the project directory to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from renewal_file_cleanup import run_cleanup_job

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/renewal_cleanup.log'),
        logging.StreamHandler()
    ]
)

def main():
    """Run daily cleanup job"""
    logger = logging.getLogger(__name__)
    
    logger.info("Starting daily renewal file cleanup")
    
    try:
        # Run cleanup (not dry run)
        results = run_cleanup_job(dry_run=False)
        
        # Log results
        logger.info(f"Cleanup completed: {results['summary']}")
        logger.info(f"Total files processed: {results['total_files_processed']}")
        logger.info(f"Total size freed: {results['total_size_freed'] / (1024 * 1024):.2f} MB")
        
        # Log any failures
        status_failures = results['status_based_cleanup']['failed_deletions']
        orphaned_failures = results['orphaned_cleanup']['failed_deletions']
        
        if status_failures or orphaned_failures:
            logger.warning(f"Some deletions failed:")
            for failure in status_failures + orphaned_failures:
                logger.warning(f"  - {failure['filename']}: {failure['error']}")
        
        return 0
        
    except Exception as e:
        logger.error(f"Daily cleanup failed: {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)



================================================
FILE: run_whatsapp_migration.py
================================================
#!/usr/bin/env python3
"""
WhatsApp Logs Migration Script
Run this script to create the whatsapp_logs table in your database
"""
import os
import sys
from supabase import create_client
from config import Config

def run_migration():
    """Run the WhatsApp logs migration"""
    try:
        # Initialize Supabase client
        supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
        
        # Read the migration SQL file
        migration_file = os.path.join(os.path.dirname(__file__), 'whatsapp_logs_migration.sql')
        
        if not os.path.exists(migration_file):
            print(f"❌ Migration file not found: {migration_file}")
            return False
        
        with open(migration_file, 'r') as f:
            migration_sql = f.read()
        
        print("🔄 Running WhatsApp logs migration...")
        
        # Execute the migration
        # Note: Supabase Python client doesn't support raw SQL execution
        # You'll need to run this SQL manually in your Supabase SQL editor
        print("📝 Please run the following SQL in your Supabase SQL editor:")
        print("=" * 60)
        print(migration_sql)
        print("=" * 60)
        
        print("✅ Migration SQL displayed above. Please execute it in Supabase SQL editor.")
        print("🔗 Go to: https://app.supabase.com/project/YOUR_PROJECT/sql")
        
        return True
        
    except Exception as e:
        print(f"❌ Error running migration: {e}")
        return False

if __name__ == "__main__":
    print("WhatsApp Logs Migration Script")
    print("=" * 40)
    
    success = run_migration()
    
    if success:
        print("\n✅ Migration preparation completed!")
        print("📋 Next steps:")
        print("1. Copy the SQL above and run it in Supabase SQL editor")
        print("2. Restart your Flask application")
        print("3. Visit /whatsapp_logs to see the new page")
        sys.exit(0)
    else:
        print("\n❌ Migration failed!")
        sys.exit(1)



================================================
FILE: SETTINGS_CONFIGURATION_GUIDE.md
================================================
# Settings Configuration Guide

## Overview

Your insurance portal now has a **fully dynamic settings system** that allows you to configure everything from the admin settings page without touching code or environment files. This includes:

- Portal name and branding
- Company logo
- API keys and credentials
- Google Drive folder IDs
- Email and WhatsApp configuration
- Business settings (GST, commission rates)

## Accessing the Settings Page

1. **Login as Admin**: Only admin users can access the settings page
2. **Navigate to Settings**: Click on the Settings link in the navigation (visible only to admins)
3. **URL**: `https://admin.instainsure.co.in/settings`

## Settings Categories

### 1. Company Information

Configure your portal's branding and company details:

- **Portal Name**: The name displayed in the navigation bar (e.g., "Insta Insurance Consultancy Portal")
- **Portal Title**: The title shown in browser tabs (e.g., "Insta Insurances Portal")
- **Logo Path**: Filename of your logo in the static folder (e.g., "ico.png")
- **Company Name**: Your company's official name
- **Address**: Company address
- **Email**: Company email address
- **Phone**: Company phone number
- **Website**: Company website URL

**How to Change Portal Name/Logo:**
1. Go to Settings → Company Information
2. Update "Portal Name" field (this appears in the navigation bar)
3. Update "Portal Title" field (this appears in browser tabs)
4. Update "Logo Path" to your logo filename (must be in `/static` folder)
5. Click "Save Changes"
6. Refresh any open pages to see the changes

### 2. Email Configuration

Configure SMTP settings for sending emails:

- **SMTP Server**: Email server hostname (e.g., smtp.zoho.in)
- **SMTP Port**: Server port (usually 587 for TLS)
- **SMTP Username**: Your email username
- **SMTP Password**: Your email password (masked for security)
- **From Email**: Email address to send from
- **Use TLS**: Enable TLS encryption (recommended)

### 3. WhatsApp Settings

Configure WhatsApp Business API:

- **Token**: WhatsApp API access token
- **Phone ID**: WhatsApp phone number ID
- **Webhook URL**: Webhook endpoint URL
- **Verify Token**: Webhook verification token

### 4. Twilio Configuration

Configure Twilio for WhatsApp messaging:

- **Account SID**: Twilio account identifier
- **Auth Token**: Twilio authentication token (masked)
- **WhatsApp Number**: Twilio WhatsApp number

### 5. Google Drive Settings

**IMPORTANT**: Configure Google Drive folder IDs here:

- **Credentials File**: Service account credentials filename
- **Root Folder ID**: **Your main Google Drive folder ID for policy uploads**
- **Folder ID**: Additional folder ID if needed
- **Archive Folder ID**: Folder ID for archived policies

**How to Add Root Folder ID:**
1. Go to Settings → Google Drive
2. Find "Root Folder ID" field
3. Paste your Google Drive folder ID (e.g., "0AOc3bRLhlrgzUk9PVA")
4. Click "Save Changes"
5. The system will now use this folder for all policy uploads

**Finding Your Google Drive Folder ID:**
- Open the folder in Google Drive
- Look at the URL: `https://drive.google.com/drive/folders/YOUR_FOLDER_ID_HERE`
- Copy the ID after `/folders/`

### 6. Application Settings

Configure application behavior:

- **Base URL**: Your application's public URL
- **Environment**: development or production
- **Debug**: Enable debug mode (disable in production)

### 7. Business Settings

Configure business rules:

- **Default GST**: Default GST percentage (e.g., 18)
- **Default Commission**: Default commission percentage (e.g., 10)
- **Reminder Days**: Days before expiry to send reminders (e.g., 30)

## How Settings Work

### Database-Driven Configuration

All settings are stored in the `settings` table in your Supabase database. The system:

1. **Loads from Database First**: Checks the settings table for values
2. **Falls Back to Environment**: If not in database, uses .env file values
3. **Caches for Performance**: Settings are cached for 5 minutes to reduce database queries
4. **Updates Immediately**: Changes take effect within 5 minutes (or on next page load)

### Settings Priority

```
1. Database Settings (highest priority)
   ↓
2. Environment Variables (.env file)
   ↓
3. Default Values (fallback)
```

## Making Changes

### Through Settings Page (Recommended)

1. Navigate to `/settings`
2. Select the category you want to modify
3. Update the values
4. Click "Save Changes"
5. Changes are saved to database immediately
6. Refresh pages to see changes (or wait up to 5 minutes for cache refresh)

### Through Environment File (Legacy)

You can still use the `.env` file for initial setup, but settings page values will override them:

```bash
# .env file
PORTAL_NAME=My Custom Portal Name
GOOGLE_DRIVE_ROOT_FOLDER_ID=your_folder_id_here
```

## Security Features

### Sensitive Settings

Certain settings are marked as sensitive and are:
- **Masked in the UI**: Shown as password fields (••••••)
- **Only Updated When Changed**: Empty password fields don't overwrite existing values
- **Encrypted in Transit**: Sent over HTTPS

Sensitive settings include:
- SMTP passwords
- API tokens
- Auth tokens
- Credentials

### Admin-Only Access

- Only users with `admin` role can access settings
- Settings page is protected by `@admin_required` decorator
- Audit logging tracks who changed what and when

## Troubleshooting

### Changes Not Appearing

1. **Clear Cache**: Wait 5 minutes or restart the application
2. **Hard Refresh**: Press Ctrl+Shift+R (or Cmd+Shift+R on Mac)
3. **Check Database**: Verify settings were saved in Supabase settings table

### Logo Not Showing

1. **Check File Location**: Logo must be in `/static` folder
2. **Check Filename**: Ensure "Logo Path" matches exact filename (case-sensitive)
3. **Check Permissions**: Ensure file is readable by the application

### Root Folder ID Not Working

1. **Verify ID**: Check the folder ID is correct from Google Drive URL
2. **Check Permissions**: Ensure service account has access to the folder
3. **Test Connection**: Use the Google Drive test function in the application

## Migration from Hardcoded Values

All previously hardcoded values have been moved to settings:

| Old Location | New Location |
|-------------|--------------|
| Hardcoded in templates | Settings → Company Information → Portal Name |
| `ico.png` hardcoded | Settings → Company Information → Logo Path |
| `ROOT_FOLDER_ID` in code | Settings → Google Drive → Root Folder ID |
| `.env` file only | Settings page (with .env fallback) |

## Best Practices

1. **Use Settings Page**: Always use the settings page for configuration changes
2. **Backup Settings**: Use the Export feature to backup your configuration
3. **Test Changes**: Test in development before changing production settings
4. **Document Custom Values**: Keep a record of important IDs and tokens
5. **Secure Sensitive Data**: Never share sensitive settings publicly

## API Endpoints

For programmatic access:

- `GET /settings/api/get/<category>` - Get settings for a category
- `POST /settings/api/update` - Update multiple settings
- `POST /settings/api/create` - Create a new setting
- `POST /settings/api/delete` - Delete a setting
- `GET /settings/api/export` - Export all settings
- `POST /settings/api/import` - Import settings from backup

## Support

If you need help:
1. Check this guide first
2. Verify settings in the database
3. Check application logs for errors
4. Contact your developer for custom configuration needs



================================================
FILE: settings_service.py
================================================
"""
Settings Service - Manages application settings stored in database
Replaces hardcoded configuration values with database-driven settings
"""

import json
import logging
from typing import Any, Dict, List, Optional, Union
from supabase import create_client
from datetime import datetime
import os
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

class SettingsService:
    """Service for managing application settings"""
    
    def __init__(self):
        # Initialize with environment variables for database connection
        self.supabase_url = os.getenv("SUPABASE_URL")
        self.supabase_key = os.getenv("SUPABASE_KEY")
        
        if not self.supabase_url or not self.supabase_key:
            raise ValueError("SUPABASE_URL and SUPABASE_KEY must be set in environment")
            
        self.supabase = create_client(self.supabase_url, self.supabase_key)
        self._cache = {}
        self._cache_timestamp = None
        self._cache_ttl = 300  # 5 minutes cache TTL
    
    def _should_refresh_cache(self) -> bool:
        """Check if cache should be refreshed"""
        if not self._cache_timestamp:
            return True
        return (datetime.now() - self._cache_timestamp).seconds > self._cache_ttl
    
    def _refresh_cache(self):
        """Refresh settings cache from database"""
        try:
            result = self.supabase.table('settings').select('*').execute()
            
            self._cache = {}
            for setting in result.data:
                category = setting['category']
                key = setting['key']
                
                if category not in self._cache:
                    self._cache[category] = {}
                
                # Convert value based on data type
                value = self._convert_value(setting['value'], setting['data_type'])
                self._cache[category][key] = {
                    'value': value,
                    'data_type': setting['data_type'],
                    'description': setting['description'],
                    'is_sensitive': setting['is_sensitive']
                }
            
            self._cache_timestamp = datetime.now()
            logger.info("Settings cache refreshed successfully")
            
        except Exception as e:
            logger.error(f"Error refreshing settings cache: {e}")
            # Keep existing cache if refresh fails
    
    def _convert_value(self, value: str, data_type: str) -> Any:
        """Convert string value to appropriate type"""
        if value is None:
            return None
            
        try:
            if data_type == 'boolean':
                return value.lower() in ('true', '1', 'yes', 'on')
            elif data_type == 'number':
                if '.' in value:
                    return float(value)
                return int(value)
            elif data_type == 'json':
                return json.loads(value)
            else:  # string
                return value
        except (ValueError, json.JSONDecodeError) as e:
            logger.warning(f"Error converting value '{value}' to {data_type}: {e}")
            return value  # Return as string if conversion fails
    
    def get(self, category: str, key: str, default: Any = None) -> Any:
        """Get a setting value"""
        if self._should_refresh_cache():
            self._refresh_cache()
        
        try:
            return self._cache.get(category, {}).get(key, {}).get('value', default)
        except Exception as e:
            logger.error(f"Error getting setting {category}.{key}: {e}")
            return default
    
    def get_category(self, category: str) -> Dict[str, Any]:
        """Get all settings in a category"""
        if self._should_refresh_cache():
            self._refresh_cache()
        
        category_settings = self._cache.get(category, {})
        return {key: data['value'] for key, data in category_settings.items()}
    
    def get_all_categories(self) -> List[str]:
        """Get list of all setting categories"""
        if self._should_refresh_cache():
            self._refresh_cache()
        
        return list(self._cache.keys())
    
    def get_category_with_metadata(self, category: str) -> Dict[str, Dict]:
        """Get all settings in a category with metadata"""
        if self._should_refresh_cache():
            self._refresh_cache()
        
        return self._cache.get(category, {})
    
    def set(self, category: str, key: str, value: Any, updated_by: str = None) -> bool:
        """Set a setting value"""
        try:
            # Convert value to string for storage
            if isinstance(value, (dict, list)):
                str_value = json.dumps(value)
                data_type = 'json'
            elif isinstance(value, bool):
                str_value = str(value).lower()
                data_type = 'boolean'
            elif isinstance(value, (int, float)):
                str_value = str(value)
                data_type = 'number'
            else:
                str_value = str(value)
                data_type = 'string'
            
            # Update in database
            update_data = {
                'value': str_value,
                'data_type': data_type,
                'updated_at': datetime.now().isoformat()
            }
            
            if updated_by:
                update_data['updated_by'] = updated_by
            
            result = self.supabase.table('settings').update(update_data).eq('category', category).eq('key', key).execute()
            
            if result.data:
                # Update cache
                if category not in self._cache:
                    self._cache[category] = {}
                
                if key in self._cache[category]:
                    self._cache[category][key]['value'] = self._convert_value(str_value, data_type)
                    self._cache[category][key]['data_type'] = data_type
                
                logger.info(f"Setting {category}.{key} updated successfully")
                return True
            else:
                logger.error(f"Failed to update setting {category}.{key}")
                return False
                
        except Exception as e:
            logger.error(f"Error setting {category}.{key}: {e}")
            return False
    
    def create(self, category: str, key: str, value: Any, description: str = "", 
               is_sensitive: bool = False, updated_by: str = None) -> bool:
        """Create a new setting"""
        try:
            # Convert value to string for storage
            if isinstance(value, (dict, list)):
                str_value = json.dumps(value)
                data_type = 'json'
            elif isinstance(value, bool):
                str_value = str(value).lower()
                data_type = 'boolean'
            elif isinstance(value, (int, float)):
                str_value = str(value)
                data_type = 'number'
            else:
                str_value = str(value)
                data_type = 'string'
            
            insert_data = {
                'category': category,
                'key': key,
                'value': str_value,
                'data_type': data_type,
                'description': description,
                'is_sensitive': is_sensitive
            }
            
            if updated_by:
                insert_data['updated_by'] = updated_by
            
            result = self.supabase.table('settings').insert(insert_data).execute()
            
            if result.data:
                # Refresh cache to include new setting
                self._refresh_cache()
                logger.info(f"Setting {category}.{key} created successfully")
                return True
            else:
                logger.error(f"Failed to create setting {category}.{key}")
                return False
                
        except Exception as e:
            logger.error(f"Error creating setting {category}.{key}: {e}")
            return False
    
    def delete(self, category: str, key: str) -> bool:
        """Delete a setting"""
        try:
            result = self.supabase.table('settings').delete().eq('category', category).eq('key', key).execute()
            
            if result.data:
                # Remove from cache
                if category in self._cache and key in self._cache[category]:
                    del self._cache[category][key]
                    if not self._cache[category]:  # Remove empty category
                        del self._cache[category]
                
                logger.info(f"Setting {category}.{key} deleted successfully")
                return True
            else:
                logger.error(f"Failed to delete setting {category}.{key}")
                return False
                
        except Exception as e:
            logger.error(f"Error deleting setting {category}.{key}: {e}")
            return False
    
    def get_all_settings(self) -> Dict[str, Dict[str, Dict]]:
        """Get all settings with metadata (for admin interface)"""
        if self._should_refresh_cache():
            self._refresh_cache()
        
        return self._cache.copy()
    
    def bulk_update(self, settings: Dict[str, Dict[str, Any]], updated_by: str = None) -> bool:
        """Bulk update multiple settings"""
        success_count = 0
        total_count = 0
        
        for category, category_settings in settings.items():
            for key, value in category_settings.items():
                total_count += 1
                if self.set(category, key, value, updated_by):
                    success_count += 1
        
        logger.info(f"Bulk update completed: {success_count}/{total_count} settings updated")
        return success_count == total_count
    
    def export_settings(self, include_sensitive: bool = False) -> Dict:
        """Export settings for backup/migration"""
        if self._should_refresh_cache():
            self._refresh_cache()
        
        export_data = {}
        for category, category_settings in self._cache.items():
            export_data[category] = {}
            for key, data in category_settings.items():
                if not include_sensitive and data.get('is_sensitive', False):
                    continue
                export_data[category][key] = {
                    'value': data['value'],
                    'data_type': data['data_type'],
                    'description': data['description'],
                    'is_sensitive': data['is_sensitive']
                }
        
        return export_data
    
    def clear_cache(self):
        """Clear the settings cache"""
        self._cache = {}
        self._cache_timestamp = None
        logger.info("Settings cache cleared")


# Global settings instance
settings = SettingsService()

# Convenience functions for common operations
def get_setting(category: str, key: str, default: Any = None) -> Any:
    """Get a setting value - convenience function"""
    return settings.get(category, key, default)

def set_setting(category: str, key: str, value: Any, updated_by: str = None) -> bool:
    """Set a setting value - convenience function"""
    return settings.set(category, key, value, updated_by)

def get_company_settings() -> Dict[str, Any]:
    """Get all company settings"""
    return settings.get_category('company')

def get_email_settings() -> Dict[str, Any]:
    """Get all email settings"""
    return settings.get_category('email')

def get_whatsapp_settings() -> Dict[str, Any]:
    """Get all WhatsApp settings"""
    return settings.get_category('whatsapp')

def get_twilio_settings() -> Dict[str, Any]:
    """Get all Twilio settings"""
    return settings.get_category('twilio')

def get_google_drive_settings() -> Dict[str, Any]:
    """Get all Google Drive settings"""
    return settings.get_category('google_drive')

def get_app_settings() -> Dict[str, Any]:
    """Get all application settings"""
    return settings.get_category('app')



================================================
FILE: SETTINGS_SYSTEM_GUIDE.md
================================================
# Settings System Implementation Guide

## Overview

This comprehensive settings system replaces hardcoded configuration values with a database-driven, admin-configurable system. Admins can now change everything including company information, API keys, email settings, and user roles through a web interface.

## Features

### ✅ **Completed Features**

1. **Database-Driven Settings**
   - All configuration stored in `settings` table
   - Organized by categories (company, email, whatsapp, etc.)
   - Support for different data types (string, number, boolean, json)
   - Sensitive settings marked and handled securely

2. **Role-Based Access Control**
   - Admin and Member roles
   - Settings page accessible only to admins
   - User management for admins
   - First user automatically becomes admin

3. **Admin Settings Interface**
   - Modern, responsive web interface
   - Organized by categories with tabs
   - Real-time saving and validation
   - Sensitive field handling (passwords, tokens)

4. **User Management**
   - Create new users with roles
   - Change user roles (admin ↔ member)
   - Reset user passwords
   - Delete users (except self)

5. **Dynamic Configuration**
   - Automatic fallback to environment variables
   - Cached settings for performance
   - Hot-reload capability

## Installation & Setup

### 1. Database Migration

Run the database migration to create the settings table and add user roles:

```sql
-- Run this SQL script in your Supabase dashboard
-- File: settings_system_migration.sql
```

### 2. Migrate Existing Settings

Run the migration script to populate settings from environment variables:

```bash
python migrate_settings.py
```

### 3. Update Application

The application has been updated to use the new settings system:
- `app_multiuser.py` - Updated to use `dynamic_config`
- `models.py` - Updated for role-based authentication
- Navigation updated with Settings link for admins

## Settings Categories

### 🏢 **Company Information**
- Company name, logo, address
- Contact information (phone, email, website)
- Displayed throughout the application

### 📧 **Email Configuration**
- SMTP server settings
- Authentication credentials
- From address and name
- Used for policy notifications and renewals

### 📱 **WhatsApp Settings**
- WhatsApp Business API configuration
- Phone ID and tokens
- Webhook verification

### 📞 **Twilio Configuration**
- Twilio account credentials
- WhatsApp integration settings
- Content template configuration

### 💾 **Google Drive Settings**
- Credentials file path
- Root and archive folder IDs
- File storage configuration

### ⚙️ **Application Settings**
- Base URL and environment
- Security settings
- Debug mode configuration

### 💼 **Business Settings**
- Default GST percentage
- Default commission rates
- Renewal reminder timing

### 📁 **File Upload Settings**
- Maximum file size limits
- Allowed file extensions
- Upload restrictions

## User Roles

### 👑 **Admin Role**
- Full access to settings page
- Can manage all users
- Can change user roles
- Can create/delete users
- Access to all application features

### 👤 **Member Role**
- Standard application access
- Cannot access settings
- Cannot manage users
- Policy and claims management only

## Settings Management

### Accessing Settings
1. Log in as an admin user
2. Click "Settings" in the sidebar or user menu
3. Navigate through different categories using tabs

### Managing Settings
- **Edit Values**: Click on any setting field to edit
- **Save Changes**: Click "Save Changes" button for each category
- **Sensitive Fields**: Password fields show as masked, only update if new value entered
- **Data Types**: Automatic validation based on field type

### User Management
1. Go to Settings → User Management tab
2. **Add User**: Click "Add New User" button
3. **Change Role**: Click role change button next to user
4. **Reset Password**: Click "Reset Password" button
5. **Delete User**: Click "Delete" button (cannot delete yourself)

## API Endpoints

### Settings API
- `GET /settings/api/get/<category>` - Get category settings
- `POST /settings/api/update` - Update multiple settings
- `POST /settings/api/create` - Create new setting
- `POST /settings/api/delete` - Delete setting
- `GET /settings/api/export` - Export settings for backup
- `POST /settings/api/import` - Import settings from backup

### User Management API
- `GET /settings/api/users` - Get all users
- `POST /settings/api/users/create` - Create new user
- `POST /settings/api/users/update-role` - Update user role
- `POST /settings/api/users/delete` - Delete user
- `POST /settings/api/users/reset-password` - Reset user password

## Security Features

### 🔒 **Access Control**
- Role-based route protection
- Admin-only settings access
- Self-modification prevention
- Session-based authentication

### 🛡️ **Data Protection**
- Sensitive settings marked and masked
- Password fields handled securely
- API key protection
- Audit logging for changes

### 🔐 **Authentication**
- Database-driven user roles
- Secure password hashing (bcrypt)
- Session management
- Automatic first-user admin setup

## Configuration Files

### Core Files
- `settings_service.py` - Settings management service
- `dynamic_config.py` - Dynamic configuration system
- `auth_decorators.py` - Role-based access control
- `routes/settings_routes.py` - Settings API endpoints
- `models.py` - Updated User model with roles

### Templates
- `templates/settings/index.html` - Settings management interface

### Migration Files
- `settings_system_migration.sql` - Database schema changes
- `migrate_settings.py` - Environment variable migration script

## Usage Examples

### Getting Settings in Code
```python
from dynamic_config import Config

# Get individual settings
company_name = Config.COMPANY_NAME
smtp_server = Config.SMTP_SERVER
max_file_size = Config.MAX_FILE_SIZE_MB

# Get category settings
email_config = Config.get_email_config()
company_info = Config.get_company_info()

# Check feature flags
if Config.is_feature_enabled('email_notifications'):
    send_email_notification()
```

### Using Settings Service Directly
```python
from settings_service import settings

# Get setting
value = settings.get('company', 'name', 'Default Company')

# Set setting
success = settings.set('company', 'name', 'New Company Name', 'admin@example.com')

# Get category
email_settings = settings.get_category('email')
```

### Role-Based Route Protection
```python
from auth_decorators import admin_required, role_required

@admin_required
def admin_only_route():
    return "Admin only content"

@role_required('member')
def member_route():
    return "Member content"
```

## Troubleshooting

### Common Issues

1. **Settings not loading**
   - Check database connection
   - Verify settings table exists
   - Run migration script

2. **Permission denied**
   - Check user role in database
   - Verify admin status
   - Check session authentication

3. **Settings not saving**
   - Check database permissions
   - Verify API endpoints
   - Check browser console for errors

### Migration Issues

1. **Database connection failed**
   - Verify SUPABASE_URL and SUPABASE_KEY
   - Check network connectivity
   - Ensure Supabase project is active

2. **Settings table not found**
   - Run the SQL migration script first
   - Check table creation in Supabase dashboard
   - Verify table permissions

## Future Enhancements

### Planned Features
- [ ] Settings backup/restore functionality
- [ ] Settings change history/audit log
- [ ] Bulk settings import/export
- [ ] Settings validation rules
- [ ] Environment-specific settings
- [ ] Settings templates for quick setup

### API Improvements
- [ ] GraphQL API for settings
- [ ] Webhook notifications for setting changes
- [ ] Settings versioning
- [ ] Rollback functionality

## Support

For issues or questions about the settings system:

1. Check this documentation
2. Review the migration scripts
3. Check database table structure
4. Verify user roles and permissions
5. Check application logs for errors

## Migration Checklist

- [ ] Run database migration SQL script
- [ ] Run settings migration Python script
- [ ] Update environment variables (optional)
- [ ] Test admin login and settings access
- [ ] Verify all settings categories load
- [ ] Test user management functionality
- [ ] Confirm application still works with new config
- [ ] Update any custom code using old config
- [ ] Train admin users on new interface
- [ ] Document any custom settings added

---

**🎉 Congratulations!** You now have a fully configurable, database-driven settings system with role-based access control. No more hardcoded values!



================================================
FILE: settings_system_migration.sql
================================================
-- Settings System Migration
-- Run this script to add settings table and update users table with roles

-- 1. Add role column to users table
ALTER TABLE public.users ADD COLUMN IF NOT EXISTS role VARCHAR(20) DEFAULT 'member' CHECK (role IN ('admin', 'member'));

-- Update existing users to have admin role if they were previously admin
UPDATE public.users SET role = 'admin' WHERE is_admin = true;

-- 2. Create settings table to store all configurable values
CREATE TABLE IF NOT EXISTS public.settings (
    id SERIAL PRIMARY KEY,
    category VARCHAR(50) NOT NULL,
    key VARCHAR(100) NOT NULL,
    value TEXT,
    data_type VARCHAR(20) DEFAULT 'string' CHECK (data_type IN ('string', 'number', 'boolean', 'json')),
    description TEXT,
    is_sensitive BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_by TEXT REFERENCES public.users(email) ON DELETE SET NULL,
    UNIQUE(category, key)
);

-- 3. Insert default settings
INSERT INTO public.settings (category, key, value, data_type, description, is_sensitive) VALUES
-- Company Information
('company', 'name', 'Insta Insurance Consultancy', 'string', 'Company name displayed in the application', false),
('company', 'logo_url', '', 'string', 'URL to company logo image', false),
('company', 'address', '', 'string', 'Company address', false),
('company', 'phone', '', 'string', 'Company phone number', false),
('company', 'email', '', 'string', 'Company email address', false),
('company', 'website', '', 'string', 'Company website URL', false),

-- Email Configuration
('email', 'smtp_server', 'smtp.zoho.in', 'string', 'SMTP server hostname', false),
('email', 'smtp_port', '587', 'number', 'SMTP server port', false),
('email', 'smtp_username', '', 'string', 'SMTP username', true),
('email', 'smtp_password', '', 'string', 'SMTP password', true),
('email', 'from_email', '', 'string', 'From email address', false),
('email', 'from_name', 'Insta Insurance Consultancy', 'string', 'From name for emails', false),

-- WhatsApp Configuration
('whatsapp', 'token', '', 'string', 'WhatsApp API token', true),
('whatsapp', 'phone_id', '', 'string', 'WhatsApp phone number ID', false),
('whatsapp', 'verify_token', '', 'string', 'Webhook verify token', true),

-- Twilio WhatsApp Configuration
('twilio', 'account_sid', '', 'string', 'Twilio Account SID', true),
('twilio', 'auth_token', '', 'string', 'Twilio Auth Token', true),
('twilio', 'whatsapp_from', 'whatsapp:+14155238886', 'string', 'Twilio WhatsApp from number', false),
('twilio', 'use_content_template', 'false', 'boolean', 'Use Twilio content templates', false),
('twilio', 'content_sid', '', 'string', 'Twilio content template SID', false),

-- Google Drive Configuration
('google_drive', 'credentials_file', 'credentials.json', 'string', 'Google credentials file path', false),
('google_drive', 'root_folder_id', '', 'string', 'Google Drive root folder ID', false),
('google_drive', 'archive_folder_id', '', 'string', 'Google Drive archive folder ID', false),

-- Database Configuration
('database', 'supabase_url', '', 'string', 'Supabase URL', true),
('database', 'supabase_key', '', 'string', 'Supabase API key', true),

-- Application Configuration
('app', 'base_url', 'https://admin.instainsure.co.in', 'string', 'Application base URL', false),
('app', 'secret_key', '', 'string', 'Flask secret key', true),
('app', 'environment', 'production', 'string', 'Application environment', false),
('app', 'debug', 'false', 'boolean', 'Debug mode enabled', false),

-- Notification Settings
('notifications', 'renewal_reminder_days', '30', 'number', 'Days before expiry to send renewal reminders', false),
('notifications', 'enable_email_notifications', 'true', 'boolean', 'Enable email notifications', false),
('notifications', 'enable_whatsapp_notifications', 'true', 'boolean', 'Enable WhatsApp notifications', false),

-- Business Settings
('business', 'default_gst_percentage', '18.00', 'number', 'Default GST percentage', false),
('business', 'default_commission_percentage', '10.00', 'number', 'Default commission percentage', false),

-- File Upload Settings
('uploads', 'max_file_size_mb', '10', 'number', 'Maximum file size in MB', false),
('uploads', 'allowed_extensions', '["pdf", "jpg", "jpeg", "png", "doc", "docx"]', 'json', 'Allowed file extensions', false)

ON CONFLICT (category, key) DO NOTHING;

-- 4. Create function to update timestamp
CREATE OR REPLACE FUNCTION update_settings_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 5. Create trigger for updated_at
DROP TRIGGER IF EXISTS settings_updated_at_trigger ON public.settings;
CREATE TRIGGER settings_updated_at_trigger
    BEFORE UPDATE ON public.settings
    FOR EACH ROW
    EXECUTE FUNCTION update_settings_updated_at();

-- 6. Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_settings_category ON public.settings(category);
CREATE INDEX IF NOT EXISTS idx_settings_key ON public.settings(key);
CREATE INDEX IF NOT EXISTS idx_settings_category_key ON public.settings(category, key);
CREATE INDEX IF NOT EXISTS idx_users_role ON public.users(role);



================================================
FILE: setup_admin_passwords.py
================================================
#!/usr/bin/env python3
"""
Script to set up admin user passwords in the database.
Run this after applying the database migration to set passwords for admin users.
"""

import os
import sys
import getpass
from supabase import create_client
from models import User
from config import Config

def setup_admin_passwords():
    """Set up passwords for admin users"""
    print("🔐 Admin Password Setup")
    print("=" * 50)
    
    # Initialize Supabase client
    supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
    
    print(f"Admin emails configured: {', '.join(Config.ADMIN_EMAILS)}")
    print()
    
    for email in Config.ADMIN_EMAILS:
        print(f"Setting up password for: {email}")
        
        # Check if user exists
        result = supabase.table('users').select('*').eq('email', email).execute()
        
        if not result.data:
            # Create user if doesn't exist
            print(f"  Creating new user: {email}")
            new_user_data = {
                'email': email,
                'name': email.split('@')[0],
                'is_admin': True,
                'password_hash': None  # Will be set below
            }
            supabase.table('users').insert(new_user_data).execute()
        
        # Get password from user
        while True:
            password = getpass.getpass(f"  Enter password for {email}: ")
            if len(password) < 8:
                print("  ❌ Password must be at least 8 characters long")
                continue
            
            confirm_password = getpass.getpass(f"  Confirm password for {email}: ")
            if password != confirm_password:
                print("  ❌ Passwords don't match")
                continue
            
            break
        
        # Hash password and update database
        password_hash = User.hash_password(password)
        
        result = supabase.table('users').update({
            'password_hash': password_hash
        }).eq('email', email).execute()
        
        if result.data:
            print(f"  ✅ Password set successfully for {email}")
        else:
            print(f"  ❌ Failed to set password for {email}")
        
        print()
    
    print("🎉 Admin password setup complete!")
    print()
    print("Next steps:")
    print("1. Run the database migration: add_password_migration.sql")
    print("2. Start the application")
    print("3. Login with your email and password")

if __name__ == "__main__":
    try:
        setup_admin_passwords()
    except KeyboardInterrupt:
        print("\n\n❌ Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Error during setup: {e}")
        sys.exit(1)



================================================
FILE: SIMPLE_AUTH_SETUP.md
================================================
# Simple Authentication Setup Guide

This guide explains how to migrate from Clerk to simple email/password authentication using Supabase.

## Overview

The new authentication system:
- ✅ Uses Supabase database for user storage
- ✅ Email/password authentication only
- ✅ Sessions expire when browser tab is closed
- ✅ No external dependencies (no Clerk)
- ✅ Admin-only access (configurable via environment variables)

## Migration Steps

### 1. Database Migration

Run the following SQL in your Supabase SQL editor:

```sql
-- Add password field to users table
ALTER TABLE public.users 
ADD COLUMN password_hash text;

-- Add index for better performance
CREATE INDEX IF NOT EXISTS idx_users_email ON public.users(email);
```

### 2. Install Dependencies

```bash
pip install bcrypt
```

### 3. Set Admin Passwords

Run the password setup script:

```bash
python setup_admin_passwords.py
```

This will:
- Prompt you to set passwords for each admin email
- Hash and store passwords securely in the database
- Create user records if they don't exist

### 4. Update Environment Variables

Remove Clerk-related environment variables:
```bash
# Remove these from your .env file:
# CLERK_PUBLISHABLE_KEY=
# CLERK_SECRET_KEY=
# CLERK_FRONTEND_API=
```

Keep these required variables:
```bash
SUPABASE_URL=your_supabase_url
SUPABASE_KEY=your_supabase_key
ADMIN_EMAILS=email1@domain.com,email2@domain.com
SECRET_KEY=your_secret_key
```

### 5. Start the Application

```bash
python app_multiuser.py
```

## How It Works

### Authentication Flow

1. **Login Page**: Simple email/password form
2. **Authentication**: Validates against Supabase users table
3. **Session**: Creates Flask-Login session (expires on tab close)
4. **Authorization**: Only admin emails can access the system

### Session Security

- **Automatic Logout**: Sessions expire when browser tab is closed
- **No Persistent Sessions**: `remember=False` in login
- **Secure Cookies**: HTTPOnly, SameSite protection
- **HTTPS Ready**: Secure cookies in production

### Password Security

- **bcrypt Hashing**: Industry-standard password hashing
- **Salt**: Automatic salt generation for each password
- **No Plain Text**: Passwords never stored in plain text

## Files Changed

### Core Authentication
- `models.py` - Updated User class with password methods
- `auth.py` - Replaced Clerk with simple email/password auth
- `config.py` - Removed Clerk configuration

### Templates
- `login.html` - Simple email/password form (Clerk version backed up as `login_clerk_backup.html`)

### Session Configuration
- `app.py` - Added session expiry configuration
- `app_multiuser.py` - Added session expiry configuration

### Dependencies
- `requirements.txt` - Added bcrypt dependency

## Testing

1. **Login Test**:
   ```
   URL: http://localhost:5050/login
   Email: your_admin_email@domain.com
   Password: your_set_password
   ```

2. **Session Test**:
   - Login successfully
   - Close browser tab
   - Reopen and navigate to dashboard
   - Should redirect to login page

3. **Security Test**:
   - Try accessing `/dashboard` without login
   - Should redirect to login page
   - Try login with non-admin email
   - Should show "unauthorized" error

## Troubleshooting

### Common Issues

1. **"bcrypt not found"**:
   ```bash
   pip install bcrypt
   ```

2. **"User not found"**:
   - Check ADMIN_EMAILS environment variable
   - Run `python setup_admin_passwords.py` again

3. **"Invalid password"**:
   - Reset password using `python setup_admin_passwords.py`

4. **Session not expiring**:
   - Check browser settings (some browsers may persist sessions)
   - Clear browser cookies and test again

### Database Issues

1. **Migration failed**:
   ```sql
   -- Check if column exists
   SELECT column_name FROM information_schema.columns 
   WHERE table_name = 'users' AND column_name = 'password_hash';
   ```

2. **User creation failed**:
   ```sql
   -- Check users table
   SELECT email, password_hash IS NOT NULL as has_password 
   FROM users WHERE email IN ('your_admin_email@domain.com');
   ```

## Security Considerations

### Production Deployment

1. **HTTPS Required**: Set `SESSION_COOKIE_SECURE=True` in production
2. **Strong Passwords**: Enforce minimum 8 characters
3. **Environment Variables**: Never commit secrets to git
4. **Regular Updates**: Keep dependencies updated

### Admin Access

- Only emails listed in `ADMIN_EMAILS` can access the system
- Add/remove admin emails by updating environment variable
- Restart application after changing admin emails

## Rollback Plan

If you need to rollback to Clerk:

1. Restore original files:
   ```bash
   cp templates/login_clerk_backup.html templates/login.html
   ```

2. Restore Clerk configuration in `config.py`

3. Add Clerk environment variables back

4. Restart application

## Support

For issues or questions:
1. Check application logs: `logs/multiuser_app.log`
2. Verify database connection and user records
3. Test with a fresh browser session



================================================
FILE: start_multiuser.bat
================================================
@echo off
echo Starting Insurance Portal Multi-User Application...

cd /d "C:\Users\SAMEER SHAH\Downloads\FinalWebsite-main\FinalWebsite-main"

REM Check if virtual environment exists
if not exist "venv\Scripts\activate.bat" (
    echo [ERROR] Virtual environment not found. Please run deploy_multiuser_windows.py first.
    pause
    exit /b 1
)

REM Activate virtual environment
echo Activating virtual environment...
call "venv\Scripts\activate.bat"

REM Check if .env file exists
if not exist ".env" (
    echo [WARNING] .env file not found. Please create it with your configuration.
    echo You can use the .env template that was created during deployment.
    pause
)

REM Create necessary directories
if not exist "logs" mkdir logs
if not exist "static\renewals" mkdir static\renewals
if not exist "static\uploads" mkdir static\uploads
if not exist "temp" mkdir temp

REM Start application
echo.
echo ========================================
echo  Insurance Portal Multi-User Server
echo ========================================
echo.
echo Starting server...
echo Access the application at: http://localhost:5050
echo Press Ctrl+C to stop the server
echo.

REM Try to start with Waitress (Windows WSGI server)
python start_server.py

if errorlevel 1 (
    echo.
    echo Trying fallback startup method...
    python app_multiuser.py
)

echo.
echo Server stopped.
pause


================================================
FILE: start_optimized.bat
================================================
@echo off
echo ========================================
echo  Insurance Portal - Optimized for 2-4 Users
echo  System: i3 2nd gen, 4GB RAM
echo ========================================
echo.

cd /d "C:\Users\SAMEER SHAH\Downloads\FinalWebsite-main\FinalWebsite-main"

REM Check if virtual environment exists
if not exist "venv\Scripts\activate.bat" (
    echo [ERROR] Virtual environment not found.
    echo [INFO] Please run: python deploy_multiuser_windows.py
    pause
    exit /b 1
)

REM Activate virtual environment
echo [INFO] Activating virtual environment...
call "venv\Scripts\activate.bat"

REM Check if .env file exists
if not exist ".env" (
    echo [WARNING] .env file not found.
    echo [INFO] Please create .env file with your configuration.
    pause
)

REM Create necessary directories
if not exist "logs" mkdir logs
if not exist "static\renewals" mkdir static\renewals
if not exist "static\uploads" mkdir static\uploads
if not exist "temp" mkdir temp

REM Set optimized environment variables
set PYTHONOPTIMIZE=1
set PYTHONUNBUFFERED=1
set USE_OPTIMIZED_CONFIG=1

echo [INFO] Starting optimized server for 2-4 concurrent users...
echo [INFO] Configuration: Resource-optimized for i3 2nd gen, 4GB RAM
echo.

REM Start optimized server
python start_server_optimized.py

if errorlevel 1 (
    echo.
    echo [INFO] Trying fallback startup method...
    python app_multiuser.py
)

echo.
echo [INFO] Server stopped.
pause



================================================
FILE: start_server.py
================================================
"""
Windows Server Startup Script
Handles starting the multi-user application with proper error handling
"""
import os
import sys

# Set encoding for Windows console
os.environ.setdefault('PYTHONIOENCODING', 'utf-8')

def start_server():
    """Start the multi-user server with fallback options"""
    
    print('[INFO] Starting Insurance Portal Multi-User Server...')
    print('[INFO] Server will be available at: http://localhost:5050')
    print('[INFO] Health check: http://localhost:5050/health')
    print('[INFO] Metrics: http://localhost:5050/metrics')
    print('')
    
    # Try Waitress first (recommended for Windows)
    try:
        from waitress import serve
        from app_multiuser import app
        
        print('[OK] Starting with Waitress WSGI server...')
        print('[OK] Multi-user scaling features enabled')
        print('[OK] Press Ctrl+C to stop the server')
        print('')
        
        # Start server with Waitress
        serve(
            app, 
            host='0.0.0.0', 
            port=5050, 
            threads=20,
            connection_limit=1000,
            cleanup_interval=30,
            channel_timeout=120
        )
        
    except ImportError as e:
        print(f'[WARNING] Waitress not available: {e}')
        print('[INFO] Falling back to Flask development server...')
        
        try:
            from app_multiuser import app
            app.run(
                host='0.0.0.0', 
                port=5050, 
                debug=False, 
                threaded=True,
                use_reloader=False
            )
        except Exception as e:
            print(f'[ERROR] Flask server failed: {e}')
            return False
            
    except Exception as e:
        print(f'[ERROR] Server startup failed: {e}')
        print('[INFO] Checking for common issues...')
        
        # Check for common issues
        if 'Address already in use' in str(e) or 'WinError 10048' in str(e):
            print('[ERROR] Port 5050 is already in use!')
            print('[FIX] Try stopping other applications using port 5050')
            print('[FIX] Or change the port in the .env file')
        
        elif 'Permission denied' in str(e):
            print('[ERROR] Permission denied!')
            print('[FIX] Try running as administrator')
        
        else:
            print('[ERROR] Unknown error occurred')
            print('[FIX] Check the logs for more details')
        
        return False
    
    return True

if __name__ == "__main__":
    try:
        success = start_server()
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        print('\n[INFO] Server stopped by user')
        sys.exit(0)
    except Exception as e:
        print(f'[ERROR] Unexpected error: {e}')
        sys.exit(1)



================================================
FILE: start_server_optimized.py
================================================
"""
Optimized Server Startup for 2-4 Users
Configured for i3 2nd gen, 4GB RAM
"""
import os
import sys
import psutil
import gc

# Set encoding for Windows console
os.environ.setdefault('PYTHONIOENCODING', 'utf-8')

# Import optimized configuration
from config_optimized import OptimizedConfig

def check_system_resources():
    """Check if system has sufficient resources"""
    print('[INFO] Checking system resources...')
    
    # Check available RAM
    memory = psutil.virtual_memory()
    available_gb = memory.available / (1024**3)
    
    print(f'[INFO] Available RAM: {available_gb:.1f} GB')
    print(f'[INFO] CPU Count: {psutil.cpu_count()} cores')
    
    if available_gb < 1.0:
        print('[WARNING] Low available RAM detected!')
        print('[WARNING] Consider closing other applications for better performance')
    
    return True

def optimize_python_settings():
    """Optimize Python settings for low-resource environment"""
    print('[INFO] Applying Python optimizations...')
    
    # Set garbage collection thresholds for better memory management
    gc.set_threshold(500, 8, 8)
    
    # Disable debug mode
    os.environ['PYTHONOPTIMIZE'] = '1'
    
    # Set smaller buffer sizes
    os.environ['PYTHONUNBUFFERED'] = '1'
    
    print('[OK] Python optimizations applied')

def start_optimized_server():
    """Start the server with optimized settings for 2-4 users"""
    
    print('='*60)
    print('INSURANCE PORTAL - OPTIMIZED FOR 2-4 USERS')
    print('='*60)
    print(f'[INFO] Optimized for: i3 2nd gen, 4GB RAM')
    print(f'[INFO] Target users: 2-4 concurrent users')
    print(f'[INFO] Configuration: Resource-optimized')
    print('')
    
    # Check system resources
    if not check_system_resources():
        return False
    
    # Apply Python optimizations
    optimize_python_settings()
    
    print('[INFO] Starting optimized multi-user server...')
    print('[INFO] Server will be available at: http://localhost:5050')
    print('[INFO] Health check: http://localhost:5050/health')
    print('[INFO] Metrics: http://localhost:5050/metrics')
    print('')
    
    try:
        from waitress import serve
        
        # Import app with optimized config
        os.environ['USE_OPTIMIZED_CONFIG'] = '1'
        from app_multiuser import app
        
        # Get optimized Waitress configuration
        waitress_config = OptimizedConfig.get_waitress_config()
        
        print('[OK] Starting with Waitress WSGI server (optimized)...')
        print(f'[OK] Threads: {waitress_config["threads"]}')
        print(f'[OK] Connection limit: {waitress_config["connection_limit"]}')
        print(f'[OK] Database pool: {OptimizedConfig.DATABASE_POOL_SIZE} connections')
        print(f'[OK] Task workers: {OptimizedConfig.TASK_QUEUE_MAX_WORKERS} workers')
        print(f'[OK] File workers: {OptimizedConfig.FILE_MANAGER_MAX_WORKERS} workers')
        print('')
        print('[OK] Press Ctrl+C to stop the server')
        print('')
        
        # Start server with optimized settings
        serve(
            app,
            host=waitress_config['host'],
            port=waitress_config['port'],
            threads=waitress_config['threads'],
            connection_limit=waitress_config['connection_limit'],
            cleanup_interval=waitress_config['cleanup_interval'],
            channel_timeout=waitress_config['channel_timeout'],
            max_request_body_size=waitress_config['max_request_body_size'],
            expose_tracebacks=waitress_config['expose_tracebacks'],
            ident=waitress_config['ident']
        )
        
    except ImportError as e:
        print(f'[WARNING] Waitress not available: {e}')
        print('[INFO] Falling back to Flask development server...')
        
        try:
            os.environ['USE_OPTIMIZED_CONFIG'] = '1'
            from app_multiuser import app
            
            print('[WARNING] Using Flask dev server (not recommended for production)')
            print('[INFO] Consider installing Waitress: pip install waitress')
            
            app.run(
                host='0.0.0.0',
                port=5050,
                debug=False,
                threaded=True,
                use_reloader=False,
                processes=1  # Single process for low RAM
            )
        except Exception as e:
            print(f'[ERROR] Flask server failed: {e}')
            return False
            
    except Exception as e:
        print(f'[ERROR] Server startup failed: {e}')
        
        # Check for common issues
        if 'Address already in use' in str(e) or 'WinError 10048' in str(e):
            print('[ERROR] Port 5050 is already in use!')
            print('[FIX] Stop other applications using port 5050')
            print('[FIX] Or change PORT in .env file')
        
        elif 'Permission denied' in str(e):
            print('[ERROR] Permission denied!')
            print('[FIX] Try running as administrator')
        
        elif 'Memory' in str(e) or 'RAM' in str(e):
            print('[ERROR] Insufficient memory!')
            print('[FIX] Close other applications to free up RAM')
            print('[FIX] Consider increasing virtual memory/page file')
        
        else:
            print('[ERROR] Unknown error occurred')
            print('[FIX] Check the logs for more details')
        
        return False
    
    return True

def monitor_resources():
    """Monitor system resources during startup"""
    try:
        process = psutil.Process()
        memory_mb = process.memory_info().rss / (1024*1024)
        cpu_percent = process.cpu_percent()
        
        print(f'[INFO] App memory usage: {memory_mb:.1f} MB')
        if memory_mb > OptimizedConfig.MAX_MEMORY_USAGE_MB:
            print(f'[WARNING] High memory usage detected!')
        
        return True
    except Exception as e:
        print(f'[WARNING] Could not monitor resources: {e}')
        return True

if __name__ == "__main__":
    try:
        success = start_optimized_server()
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        print('\n[INFO] Server stopped by user')
        
        # Show final resource usage
        try:
            process = psutil.Process()
            memory_mb = process.memory_info().rss / (1024*1024)
            print(f'[INFO] Final memory usage: {memory_mb:.1f} MB')
        except:
            pass
        
        sys.exit(0)
    except Exception as e:
        print(f'[ERROR] Unexpected error: {e}')
        sys.exit(1)



================================================
FILE: task_queue.py
================================================
"""
Task Queue System for Multi-User Concurrent Operations
Handles WhatsApp messaging, email sending, and file operations asynchronously
"""
import os
import time
import logging
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed
from queue import Queue, Empty
from dataclasses import dataclass
from typing import List, Dict, Any, Optional, Callable
from datetime import datetime
import json

logger = logging.getLogger(__name__)

@dataclass
class Task:
    """Task definition for queue processing"""
    task_id: str
    task_type: str  # 'whatsapp', 'email', 'file_upload', 'policy_send'
    priority: int  # 1=high, 2=medium, 3=low
    data: Dict[Any, Any]
    callback: Optional[Callable] = None
    retry_count: int = 0
    max_retries: int = 3
    created_at: datetime = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now()

class TaskQueue:
    """Thread-safe task queue with priority handling and retry logic"""
    
    def __init__(self, max_workers=None, max_queue_size=None):
        # Use optimized config if available
        if os.getenv('USE_OPTIMIZED_CONFIG'):
            from config_optimized import OptimizedConfig
            max_workers = max_workers or OptimizedConfig.TASK_QUEUE_MAX_WORKERS
            max_queue_size = max_queue_size or OptimizedConfig.TASK_QUEUE_MAX_SIZE
        else:
            max_workers = max_workers or 10
            max_queue_size = max_queue_size or 1000
        self.max_workers = max_workers
        self.max_queue_size = max_queue_size
        
        # Priority queues (1=high, 2=medium, 3=low)
        self.queues = {
            1: Queue(maxsize=max_queue_size),
            2: Queue(maxsize=max_queue_size),
            3: Queue(maxsize=max_queue_size)
        }
        
        self.executor = ThreadPoolExecutor(max_workers=max_workers, thread_name_prefix="TaskWorker")
        self.running = True
        self.workers = []
        self.task_results = {}
        self.failed_tasks = Queue()
        
        # Statistics
        self.stats = {
            'total_tasks': 0,
            'completed_tasks': 0,
            'failed_tasks': 0,
            'active_workers': 0
        }
        
        # Start worker threads
        self._start_workers()
        
        logger.info(f"Task queue initialized with {max_workers} workers")
    
    def _start_workers(self):
        """Start worker threads for processing tasks"""
        for i in range(self.max_workers):
            worker = threading.Thread(
                target=self._worker_loop,
                name=f"TaskWorker-{i}",
                daemon=True
            )
            worker.start()
            self.workers.append(worker)
    
    def _worker_loop(self):
        """Main worker loop for processing tasks"""
        while self.running:
            try:
                task = self._get_next_task()
                if task:
                    self.stats['active_workers'] += 1
                    try:
                        self._process_task(task)
                        self.stats['completed_tasks'] += 1
                    except Exception as e:
                        logger.error(f"Task {task.task_id} failed: {e}")
                        self._handle_failed_task(task, str(e))
                    finally:
                        self.stats['active_workers'] -= 1
                else:
                    time.sleep(0.1)  # No tasks available, sleep briefly
            except Exception as e:
                logger.error(f"Worker loop error: {e}")
                time.sleep(1)
    
    def _get_next_task(self) -> Optional[Task]:
        """Get next task from priority queues (high priority first)"""
        for priority in [1, 2, 3]:
            try:
                return self.queues[priority].get_nowait()
            except Empty:
                continue
        return None
    
    def _process_task(self, task: Task):
        """Process a single task based on its type"""
        logger.info(f"Processing task {task.task_id} of type {task.task_type}")
        
        try:
            if task.task_type == 'whatsapp':
                self._process_whatsapp_task(task)
            elif task.task_type == 'email':
                self._process_email_task(task)
            elif task.task_type == 'file_upload':
                self._process_file_upload_task(task)
            elif task.task_type == 'policy_send':
                self._process_policy_send_task(task)
            elif task.task_type == 'batch_whatsapp':
                self._process_batch_whatsapp_task(task)
            elif task.task_type == 'batch_email':
                self._process_batch_email_task(task)
            else:
                raise ValueError(f"Unknown task type: {task.task_type}")
            
            # Store success result
            self.task_results[task.task_id] = {
                'status': 'completed',
                'completed_at': datetime.now(),
                'result': 'Success'
            }
            
            # Call callback if provided
            if task.callback:
                task.callback(task, True, None)
                
        except Exception as e:
            logger.error(f"Task {task.task_id} processing failed: {e}")
            raise
    
    def _process_whatsapp_task(self, task: Task):
        """Process WhatsApp message task"""
        from whatsapp_bot import send_whatsapp_message
        
        phone = task.data.get('phone')
        message = task.data.get('message')
        
        if not phone or not message:
            raise ValueError("WhatsApp task missing phone or message")
        
        result = send_whatsapp_message(phone, message)
        if result.get('error'):
            raise Exception(f"WhatsApp send failed: {result['error']}")
        
        logger.info(f"WhatsApp message sent to {phone}: {result.get('sid')}")
    
    def _process_email_task(self, task: Task):
        """Process email sending task"""
        from email_service import send_email
        
        email = task.data.get('email')
        subject = task.data.get('subject')
        body = task.data.get('body')
        attachments = task.data.get('attachments', [])
        customer_name = task.data.get('customer_name', 'Customer')
        
        if not email or not subject or not body:
            raise ValueError("Email task missing required fields")
        
        success, message = send_email(email, subject, body, attachments, customer_name)
        if not success:
            raise Exception(f"Email send failed: {message}")
        
        logger.info(f"Email sent to {email}")
    
    def _process_file_upload_task(self, task: Task):
        """Process file upload to Google Drive"""
        from renewal_service import upload_renewed_policy_file
        
        file_data = task.data.get('file')
        policy_id = task.data.get('policy_id')
        client_id = task.data.get('client_id')
        member_name = task.data.get('member_name')
        
        if not all([file_data, policy_id, client_id, member_name]):
            raise ValueError("File upload task missing required fields")
        
        result, error = upload_renewed_policy_file(file_data, policy_id, client_id, member_name)
        if error:
            raise Exception(f"File upload failed: {error}")
        
        logger.info(f"File uploaded for policy {policy_id}")
    
    def _process_policy_send_task(self, task: Task):
        """Process sending policy document to customer"""
        from whatsapp_bot import send_policy_to_customer
        
        phone = task.data.get('phone')
        policy = task.data.get('policy')
        send_email = task.data.get('send_email', True)
        
        if not phone or not policy:
            raise ValueError("Policy send task missing phone or policy")
        
        success, message = send_policy_to_customer(phone, policy, send_email)
        if not success:
            raise Exception(f"Policy send failed: {message}")
        
        logger.info(f"Policy sent to {phone}")
    
    def _process_batch_whatsapp_task(self, task: Task):
        """Process batch WhatsApp messages"""
        from whatsapp_bot import send_whatsapp_message
        
        messages = task.data.get('messages', [])
        results = []
        
        for msg_data in messages:
            try:
                phone = msg_data.get('phone')
                message = msg_data.get('message')
                
                if phone and message:
                    result = send_whatsapp_message(phone, message)
                    results.append({
                        'phone': phone,
                        'success': not result.get('error'),
                        'message': result.get('sid') or result.get('error')
                    })
                    
                    # Small delay to avoid rate limiting
                    time.sleep(0.5)
                    
            except Exception as e:
                logger.error(f"Batch WhatsApp message failed for {msg_data.get('phone')}: {e}")
                results.append({
                    'phone': msg_data.get('phone'),
                    'success': False,
                    'message': str(e)
                })
        
        logger.info(f"Batch WhatsApp completed: {len(results)} messages processed")
        return results
    
    def _process_batch_email_task(self, task: Task):
        """Process batch email sending"""
        from email_service import send_email
        
        emails = task.data.get('emails', [])
        results = []
        
        for email_data in emails:
            try:
                email = email_data.get('email')
                subject = email_data.get('subject')
                body = email_data.get('body')
                attachments = email_data.get('attachments', [])
                customer_name = email_data.get('customer_name', 'Customer')
                
                if email and subject and body:
                    success, message = send_email(email, subject, body, attachments, customer_name)
                    results.append({
                        'email': email,
                        'success': success,
                        'message': message
                    })
                    
                    # Small delay to avoid rate limiting
                    time.sleep(1)
                    
            except Exception as e:
                logger.error(f"Batch email failed for {email_data.get('email')}: {e}")
                results.append({
                    'email': email_data.get('email'),
                    'success': False,
                    'message': str(e)
                })
        
        logger.info(f"Batch email completed: {len(results)} emails processed")
        return results
    
    def _handle_failed_task(self, task: Task, error_message: str):
        """Handle failed task with retry logic"""
        task.retry_count += 1
        
        if task.retry_count <= task.max_retries:
            # Retry with exponential backoff
            delay = min(2 ** task.retry_count, 60)  # Max 60 seconds
            logger.warning(f"Retrying task {task.task_id} in {delay} seconds (attempt {task.retry_count}/{task.max_retries})")
            
            # Schedule retry
            threading.Timer(delay, lambda: self.add_task(task)).start()
        else:
            # Max retries exceeded
            logger.error(f"Task {task.task_id} failed permanently after {task.max_retries} retries")
            self.stats['failed_tasks'] += 1
            self.failed_tasks.put(task)
            
            # Store failure result
            self.task_results[task.task_id] = {
                'status': 'failed',
                'failed_at': datetime.now(),
                'error': error_message,
                'retry_count': task.retry_count
            }
            
            # Call callback if provided
            if task.callback:
                task.callback(task, False, error_message)
    
    def add_task(self, task: Task) -> bool:
        """Add task to appropriate priority queue"""
        try:
            if task.priority not in self.queues:
                task.priority = 2  # Default to medium priority
            
            self.queues[task.priority].put_nowait(task)
            self.stats['total_tasks'] += 1
            
            logger.debug(f"Task {task.task_id} added to queue (priority {task.priority})")
            return True
            
        except Exception as e:
            logger.error(f"Failed to add task {task.task_id}: {e}")
            return False
    
    def get_task_result(self, task_id: str) -> Optional[Dict]:
        """Get result of a completed task"""
        return self.task_results.get(task_id)
    
    def get_queue_stats(self) -> Dict:
        """Get current queue statistics"""
        queue_sizes = {
            priority: queue.qsize() 
            for priority, queue in self.queues.items()
        }
        
        return {
            **self.stats,
            'queue_sizes': queue_sizes,
            'total_queue_size': sum(queue_sizes.values()),
            'failed_queue_size': self.failed_tasks.qsize()
        }
    
    def shutdown(self):
        """Gracefully shutdown the task queue"""
        logger.info("Shutting down task queue...")
        self.running = False
        
        # Wait for workers to finish
        for worker in self.workers:
            worker.join(timeout=30)
        
        self.executor.shutdown(wait=True)
        logger.info("Task queue shutdown complete")

# Global task queue instance
# Use optimized config if available
if os.getenv('USE_OPTIMIZED_CONFIG'):
    from config_optimized import OptimizedConfig
    task_queue = TaskQueue(
        max_workers=OptimizedConfig.TASK_QUEUE_MAX_WORKERS,
        max_queue_size=OptimizedConfig.TASK_QUEUE_MAX_SIZE
    )
else:
    task_queue = TaskQueue(max_workers=15, max_queue_size=2000)

# Convenience functions for common operations
def send_whatsapp_async(phone: str, message: str, priority: int = 2, callback: Callable = None) -> str:
    """Send WhatsApp message asynchronously"""
    task_id = f"whatsapp_{int(time.time() * 1000)}"
    task = Task(
        task_id=task_id,
        task_type='whatsapp',
        priority=priority,
        data={'phone': phone, 'message': message},
        callback=callback
    )
    
    if task_queue.add_task(task):
        return task_id
    else:
        raise Exception("Failed to queue WhatsApp task")

def send_email_async(email: str, subject: str, body: str, attachments: List = None, 
                    customer_name: str = 'Customer', priority: int = 2, callback: Callable = None) -> str:
    """Send email asynchronously"""
    task_id = f"email_{int(time.time() * 1000)}"
    task = Task(
        task_id=task_id,
        task_type='email',
        priority=priority,
        data={
            'email': email,
            'subject': subject,
            'body': body,
            'attachments': attachments or [],
            'customer_name': customer_name
        },
        callback=callback
    )
    
    if task_queue.add_task(task):
        return task_id
    else:
        raise Exception("Failed to queue email task")

def send_policy_async(phone: str, policy: Dict, send_email: bool = True, 
                     priority: int = 1, callback: Callable = None) -> str:
    """Send policy document asynchronously"""
    task_id = f"policy_{int(time.time() * 1000)}"
    task = Task(
        task_id=task_id,
        task_type='policy_send',
        priority=priority,
        data={
            'phone': phone,
            'policy': policy,
            'send_email': send_email
        },
        callback=callback
    )
    
    if task_queue.add_task(task):
        return task_id
    else:
        raise Exception("Failed to queue policy send task")

def send_batch_whatsapp_async(messages: List[Dict], priority: int = 2, callback: Callable = None) -> str:
    """Send multiple WhatsApp messages asynchronously"""
    task_id = f"batch_whatsapp_{int(time.time() * 1000)}"
    task = Task(
        task_id=task_id,
        task_type='batch_whatsapp',
        priority=priority,
        data={'messages': messages},
        callback=callback
    )
    
    if task_queue.add_task(task):
        return task_id
    else:
        raise Exception("Failed to queue batch WhatsApp task")

def send_batch_email_async(emails: List[Dict], priority: int = 2, callback: Callable = None) -> str:
    """Send multiple emails asynchronously"""
    task_id = f"batch_email_{int(time.time() * 1000)}"
    task = Task(
        task_id=task_id,
        task_type='batch_email',
        priority=priority,
        data={'emails': emails},
        callback=callback
    )
    
    if task_queue.add_task(task):
        return task_id
    else:
        raise Exception("Failed to queue batch email task")

def get_queue_status() -> Dict:
    """Get current queue status and statistics"""
    try:
        stats = task_queue.get_queue_stats()
        return {
            'status': 'healthy',
            'stats': stats,
            'message': 'Task queue is running normally'
        }
    except Exception as e:
        return {
            'status': 'error',
            'stats': {},
            'message': f'Task queue error: {str(e)}'
        }



================================================
FILE: TWILIO_WEBHOOK_FIXED.md
================================================
# ✅ Twilio WhatsApp Webhook Fixed in Multi-User App

## 🔧 Problem Identified:
The optimized multi-user app (`app_multiuser.py`) was missing the Twilio WhatsApp webhook endpoint, causing the "Hi" messaging feature to fail.

## 📋 Changes Made:

### 1. Added Import:
```python
from whatsapp_bot import setup_whatsapp_webhook
```

### 2. Added Webhook Setup:
```python
# Setup Twilio WhatsApp webhook (for existing Twilio integration)
setup_whatsapp_webhook(app)
```

## ✅ What's Now Available:

### **Both Webhook Endpoints:**
1. **`/twilio/whatsapp`** - For Twilio WhatsApp (your current setup)
2. **`/webhook`** - For Meta WhatsApp Business API (future use)

### **Hi Messaging Features:**
- ✅ Responds to "Hi", "Hello", "Hey", "Start"
- ✅ Sends list picker with policy options
- ✅ Handles policy selection
- ✅ Sends policy documents
- ✅ Session management
- ✅ All existing Twilio functionality

## 🚀 Now Working:

When you restart the optimized server:
```cmd
start_optimized.bat
```

Your Twilio webhook at:
```
https://admin.instainsure.co.in/twilio/whatsapp
```

Will now work with:
- ✅ 3 task workers (optimized)
- ✅ 2 file workers (optimized) 
- ✅ 3 database connections (optimized)
- ✅ Full Twilio WhatsApp functionality
- ✅ Hi messaging with list picker
- ✅ Policy document sending

## 📊 Expected Behavior:

### User sends "Hi" to your WhatsApp:
1. **Server receives** message at `/twilio/whatsapp`
2. **Calls** `handle_greeting(phone_number)`
3. **Queries database** for user's policies
4. **Sends list picker** with policy options
5. **User selects policy** from list
6. **Server sends** policy document

## 🎯 Perfect Integration:

Your optimized server now has:
- ✅ **Performance optimization** (3 workers instead of 15)
- ✅ **Memory optimization** (100-150MB instead of 300MB)
- ✅ **Full Twilio compatibility** (all existing features work)
- ✅ **Hi messaging service** (list picker functionality)

**Ready to test! Restart the server and try sending "Hi" to your WhatsApp number.** 🎉



================================================
FILE: whatsapp_bot.py
================================================
from flask import request, jsonify
import os
import time
from supabase import create_client
from dynamic_config import Config
import tempfile
import io
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from email_service import send_policy_email, send_renewal_reminder_email, get_customer_email, indian_date_filter
from twilio.rest import Client as TwilioClient
from twilio.twiml.messaging_response import MessagingResponse
from urllib.parse import quote
import json
import requests
from datetime import datetime
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Import WhatsApp service for logging (avoid circular import by importing here)
try:
    from whatsapp_service import WhatsAppService
except ImportError:
    # Handle case where whatsapp_service is not available yet
    WhatsAppService = None


# Initialize Supabase
supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)

# Twilio WhatsApp Configuration
TWILIO_ACCOUNT_SID = Config.TWILIO_ACCOUNT_SID
TWILIO_AUTH_TOKEN = Config.TWILIO_AUTH_TOKEN
TWILIO_FROM = Config.TWILIO_WHATSAPP_FROM  # e.g., 'whatsapp:+14155238886'
TWILIO_USE_CONTENT_TEMPLATE = Config.TWILIO_USE_CONTENT_TEMPLATE
TWILIO_CONTENT_SID = Config.TWILIO_CONTENT_SID
VERIFY_TOKEN = os.getenv('VERIFY_TOKEN', 'your_webhook_verify_token')
twilio_client = TwilioClient(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN) if (TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN) else None

# Content Template SIDs - APPROVED TEMPLATES
POLICY_DOCUMENT_TEMPLATE_SID = "HX09943977f51524767ed93c7cc670fb47"  # Policy Issued Template
RENEWAL_REMINDER_TEMPLATE_SID = "HX169afdf8bae849bb296476c9d4e4db9d"   # Renewal Reminder Template

# WhatsApp Media Configuration
USE_CONTENT_TEMPLATES = os.getenv('USE_WHATSAPP_CONTENT_TEMPLATES', 'true').lower() == 'true'

# Google Drive Configuration
GOOGLE_CREDENTIALS_FILE = os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json')

# Store user sessions
user_sessions = {}

# Track processed messages to prevent duplicates
processed_messages = {}  # Track processed message IDs
MESSAGE_EXPIRY = 300  # 5 minutes

# Store temporary renewal files (cleaned up automatically when temp files are deleted)
temp_renewal_files = {}


def is_duplicate_message(message_id):
    """Check if message was already processed and clean old entries"""
    current_time = time.time()

    # Clean up old message IDs
    expired_ids = [mid for mid, timestamp in processed_messages.items()
                   if current_time - timestamp > MESSAGE_EXPIRY]
    for mid in expired_ids:
        del processed_messages[mid]

    # Check if this message was already processed
    if message_id in processed_messages:
        return True

    # Mark as processed
    processed_messages[message_id] = current_time
    return False


def send_whatsapp_message(to_number, message_text):
    """Send a WhatsApp text message via Twilio. If configured, use Content Template."""
    if not twilio_client:
        return {"error": "Twilio not configured"}
    try:
        if TWILIO_USE_CONTENT_TEMPLATE and TWILIO_CONTENT_SID:
            msg = twilio_client.messages.create(
                from_=format_whatsapp_address(TWILIO_FROM),
                content_sid=TWILIO_CONTENT_SID,
                content_variables=json.dumps({"1": message_text}),
                to=format_whatsapp_address(to_number)
            )
        else:
            msg = twilio_client.messages.create(
                from_=format_whatsapp_address(TWILIO_FROM),
                body=message_text,
                to=format_whatsapp_address(to_number)
            )
        
        # Log message to database if WhatsAppService is available
        if WhatsAppService:
            try:
                WhatsAppService.log_message(
                    message_sid=msg.sid,
                    phone_number=to_number,
                    message_type="general",
                    message_content=message_text,
                    status='queued'
                )
            except Exception as log_error:
                logger.error(f"Failed to log WhatsApp message {msg.sid}: {log_error}")
        
        return {"sid": msg.sid}
    except Exception as e:
        print(f"Error sending WhatsApp message: {e}")
        return {"error": str(e)}


def send_content_template_message(to_number, content_sid, variables, media_url=None):
    """Send a WhatsApp message using Content Template with optional media"""
    if not twilio_client:
        return {"error": "Twilio not configured"}
    
    try:
        # Validate that all variables have non-empty values and valid format (Twilio requirement)
        for key, value in variables.items():
            if not value or (isinstance(value, str) and value.strip() == ''):
                logger.warning(f"Empty variable detected: {key} = '{value}', replacing with 'N/A'")
                variables[key] = 'N/A'
            elif isinstance(value, str):
                # Clean up any problematic characters that might cause Twilio issues
                # Remove any null bytes or control characters
                cleaned_value = ''.join(char for char in value if ord(char) >= 32 or char in '\n\r\t')
                if cleaned_value != value:
                    logger.warning(f"Cleaned variable {key}: '{value}' -> '{cleaned_value}'")
                    variables[key] = cleaned_value
        
        # Log the variables being sent for debugging
        logger.info(f"Sending content template {content_sid} with variables: {variables}")
        
        message_params = {
            'from_': format_whatsapp_address(TWILIO_FROM),
            'content_sid': content_sid,
            'content_variables': json.dumps(variables),
            'to': format_whatsapp_address(to_number)
        }
        
        # Add media URL if provided
        if media_url:
            message_params['media_url'] = [media_url]
        
        msg = twilio_client.messages.create(**message_params)
        logger.info(f"Content template message sent successfully: {msg.sid}")
        
        # Log message to database if WhatsAppService is available
        if WhatsAppService:
            try:
                # Determine message type from content_sid
                message_type = "general"
                if content_sid == POLICY_DOCUMENT_TEMPLATE_SID:
                    message_type = "policy_document"
                elif content_sid == RENEWAL_REMINDER_TEMPLATE_SID:
                    message_type = "renewal_reminder"
                
                # Create message content summary
                message_content = f"Content template: {content_sid}"
                if variables:
                    message_content += f" | Variables: {json.dumps(variables)}"
                
                WhatsAppService.log_message(
                    message_sid=msg.sid,
                    phone_number=to_number,
                    message_type=message_type,
                    message_content=message_content,
                    media_url=media_url,
                    status='queued'
                )
            except Exception as log_error:
                logger.error(f"Failed to log WhatsApp message {msg.sid}: {log_error}")
        
        return {"sid": msg.sid}
    except Exception as e:
        logger.error(f"Error sending content template message: {e}")
        logger.error(f"Variables that caused error: {variables}")
        return {"error": str(e)}


def send_policy_document_whatsapp(phone, policy, customer_name):
    """
    Send policy document via WhatsApp using the appropriate method:
    - Content Templates (for approved templates)
    - Traditional media messages (for Google Drive files)
    """
    if not twilio_client:
        return {"error": "Twilio not configured"}
    
    try:
        # Get file information
        file_id = extract_file_id_from_url(policy.get('drive_url'))
        if not file_id:
            return {"error": "No drive URL found"}
        
        # Format dates
        coverage_start = policy.get('policy_from', '')
        expiry_date = policy.get('policy_to', '')
        
        # Convert dates to Indian format (DD/MM/YYYY)
        if coverage_start and isinstance(coverage_start, str) and '-' in coverage_start:
            parts = coverage_start.split('-')
            if len(parts) == 3 and len(parts[0]) == 4:
                coverage_start = f"{parts[2]}/{parts[1]}/{parts[0]}"
        
        if expiry_date and isinstance(expiry_date, str) and '-' in expiry_date:
            parts = expiry_date.split('-')
            if len(parts) == 3 and len(parts[0]) == 4:
                expiry_date = f"{parts[2]}/{parts[1]}/{parts[0]}"
        
        # Use approved Content Templates with dynamic media URLs
        if USE_CONTENT_TEMPLATES:
            # Generate the media URL path for template variable {{7}}
            filename = f"{policy.get('insurance_company','')}_{policy.get('product_name','')}.pdf".replace(' ', '_')
            safe_filename = quote(filename, safe='')
            media_path = f"media/drive/{file_id}/{safe_filename}"  # Path only, not full URL
            
            # Prepare template variables for approved template
            # Ensure all variables have non-empty values (Twilio doesn't allow empty strings)
            template_variables = {
                "1": customer_name or "Customer",
                "2": policy.get('product_name') or 'Insurance Policy',
                "3": policy.get('policy_number') or 'N/A',
                "4": policy.get('remarks') or 'N/A',
                "5": coverage_start or 'N/A',
                "6": expiry_date or 'N/A',
                "7": media_path or 'test-policy.pdf'  # This will be used in template as: https://admin.instainsure.co.in/{{7}}
            }
            
            return send_content_template_message(
                phone, 
                POLICY_DOCUMENT_TEMPLATE_SID, 
                template_variables, 
                None  # No separate media_url needed since it's in template
            )
        
        else:
            # Fallback: Traditional approach with media URL (Google Drive files)
            filename = f"{policy.get('insurance_company','')}_{policy.get('product_name','')}.pdf".replace(' ', '_')
            safe_filename = quote(filename, safe='')
            base_url = Config.APP_BASE_URL.rstrip('/')
            media_url = f"{base_url}/media/drive/{file_id}/{safe_filename}"
            
            # Create message body using template format
            message_body = f"""Hello {customer_name}!

We're happy to inform you that your new *{policy.get('product_name', 'Insurance Policy')}* policy has been successfully issued.

Company: {policy.get('insurance_company', '')}
Policy Number: {policy.get('policy_number', 'N/A')}
Coverage Start Date: {coverage_start or 'N/A'}
Expiry Date: {expiry_date or 'N/A'}

You can reply with *HI* anytime to view all your policy documents.

Best regards,
Insta Insurance Consultancy"""

            # Send with media attachment
            msg = twilio_client.messages.create(
                from_=format_whatsapp_address(TWILIO_FROM),
                body=message_body,
                media_url=[media_url],
                to=format_whatsapp_address(phone)
            )
            
            return {"sid": msg.sid}
            
    except Exception as e:
        logger.error(f"Error sending policy document via WhatsApp: {e}")
        return {"error": str(e)}


def send_list_picker_message(to, body_text, button_text, items, variables=None):
    """Send a list picker message using Twilio Content API"""
    if not twilio_client:
        return {"error": "Twilio not configured"}
        
    try:
        # Create a unique friendly name for this content template
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        friendly_name = f"policy_list_{timestamp}"
        
        # Prepare content template data following Twilio docs exactly
        content_data = {
            "friendly_name": friendly_name,
            "language": "en",
            "variables": variables or {"1": "customer_name"},
            "types": {
                "twilio/list-picker": {
                    "body": body_text,
                    "button": button_text,
                    "items": items
                },
                "twilio/text": {
                    "body": body_text + "\n\n" + "\n".join([f"{i+1}. {item['item']}" for i, item in enumerate(items)])
                }
            }
        }
        
        print(f"Creating content template with data: {json.dumps(content_data, indent=2)}")
        
        # Create content template using Twilio REST API
        url = "https://content.twilio.com/v1/Content"
        auth = (TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
        headers = {'Content-Type': 'application/json'}
        
        response = requests.post(url, json=content_data, auth=auth, headers=headers)
        
        print(f"Content template creation response: {response.status_code} - {response.text}")
        
        if response.status_code == 201:
            content = response.json()
            content_sid = content.get('sid')
            print(f"Content template created successfully: {content_sid}")
            
            # Send message using the content template
            msg = twilio_client.messages.create(
                from_=format_whatsapp_address(TWILIO_FROM),
                content_sid=content_sid,
                content_variables=json.dumps(variables or {}),
                to=format_whatsapp_address(to)
            )
            
            return {"sid": msg.sid, "content_sid": content_sid}
        else:
            print(f"Error creating content template: {response.status_code} - {response.text}")
            # Fallback to plain text menu
            return send_interactive_list_fallback(to, body_text, button_text, items)
            
    except Exception as e:
        print(f"Error sending list picker message: {e}")
        import traceback
        traceback.print_exc()
        # Fallback to plain text menu
        return send_interactive_list_fallback(to, body_text, button_text, items)


def send_interactive_list_fallback(to, body_text, button_text, items):
    """Fallback to plain text menu when list picker fails"""
    menu_lines = [body_text, ""]
    for idx, item in enumerate(items):
        menu_lines.append(f"{item.get('id', idx)}. {item.get('item', item.get('title', ''))}")
    menu_lines.append("\nReply with the number to choose.")
    return send_whatsapp_message(to, "\n".join(menu_lines))


def send_interactive_list(to, body_text, button_text, sections):
    """If content template is enabled, send with ContentSID and vars; else send a plain text menu."""
    if TWILIO_USE_CONTENT_TEMPLATE and TWILIO_CONTENT_SID:
        # Flatten first 10 items as variables for a template like: 1) {{1}}, 2) {{2}}, ...
        rows = sections[0]['rows'] if sections else []
        variables = {str(i + 1): rows[i].get('title', '') for i in range(min(10, len(rows)))}
        variables['body'] = body_text
        try:
            msg = twilio_client.messages.create(
                from_=format_whatsapp_address(TWILIO_FROM),
                content_sid=TWILIO_CONTENT_SID,
                content_variables=json.dumps(variables),
                to=format_whatsapp_address(to)
            )
            return {"sid": msg.sid}
        except Exception as e:
            print(f"Error sending content template: {e}")
            # Fallback to plain text menu
    # Plain text fallback
    menu_lines = [body_text, ""]
    for idx, row in enumerate(sections[0]['rows'] if sections else []):
        menu_lines.append(f"{row.get('id', idx)}. {row.get('title','')}")
    menu_lines.append("\nReply with the number to choose.")
    return send_whatsapp_message(to, "\n".join(menu_lines))


def upload_media_to_whatsapp(file_path):
    """No-op in Twilio flow (uses media_url). Kept for backward compatibility."""
    return None


def send_document(to, media_url, filename, caption=''):
    """Send a document via Twilio WhatsApp using media_url"""
    if not twilio_client:
        return {"error": "Twilio not configured"}
    try:
        msg = twilio_client.messages.create(
            from_=format_whatsapp_address(TWILIO_FROM),
            body=caption if caption else None,
            media_url=[media_url],
            to=format_whatsapp_address(to)
        )
        return {"sid": msg.sid}
    except Exception as e:
        print(f"Error sending document: {e}")
        return {"error": str(e)}


def get_drive_service():
    """Initialize Google Drive service"""
    try:
        SCOPES = ['https://www.googleapis.com/auth/drive.readonly']
        credentials = service_account.Credentials.from_service_account_file(
            GOOGLE_CREDENTIALS_FILE, scopes=SCOPES)
        service = build('drive', 'v3', credentials=credentials)
        return service
    except Exception as e:
        print(f"Error initializing Google Drive service: {e}")
        return None


def extract_file_id_from_url(drive_url):
    """Extract file ID from Google Drive URL"""
    if not drive_url:
        return None

    if '/file/d/' in drive_url:
        file_id = drive_url.split('/file/d/')[1].split('/')[0]
    elif '/open?id=' in drive_url:
        file_id = drive_url.split('/open?id=')[1].split('&')[0]
    elif 'id=' in drive_url:
        file_id = drive_url.split('id=')[1].split('&')[0]
    else:
        file_id = drive_url.strip()

    return file_id


def download_file_from_drive(file_id, filename):
    """Download file from Google Drive"""
    try:
        service = get_drive_service()
        if not service:
            return None

        temp_dir = tempfile.gettempdir()
        temp_file_path = os.path.join(temp_dir, filename)

        request_obj = service.files().get_media(fileId=file_id)
        fh = io.FileIO(temp_file_path, 'wb')
        downloader = MediaIoBaseDownload(fh, request_obj)

        done = False
        while not done:
            status, done = downloader.next_chunk()

        fh.close()
        return temp_file_path

    except Exception as e:
        print(f"Error downloading file from Drive: {e}")
        return None


def delete_temp_file(file_path):
    """Delete temporary file with retry logic"""
    max_retries = 3
    retry_delay = 1  # seconds

    for attempt in range(max_retries):
        try:
            if os.path.exists(file_path):
                # Close any file handles first
                time.sleep(0.5)  # Give system time to release file
                os.remove(file_path)
                print(f"Successfully deleted temp file: {file_path}")
                return True
        except Exception as e:
            if attempt < max_retries - 1:
                print(f"Retry {attempt + 1}/{max_retries} deleting file: {e}")
                time.sleep(retry_delay)
            else:
                print(f"Warning: Could not delete temp file after {max_retries} attempts: {e}")
                # Don't raise error - just log it
                return False
    return False


def normalize_phone(phone):
    """Normalize phone number"""
    return phone.replace('+', '').replace(' ', '').replace('-', '')


def format_whatsapp_address(number: str) -> str:
    """Ensure Twilio WhatsApp address format: 'whatsapp:+<E164>'"""
    # If already in whatsapp format, return as is
    if number.startswith('whatsapp:'):
        return number
    # Otherwise, format it properly
    return f"whatsapp:+{normalize_phone(number)}"


def get_customer_policies(phone):
    """Fetch client and policies from Supabase"""
    normalized_phone = normalize_phone(phone)

    try:
        for phone_format in [normalized_phone, f'+{normalized_phone}', phone]:
            client_response = supabase.table('clients').select('*').eq('phone', phone_format).execute()
            if client_response.data:
                break

        if not client_response.data:
            return None, []

        client = client_response.data[0]
        client_id = client['client_id']

        policies_response = supabase.table('policies').select('*').eq('client_id', client_id).execute()
        return client, policies_response.data

    except Exception as e:
        print(f"Error fetching customer policies: {e}")
        return None, []


def send_all_policies_to_customer(phone, policies):
    """Send all policy documents to customer in one email and individual WhatsApp messages"""
    try:
        if not phone or not policies:
            logger.error(f"Invalid parameters: phone={phone}, policies_count={len(policies) if policies else 0}")
            return False, "Invalid phone number or no policies provided"
            
        if not isinstance(policies, list) or len(policies) == 0:
            logger.error(f"Invalid policies data: {type(policies)}")
            return False, "No valid policies found"
            
        whatsapp_success_count = 0
        email_success = False
        email_message = ""
        
        logger.info(f"Sending {len(policies)} policies to {phone}")
        
        # Send each policy via WhatsApp individually (WhatsApp doesn't support multiple attachments)
        for policy in policies:
            success, msg = send_policy_to_customer(phone, policy, send_email=False)  # Skip email for individual policies
            if success:
                whatsapp_success_count += 1
        
        # Send all policies in ONE email with multiple attachments
        try:
            customer_email = get_customer_email(phone)
        except Exception as e:
            logger.error(f"Error getting customer email for {phone}: {e}")
            customer_email = None
            
        if customer_email:
            try:
                client, _ = get_customer_policies(phone)
                customer_name = client['name'] if client else "Customer"
            except Exception as e:
                logger.error(f"Error getting customer data for {phone}: {e}")
                customer_name = "Customer"
            
            # Download all policy files temporarily
            temp_files = []
            policy_details = []
            download_errors = []
            
            for policy in policies:
                if policy.get('drive_url'):
                    try:
                        file_id = extract_file_id_from_url(policy.get('drive_url'))
                        if file_id:
                            filename = f"{policy.get('insurance_company', 'Policy')}_{policy.get('product_name', 'Document')}.pdf".replace(' ', '_')
                            temp_file_path = download_file_from_drive(file_id, filename)
                            if temp_file_path:
                                temp_files.append(temp_file_path)
                                
                                # Format expiry date
                                expiry_date = policy.get('policy_to', 'N/A')
                                if expiry_date and expiry_date != 'N/A':
                                    try:
                                        if isinstance(expiry_date, str) and '-' in expiry_date:
                                            parts = expiry_date.split('-')
                                            if len(parts) == 3 and len(parts[0]) == 4:
                                                expiry_date = f"{parts[2]}/{parts[1]}/{parts[0]}"
                                    except:
                                        pass
                                
                                policy_details.append({
                                    'insurance': policy.get('product_name', 'Insurance Policy'),
                                    'company': policy.get('insurance_company', ''),
                                    'policy_number': policy.get('policy_number', 'N/A'),
                                    'expiry': expiry_date
                                })
                    except Exception as e:
                        error_msg = f"Failed to download {policy.get('product_name', 'policy')}: {str(e)}"
                        download_errors.append(error_msg)
                        logger.error(f"Download error for policy {policy.get('policy_id')}: {e}")
                else:
                    download_errors.append(f"No drive URL for {policy.get('product_name', 'policy')}")
            
            # Send one email with all attachments
            if temp_files:
                subject = f"Your Insurance Policy Documents - {len(temp_files)} Policies"
                
                body = f"""Dear {customer_name},

Thank you for using Insta Insurance Consultancy Portal! Please find all your insurance policy documents attached to this email.

Policy Summary:
"""
                for i, details in enumerate(policy_details, 1):
                    body += f"""
{i}. {details['insurance']}
   • Company: {details['company']}
   • Policy Number: {details['policy_number']}
   • Expiry Date: {details['expiry']}
"""
                
                body += f"""

All {len(temp_files)} policy documents are attached to this email for your records.

For any queries or assistance, please feel free to contact us.

Thank you for choosing our services!

Best regards,
Insta Insurance Consultancy Portal"""

                try:
                    from email_service import send_email
                    email_success, email_message = send_email(
                        customer_email, 
                        subject, 
                        body, 
                        attachments=temp_files,
                        customer_name=customer_name
                    )
                    if email_success:
                        logger.info(f"Successfully sent {len(temp_files)} policies via email to {customer_email}")
                    else:
                        logger.error(f"Email sending failed: {email_message}")
                except Exception as e:
                    email_success = False
                    email_message = f"Email service error: {str(e)}"
                    logger.error(f"Email service error: {e}")
                
                # Clean up temp files
                for temp_file in temp_files:
                    try:
                        import os
                        if os.path.exists(temp_file):
                            os.remove(temp_file)
                    except:
                        pass
        
        # Prepare response messages
        messages = []
        if whatsapp_success_count > 0:
            messages.append(f"WhatsApp: {whatsapp_success_count}/{len(policies)} documents sent")
        else:
            messages.append("WhatsApp: Failed to send documents")

        if email_success:
            messages.append(f"Email: All {len(policies)} documents sent in one email")
        else:
            messages.append(f"Email: {email_message}")

        overall_success = whatsapp_success_count > 0 or email_success
        return overall_success, " | ".join(messages)
        
    except Exception as e:
        logger.error(f"Error sending all policies to customer: {e}")
        return False, str(e)


def send_policy_to_customer(phone, policy, send_email=True):
    """Send a single policy document to customer via WhatsApp and email"""
    temp_file_path = None
    try:
        file_id = extract_file_id_from_url(policy.get('drive_url'))
        if not file_id:
            return False, "No drive URL found"

        filename = f"{policy.get('insurance_company','')}_{policy.get('product_name','')}.pdf".replace(' ', '_')
        
        # For email, we need to download the file temporarily
        if send_email:
            temp_file_path = download_file_from_drive(file_id, filename)
            if not temp_file_path:
                return False, "Could not download file for email"

        # Send via WhatsApp using the appropriate method
        whatsapp_success = False
        if policy.get('drive_url'):
            # Get customer name
            try:
                client, _ = get_customer_policies(phone)
                customer_name = client['name'] if client else "Customer"
            except:
                customer_name = "Customer"
            
            # Send policy document via WhatsApp
            send_res = send_policy_document_whatsapp(phone, policy, customer_name)
            whatsapp_success = not send_res.get('error')
            
            if send_res.get('error'):
                logger.error(f"WhatsApp sending failed: {send_res['error']}")
            else:
                logger.info(f"Policy document sent via WhatsApp to {phone}: {send_res.get('sid')}")

        # Send via email (only if send_email is True)
        email_success = False
        email_message = ""

        if send_email:
            customer_email = get_customer_email(phone)
            if customer_email:
                client, _ = get_customer_policies(phone)
                customer_name = client['name'] if client else "Customer"

                # Prepare policy data for the new template-based function
                policy_data = {
                    'client_name': customer_name,
                    'policy_type': policy.get('product_name', 'Insurance'),
                    'policy_no': policy.get('policy_number', 'N/A'),
                    'asset': policy.get('remarks', 'N/A'),
                    'start_date': indian_date_filter(policy.get('policy_from')),
                    'expiry_date': indian_date_filter(policy.get('policy_to'))
                }
                
                email_success, email_message = send_policy_email(
                    customer_email, policy_data, temp_file_path
                )
            else:
                email_message = "No email address found for customer"

        # Prepare response message
        messages = []
        if whatsapp_success:
            messages.append("WhatsApp: Document sent successfully")
        else:
            messages.append("WhatsApp: Failed to send")

        if send_email:
            if email_success:
                messages.append("Email: Document sent successfully")
            else:
                messages.append(f"Email: {email_message}")

        overall_success = whatsapp_success or (send_email and email_success)
        return overall_success, " | ".join(messages)

    except Exception as e:
        print(f"Error sending policy: {e}")
        return False, str(e)
    finally:
        # Clean up temp file in finally block with delay
        if temp_file_path:
            time.sleep(1)  # Wait for all operations to complete
            delete_temp_file(temp_file_path)


def send_renewal_reminder(phone, policy, renewal_filename=None, payment_link=None):
    """Send renewal reminder with optional file or payment link via WhatsApp and email"""
    try:
        # Get member name for template (use member name instead of client name)
        try:
            # Get member name from policy data if available
            member_name = "Customer"  # Default fallback
            if policy.get('members') and policy['members'].get('member_name'):
                member_name = policy['members']['member_name']
            else:
                # Fallback to client name if member name not available
                customer, _ = get_customer_policies(phone)
                member_name = customer['name'] if customer else "Customer"
        except:
            member_name = "Customer"
        
        # Convert expiry date to Indian format
        expiry_date = policy.get('policy_to') or policy.get('expiry_date')
        if isinstance(expiry_date, str) and '-' in expiry_date:
            parts = expiry_date.split('-')
            if len(parts) == 3 and len(parts[0]) == 4:
                expiry_date = f"{parts[2]}/{parts[1]}/{parts[0]}"
        
        # Prepare template variables for approved renewal template
        # Ensure all variables have non-empty values (Twilio doesn't allow empty strings)
        template_variables = {
            "1": member_name or "Customer",
            "2": policy.get('policy_number') or 'N/A',
            "3": policy.get('insurance_company') or 'N/A',
            "4": policy.get('remarks') or 'N/A',
            "5": expiry_date or 'N/A',
            "6": "Please contact us for renewal assistance.",  # Default message
            "7": "test-policy.pdf"  # Default media path for renewal reminders
        }
        
        # Handle user-uploaded content - simplified approach
        if payment_link:
            # Payment link provided - include in message
            template_variables["6"] = f"💳 *Renew Now:* {payment_link}"
            # Use default test PDF for media since we have payment link
            template_variables["7"] = "test-policy.pdf"
        elif renewal_filename:
            # User uploaded a renewal document - it's already saved in static/renewals
            # Filename should already be sanitized by the upload handler
            media_path = f"static/renewals/{renewal_filename}"
            template_variables["6"] = "Renewal document attached below."
            template_variables["7"] = media_path
            
            logger.info(f"Using renewal document for WhatsApp: {media_path}")
            
            # Schedule cleanup after 1 hour (enough time for WhatsApp to fetch)
            import threading
            def cleanup_file():
                time.sleep(3600)  # Wait 1 hour
                try:
                    static_file_path = os.path.join(os.path.dirname(__file__), 'static', 'renewals', renewal_filename)
                    if os.path.exists(static_file_path):
                        os.remove(static_file_path)
                        logger.info(f"Cleaned up renewal document: {static_file_path}")
                except Exception as e:
                    logger.error(f"Error cleaning up renewal document: {e}")
            
            cleanup_thread = threading.Thread(target=cleanup_file, daemon=True)
            cleanup_thread.start()
        else:
            # No payment link or file - use default message and test PDF
            template_variables["6"] = "Please contact us for renewal assistance."
            template_variables["7"] = "test-policy.pdf"
        
        # Send using approved renewal reminder content template
        send_res = send_content_template_message(
            phone, 
            RENEWAL_REMINDER_TEMPLATE_SID, 
            template_variables, 
            None  # No separate media_url needed since it's in template
        )
        whatsapp_success = not send_res.get('error')
            
        # Send via email
        email_success = False
        email_message = ""

        customer_email = get_customer_email(phone)
        if customer_email:
            customer, _ = get_customer_policies(phone)
            customer_name = customer['name'] if customer else "Customer"

            # For email, construct file path if renewal filename exists
            email_file_path = None
            if renewal_filename:
                email_file_path = os.path.join(os.path.dirname(__file__), 'static', 'renewals', renewal_filename)
            
            # Prepare renewal data for the new template-based function
            renewal_data = {
                'client_name': customer_name,
                'policy_no': policy.get('policy_number', policy.get('policy_id', 'N/A')),
                'asset': policy.get('remarks', 'N/A'),
                'company': policy.get('insurance_company', 'N/A'),
                'expiry_date': policy.get('policy_to', 'N/A'),
                'payment_link': payment_link
            }
            
            email_success, email_message = send_renewal_reminder_email(
                customer_email, renewal_data, email_file_path
            )
        else:
            email_message = "No email address found for customer"

        # Update last_reminder_sent timestamp if either channel succeeded
        if whatsapp_success or email_success:
            try:
                from datetime import datetime
                current_time = datetime.now().isoformat()

                update_result = supabase.table('policies').update({
                    'last_reminder_sent': current_time
                }).eq('policy_id', policy['policy_id']).execute()

                print(f"Updated last_reminder_sent for policy {policy['policy_id']}")
            except Exception as e:
                print(f"Warning: Could not update last_reminder_sent: {e}")

        # Prepare response message
        messages = []
        if whatsapp_success:
            messages.append("WhatsApp: Reminder sent successfully")
        else:
            messages.append("WhatsApp: Failed to send")

        if email_success:
            messages.append("Email: Reminder sent successfully")
        else:
            messages.append(f"Email: {email_message}")

        overall_success = whatsapp_success or email_success
        return overall_success, " | ".join(messages)

    except Exception as e:
        print(f"Error sending renewal reminder: {e}")
        return False, str(e)


def handle_greeting(phone, page=0):
    """Handle HI greeting - now with list picker functionality and pagination"""
    customer, policies = get_customer_policies(phone)

    if not customer:
        send_whatsapp_message(phone, "Sorry, we couldn't find your records. Please contact support.")
        return

    if not policies:
        send_whatsapp_message(phone, f"Hello {customer['name']}! You don't have any active policies.")
        return

    user_sessions[phone] = {
        'customer': customer,
        'policies': policies,
        'state': 'policy_selection',
        'current_page': page
    }

    # Pagination settings
    MAX_ITEMS_PER_PAGE = 8  # Leave room for navigation and "Send All" buttons
    TITLE_CHAR_LIMIT = 24  # Twilio's actual limit is 24 characters
    DESCRIPTION_CHAR_LIMIT = 72
    
    total_policies = len(policies)
    total_pages = (total_policies + MAX_ITEMS_PER_PAGE - 1) // MAX_ITEMS_PER_PAGE
    
    # Calculate start and end indices for current page
    start_idx = page * MAX_ITEMS_PER_PAGE
    end_idx = min(start_idx + MAX_ITEMS_PER_PAGE, total_policies)
    current_page_policies = policies[start_idx:end_idx]
    
    # Prepare list picker items for current page
    items = []
    
    for i, policy in enumerate(current_page_policies):
        # Use remarks if available, otherwise fallback to company-policy type
        if policy.get('remarks'):
            policy_title = policy['remarks']
        else:
            policy_title = f"{policy.get('insurance_company','')} - {policy.get('product_name','')}"

        # Truncate title to character limit
        if len(policy_title) > TITLE_CHAR_LIMIT:
            policy_title = policy_title[:TITLE_CHAR_LIMIT-3] + "..."

        # Format expiry date for display
        expiry_display = ""
        if policy.get('policy_to'):
            expiry_date = policy['policy_to']
            if isinstance(expiry_date, str) and '-' in expiry_date:
                parts = expiry_date.split('-')
                if len(parts) == 3 and len(parts[0]) == 4:
                    expiry_display = f" | Exp: {parts[2]}/{parts[1]}/{parts[0]}"
        
        description = f"{policy.get('policy_number', 'Policy Document')}{expiry_display}"
        if len(description) > DESCRIPTION_CHAR_LIMIT:
            description = description[:DESCRIPTION_CHAR_LIMIT-3] + "..."
        
        items.append({
            "item": policy_title,
            "description": description,
            "id": str(start_idx + i)  # Global index across all pages
        })

    # Add next page button if needed
    if page < total_pages - 1:
        items.append({
            "item": "➡️ Next Page",
            "description": f"Go to page {page+2}",
            "id": f"next_{page+1}"
        })

    # Add "Send All Documents" option (always available)
    items.append({
        "item": "📄 Send All Documents",
        "description": "Get all policy documents",
        "id": "all"
    })

    # Greeting message for list picker
    page_info = f" (Page {page+1}/{total_pages})" if total_pages > 1 else ""
    greeting_msg = f"Hello {customer['name']}! 👋\n\n"
    greeting_msg += f"Welcome to Insta Insurance Consultancy Portal. We found {total_policies} insurance policy/policies for you{page_info}.\n\n"
    greeting_msg += "📋 Please select which document you'd like to receive:"

    # Send list picker message
    result = send_list_picker_message(
        phone, 
        greeting_msg, 
        "Select Policy", 
        items,
        variables={"1": customer['name']}  # Can be used in template if needed
    )
    
    if result.get('error'):
        print(f"List picker failed, falling back to text menu: {result['error']}")
        # Fallback to original interactive list if list picker fails
        sections = [{'title': 'Your Policies', 'rows': []}]
        for item in items:
            sections[0]['rows'].append({
                'id': item['id'],
                'title': item['item'],
                'description': item['description']
            })
        send_interactive_list(phone, greeting_msg, 'Select Policy', sections)


def handle_policy_selection(phone, selection_id):
    """Handle policy selection from list picker or text input with pagination support"""
    if phone not in user_sessions:
        send_whatsapp_message(phone, "❌ Your session has expired. Please reply with *HI* to start again.")
        return

    session = user_sessions[phone]
    policies = session['policies']
    customer = session['customer']

    print(f"Processing policy selection for {phone}: '{selection_id}'")

    # Handle pagination navigation
    if selection_id.startswith('next_'):
        try:
            next_page = int(selection_id.split('_')[1])
            handle_greeting(phone, next_page)
            return
        except (ValueError, IndexError):
            send_whatsapp_message(phone, "❌ Invalid navigation. Please reply with *HI* to start again.")
            return

    # Handle "Send All Documents" selection
    if selection_id.lower() == 'all':
        send_whatsapp_message(phone, f"📤 Sending all {len(policies)} policy documents...")

        # Use the new function that sends all policies in one email
        success, msg = send_all_policies_to_customer(phone, policies)

        if success:
            send_whatsapp_message(phone,
                                  f"✅ All {len(policies)} policy documents sent successfully!\n\n"
                                  f"📧 All documents have been sent in one email for your convenience.\n\n"
                                  f"Thank you for using Insta Insurance Consultancy Portal.\n\n"
                                  f"Reply with *HI* anytime to access your documents again.")
        else:
            send_whatsapp_message(phone,
                                  f"❌ There was an issue sending your documents: {msg}\n\n"
                                  f"Please try again by replying with *HI*.")

        # Clean up session
        if phone in user_sessions:
            del user_sessions[phone]
        return

    # Handle individual policy selection
    try:
        policy_index = int(selection_id)
        if 0 <= policy_index < len(policies):
            policy = policies[policy_index]
            policy_name = policy.get('remarks') or f"{policy.get('insurance_company', '')} - {policy.get('product_name', '')}"
            
            # Truncate policy name for display if too long
            if len(policy_name) > 50:
                display_name = policy_name[:47] + "..."
            else:
                display_name = policy_name
                
            send_whatsapp_message(phone, f"📤 Sending {display_name} document...")

            success, msg = send_policy_to_customer(phone, policy)

            if success:
                send_whatsapp_message(phone,
                                      f"✅ {display_name} document sent successfully!\n\n"
                                      f"📧 Document has been sent via email and WhatsApp.\n\n"
                                      f"Thank you for using Insta Insurance Consultancy Portal.\n\n"
                                      f"Reply with *HI* anytime to access your documents again.")
            else:
                send_whatsapp_message(phone, f"❌ Sorry, there was an error sending {display_name}: {msg}\n\nPlease try again by replying with *HI*.")

        else:
            send_whatsapp_message(phone, f"❌ Invalid selection '{selection_id}'. Please reply with *HI* to start again and select a valid option.")
    except ValueError:
        # Handle non-numeric selections (maybe user typed something else)
        send_whatsapp_message(phone, f"❌ Invalid selection '{selection_id}'. Please reply with *HI* to start again and select a valid option.")
    except Exception as e:
        print(f"Error in handle_policy_selection: {e}")
        send_whatsapp_message(phone, "❌ An error occurred. Please reply with *HI* to start again.")
    finally:
        # Clean up session only for non-navigation actions
        if not selection_id.startswith('next_'):
            if phone in user_sessions:
                del user_sessions[phone]


def setup_whatsapp_webhook(app):
    """Setup Twilio WhatsApp webhook route"""

    @app.route('/twilio/whatsapp', methods=['POST'])
    def twilio_whatsapp_webhook():
        try:
            incoming_msg = (request.values.get('Body', '') or '').strip()
            from_raw = request.values.get('From', '')  # e.g., 'whatsapp:+9198...'
            from_number = from_raw.replace('whatsapp:', '')
            
            # Get additional Twilio parameters for list picker responses
            button_response = request.values.get('ButtonResponse')
            list_response = request.values.get('ListResponse')
            
            # Log incoming message details for debugging
            print(f"Incoming WhatsApp message from {from_number}:")
            print(f"  Body: {incoming_msg}")
            print(f"  ButtonResponse: {button_response}")
            print(f"  ListResponse: {list_response}")

            # Basic dedup (optional):
            msg_sid = request.values.get('MessageSid')
            if msg_sid and is_duplicate_message(msg_sid):
                return str(MessagingResponse())

            # Handle list picker responses
            if list_response:
                try:
                    import json
                    list_data = json.loads(list_response)
                    selection_id = list_data.get('id', '')
                    print(f"List picker selection: {selection_id}")
                    
                    if from_number in user_sessions:
                        handle_policy_selection(from_number, selection_id)
                    else:
                        send_whatsapp_message(from_number, "❌ Your session has expired. Please reply with *HI* to start again.")
                    
                    return str(MessagingResponse())
                except (json.JSONDecodeError, Exception) as e:
                    print(f"Error parsing list response: {e}")
                    # Fall through to regular message handling

            # Handle regular text messages
            upper = incoming_msg.upper()
            if upper in ['HI', 'HELLO', 'HEY', 'START']:
                handle_greeting(from_number)
            else:
                # If user is in a session expecting a selection
                if from_number in user_sessions:
                    selection_id = incoming_msg.strip()
                    handle_policy_selection(from_number, selection_id)
                else:
                    send_whatsapp_message(from_number, "👋 Welcome to Insta Insurance Consultancy Portal!\n\nReply with *HI* to get started and view your insurance policies.")

            # Respond with empty TwiML (we're sending proactive messages via API)
            return str(MessagingResponse())
        except Exception as e:
            print(f"Error processing Twilio webhook: {e}")
            import traceback
            traceback.print_exc()
            return str(MessagingResponse())


================================================
FILE: whatsapp_bot_async.py
================================================
"""
Async WhatsApp Bot for Multi-User Concurrent Operations
Handles multiple WhatsApp messages simultaneously using task queue system
"""
from flask import request, jsonify
import os
import time
import logging
from datetime import datetime
from typing import List, Dict, Optional, Tuple
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed

# Import existing WhatsApp functionality
from whatsapp_bot import (
    send_whatsapp_message, send_content_template_message, 
    get_customer_policies, normalize_phone, format_whatsapp_address,
    is_duplicate_message, processed_messages, MESSAGE_EXPIRY,
    user_sessions, send_policy_document_whatsapp
)

# Import task queue system
from task_queue import (
    task_queue, send_whatsapp_async, send_policy_async, 
    send_batch_whatsapp_async, Task
)

# Import database pool
from database_pool import execute_query, get_client_by_phone, batch_insert

logger = logging.getLogger(__name__)

class WhatsAppBotAsync:
    """Async WhatsApp Bot for handling concurrent users"""
    
    def __init__(self):
        self.active_sessions = {}  # Track active user sessions
        self.session_lock = threading.Lock()
        self.greeting_executor = ThreadPoolExecutor(max_workers=10, thread_name_prefix="WhatsAppGreeting")
        
    def handle_greeting_async(self, phone: str) -> str:
        """Handle greeting message asynchronously"""
        try:
            # Check for duplicate processing
            message_id = f"greeting_{phone}_{int(time.time())}"
            if is_duplicate_message(message_id):
                logger.info(f"Duplicate greeting ignored for {phone}")
                return "duplicate"
            
            # Submit greeting task to executor
            future = self.greeting_executor.submit(self._process_greeting, phone)
            
            # Don't wait for completion, return immediately
            logger.info(f"Greeting task queued for {phone}")
            return "queued"
            
        except Exception as e:
            logger.error(f"Error queuing greeting for {phone}: {e}")
            return "error"
    
    def _process_greeting(self, phone: str) -> bool:
        """Process greeting and send policies"""
        try:
            # Get customer and policies using database pool
            client_result = get_client_by_phone(phone)
            if not client_result or not client_result.data:
                # Send welcome message for new users
                welcome_msg = """👋 Welcome to Insta Insurance Consultancy!

We don't have your details in our system yet. Please contact our team to get started with your insurance needs.

📞 Contact us for assistance with:
• Health Insurance
• Motor Insurance  
• Life Insurance
• General Insurance

Thank you for your interest!"""
                
                send_whatsapp_async(phone, welcome_msg, priority=2)
                return True
            
            client = client_result.data
            client_id = client['client_id']
            
            # Get policies for client
            policies_result = execute_query(
                'policies',
                'select',
                columns='*',
                filters={'client_id_eq': client_id}
            )
            
            policies = policies_result.data if policies_result.data else []
            
            if not policies:
                # No policies found
                no_policies_msg = f"""Hello {client['name']}! 👋

We don't have any active policies for you in our system yet.

Please contact our team if you'd like to:
• Purchase new insurance
• Check policy status
• Get insurance quotes

Thank you for choosing Insta Insurance Consultancy!"""
                
                send_whatsapp_async(phone, no_policies_msg, priority=2)
                return True
            
            # Send greeting message
            greeting_msg = f"""Hello {client['name']}! 👋

Welcome to Insta Insurance Consultancy Portal. I'll send you all your policy documents right away.

📄 Found {len(policies)} active policies for you."""
            
            send_whatsapp_async(phone, greeting_msg, priority=1)
            
            # Send each policy document asynchronously
            for i, policy in enumerate(policies):
                # Small delay between policies to avoid rate limiting
                time.sleep(1 + i * 0.5)
                
                send_policy_async(
                    phone=phone,
                    policy=policy,
                    send_email=False,  # Skip email for greeting response
                    priority=1
                )
            
            # Send final message
            final_msg = f"""✅ All {len(policies)} policy documents have been sent!

You can reply with *HI* anytime to receive your documents again.

For any assistance, please contact our team.

Thank you for choosing Insta Insurance Consultancy! 🙏"""
            
            # Delay final message to ensure it comes after all policies
            time.sleep(len(policies) * 0.5 + 2)
            send_whatsapp_async(phone, final_msg, priority=2)
            
            return True
            
        except Exception as e:
            logger.error(f"Error processing greeting for {phone}: {e}")
            
            # Send error message to user
            error_msg = """Sorry, we're experiencing technical difficulties. Please try again in a few minutes or contact our support team.

Thank you for your patience! 🙏"""
            
            send_whatsapp_async(phone, error_msg, priority=1)
            return False
    
    def send_bulk_reminders_async(self, reminder_data: List[Dict]) -> str:
        """Send renewal reminders to multiple customers asynchronously"""
        try:
            # Prepare batch WhatsApp messages
            whatsapp_messages = []
            
            for reminder in reminder_data:
                phone = reminder.get('phone')
                customer_name = reminder.get('customer_name', 'Customer')
                policy = reminder.get('policy', {})
                
                if not phone or not policy:
                    continue
                
                # Format expiry date
                expiry_date = policy.get('policy_to', 'N/A')
                if expiry_date and expiry_date != 'N/A':
                    try:
                        if isinstance(expiry_date, str) and '-' in expiry_date:
                            parts = expiry_date.split('-')
                            if len(parts) == 3 and len(parts[0]) == 4:
                                expiry_date = f"{parts[2]}/{parts[1]}/{parts[0]}"
                    except:
                        pass
                
                # Create reminder message
                reminder_message = f"""🔔 *Policy Renewal Reminder*

Dear {customer_name},

Your insurance policy is expiring soon:

📋 *Policy Details:*
• Insurance: {policy.get('product_name', 'Insurance Policy')}
• Company: {policy.get('insurance_company', '')}
• Policy Number: {policy.get('policy_number', 'N/A')}
• Expiry Date: {expiry_date}

Please contact us to renew your policy and avoid any coverage gaps.

📞 Contact our team for renewal assistance.

Thank you!
- Insta Insurance Consultancy"""
                
                whatsapp_messages.append({
                    'phone': phone,
                    'message': reminder_message
                })
            
            if whatsapp_messages:
                # Send batch WhatsApp messages
                task_id = send_batch_whatsapp_async(
                    messages=whatsapp_messages,
                    priority=2,
                    callback=self._bulk_reminder_callback
                )
                
                logger.info(f"Bulk reminder task queued: {task_id} for {len(whatsapp_messages)} customers")
                return task_id
            else:
                logger.warning("No valid reminder data provided")
                return "no_data"
                
        except Exception as e:
            logger.error(f"Error queuing bulk reminders: {e}")
            return "error"
    
    def _bulk_reminder_callback(self, task: Task, success: bool, error: str = None):
        """Callback for bulk reminder completion"""
        if success:
            logger.info(f"Bulk reminder task {task.task_id} completed successfully")
        else:
            logger.error(f"Bulk reminder task {task.task_id} failed: {error}")
    
    def send_bulk_policy_notifications_async(self, notification_data: List[Dict]) -> str:
        """Send policy issued notifications to multiple customers asynchronously"""
        try:
            # Process notifications in batches
            batch_size = 10
            task_ids = []
            
            for i in range(0, len(notification_data), batch_size):
                batch = notification_data[i:i + batch_size]
                
                # Prepare batch messages
                whatsapp_messages = []
                
                for notification in batch:
                    phone = notification.get('phone')
                    customer_name = notification.get('customer_name', 'Customer')
                    policy = notification.get('policy', {})
                    
                    if not phone or not policy:
                        continue
                    
                    # Format dates
                    coverage_start = policy.get('policy_from', 'N/A')
                    expiry_date = policy.get('policy_to', 'N/A')
                    
                    for date_field in [coverage_start, expiry_date]:
                        if date_field and date_field != 'N/A':
                            try:
                                if isinstance(date_field, str) and '-' in date_field:
                                    parts = date_field.split('-')
                                    if len(parts) == 3 and len(parts[0]) == 4:
                                        date_field = f"{parts[2]}/{parts[1]}/{parts[0]}"
                            except:
                                pass
                    
                    # Create notification message
                    notification_message = f"""🎉 *Policy Issued Successfully!*

Dear {customer_name},

Congratulations! Your new insurance policy has been issued.

📋 *Policy Details:*
• Insurance: {policy.get('product_name', 'Insurance Policy')}
• Company: {policy.get('insurance_company', '')}
• Policy Number: {policy.get('policy_number', 'N/A')}
• Coverage Start: {coverage_start}
• Expiry Date: {expiry_date}

Your policy document will be sent separately.

Reply with *HI* anytime to view all your policies.

Thank you for choosing Insta Insurance Consultancy! 🙏"""
                    
                    whatsapp_messages.append({
                        'phone': phone,
                        'message': notification_message
                    })
                
                if whatsapp_messages:
                    # Send batch
                    task_id = send_batch_whatsapp_async(
                        messages=whatsapp_messages,
                        priority=1,
                        callback=self._bulk_notification_callback
                    )
                    task_ids.append(task_id)
                    
                    # Small delay between batches
                    time.sleep(2)
            
            logger.info(f"Bulk notification tasks queued: {len(task_ids)} batches for {len(notification_data)} customers")
            return f"queued_{len(task_ids)}_batches"
            
        except Exception as e:
            logger.error(f"Error queuing bulk notifications: {e}")
            return "error"
    
    def _bulk_notification_callback(self, task: Task, success: bool, error: str = None):
        """Callback for bulk notification completion"""
        if success:
            logger.info(f"Bulk notification task {task.task_id} completed successfully")
        else:
            logger.error(f"Bulk notification task {task.task_id} failed: {error}")
    
    def get_session_info(self, phone: str) -> Dict:
        """Get session information for a user"""
        with self.session_lock:
            return self.active_sessions.get(phone, {})
    
    def update_session(self, phone: str, data: Dict):
        """Update session data for a user"""
        with self.session_lock:
            if phone not in self.active_sessions:
                self.active_sessions[phone] = {}
            self.active_sessions[phone].update(data)
            self.active_sessions[phone]['last_activity'] = datetime.now()
    
    def cleanup_old_sessions(self, max_age_hours: int = 24):
        """Clean up old sessions"""
        cutoff_time = datetime.now() - timedelta(hours=max_age_hours)
        
        with self.session_lock:
            expired_sessions = [
                phone for phone, session in self.active_sessions.items()
                if session.get('last_activity', datetime.min) < cutoff_time
            ]
            
            for phone in expired_sessions:
                del self.active_sessions[phone]
        
        if expired_sessions:
            logger.info(f"Cleaned up {len(expired_sessions)} expired sessions")

# Global async WhatsApp bot instance
whatsapp_bot_async = WhatsAppBotAsync()

# Enhanced webhook handler for concurrent processing
def handle_whatsapp_webhook_async(webhook_data):
    """Handle WhatsApp webhook with async processing"""
    try:
        # Extract message data
        if 'messages' not in webhook_data.get('entry', [{}])[0].get('changes', [{}])[0].get('value', {}):
            return jsonify({'status': 'no_messages'}), 200
        
        messages = webhook_data['entry'][0]['changes'][0]['value']['messages']
        
        # Process each message asynchronously
        for message in messages:
            message_id = message.get('id')
            from_number = message.get('from')
            message_type = message.get('type')
            
            # Check for duplicate
            if is_duplicate_message(message_id):
                continue
            
            # Handle text messages
            if message_type == 'text':
                text_body = message.get('text', {}).get('body', '').strip().upper()
                
                if text_body in ['HI', 'HELLO', 'START', 'POLICIES']:
                    # Handle greeting asynchronously
                    whatsapp_bot_async.handle_greeting_async(from_number)
                else:
                    # Handle other messages
                    response_msg = """Thank you for your message! 

For policy documents, reply with *HI*
For assistance, please contact our team.

- Insta Insurance Consultancy"""
                    
                    send_whatsapp_async(from_number, response_msg, priority=3)
        
        return jsonify({'status': 'processed'}), 200
        
    except Exception as e:
        logger.error(f"Webhook processing error: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

# Utility functions for multi-user operations
def send_reminders_to_multiple_customers(customers_data: List[Dict]) -> Dict:
    """Send renewal reminders to multiple customers"""
    try:
        task_id = whatsapp_bot_async.send_bulk_reminders_async(customers_data)
        
        return {
            'success': True,
            'task_id': task_id,
            'message': f'Bulk reminders queued for {len(customers_data)} customers'
        }
    except Exception as e:
        logger.error(f"Error sending bulk reminders: {e}")
        return {
            'success': False,
            'message': str(e)
        }

def notify_multiple_policy_issued(notifications_data: List[Dict]) -> Dict:
    """Notify multiple customers about policy issuance"""
    try:
        result = whatsapp_bot_async.send_bulk_policy_notifications_async(notifications_data)
        
        return {
            'success': True,
            'result': result,
            'message': f'Bulk notifications queued for {len(notifications_data)} customers'
        }
    except Exception as e:
        logger.error(f"Error sending bulk notifications: {e}")
        return {
            'success': False,
            'message': str(e)
        }

def get_queue_status() -> Dict:
    """Get current task queue status"""
    return task_queue.get_queue_stats()



================================================
FILE: WHATSAPP_LOGS_FEATURE.md
================================================
# WhatsApp Logs Feature

## Overview
The WhatsApp Logs feature provides comprehensive tracking and monitoring of all WhatsApp messages sent through the insurance portal. You can view message delivery status, read receipts, and troubleshoot any delivery issues.

## Features

### 📊 **Dashboard Statistics**
- **Total Messages**: Count of all WhatsApp messages sent
- **Delivered Messages**: Successfully delivered messages
- **Read Messages**: Messages that have been read by recipients
- **Success Rate**: Percentage of successfully delivered messages

### 🔍 **Message Tracking**
- **Real-time Status**: Track messages from `queued` → `sending` → `sent` → `delivered` → `read`
- **Error Tracking**: View error codes and messages for failed deliveries
- **Delivery Timestamps**: See exactly when messages were delivered and read
- **Message Types**: Categorized as Policy Document, Renewal Reminder, or General

### 🎯 **Advanced Filtering**
- Filter by message status (queued, sent, delivered, failed, etc.)
- Filter by message type (policy documents, renewal reminders, general)
- Search by phone number
- Date range filtering
- Pagination for large datasets

### 🔄 **Status Refresh**
- **Bulk Refresh**: Update status for all pending messages at once
- **Individual Refresh**: Update status for specific messages
- **Automatic Logging**: All new messages are automatically logged

## Message Status Values

| Status | Description |
|--------|-------------|
| `queued` | Message is queued for sending |
| `sending` | Message is currently being sent |
| `sent` | Message has been sent to carrier |
| `delivered` | Message delivered to recipient's device |
| `read` | Message has been read by recipient (WhatsApp only) |
| `failed` | Message failed to send |
| `undelivered` | Message could not be delivered |

## Usage

### Accessing WhatsApp Logs
1. Navigate to the dashboard
2. Click **"WhatsApp Logs"** in the navigation bar
3. View all your WhatsApp message history

### Refreshing Message Status
- **All Messages**: Click "Refresh All Statuses" to update all pending messages
- **Single Message**: Click "Refresh Status" next to any message
- **Automatic**: New messages are automatically tracked

### Viewing Message Details
- Click **"View Details"** next to any message
- See complete Twilio message information including:
  - Message SID
  - Price and segments
  - Detailed timestamps
  - Error codes (if any)

### Filtering Messages
Use the filter section to narrow down results:
- **Status Filter**: Show only messages with specific status
- **Type Filter**: Filter by message type
- **Phone Search**: Find messages to specific numbers
- **Date Range**: View messages from specific time periods

## Technical Implementation

### Database Schema
```sql
CREATE TABLE whatsapp_logs (
    log_id SERIAL PRIMARY KEY,
    message_sid VARCHAR(100) UNIQUE NOT NULL,
    policy_id INTEGER REFERENCES policies(policy_id),
    client_id INTEGER REFERENCES clients(client_id),
    phone_number VARCHAR(20) NOT NULL,
    message_type VARCHAR(50) NOT NULL,
    message_content TEXT,
    media_url TEXT,
    status VARCHAR(50) DEFAULT 'queued',
    error_code VARCHAR(20),
    error_message TEXT,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    delivered_at TIMESTAMP,
    read_at TIMESTAMP,
    last_status_check TIMESTAMP,
    created_by VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### API Endpoints
- `GET /whatsapp_logs` - View logs page
- `POST /api/whatsapp/refresh_all_statuses` - Refresh all message statuses
- `POST /api/whatsapp/refresh_status` - Refresh single message status
- `GET /api/whatsapp/message_details/<sid>` - Get detailed message info
- `GET /api/whatsapp/stats` - Get statistics for dashboard

### Integration Points
- **WhatsApp Bot**: Automatically logs all outgoing messages
- **Policy Documents**: Links messages to specific policies
- **Customer Records**: Associates messages with client records
- **Twilio API**: Fetches real-time status from Twilio

## Installation & Setup

### 1. Run Database Migration
```bash
python run_whatsapp_migration.py
```

### 2. Copy and Execute SQL
Copy the displayed SQL and run it in your Supabase SQL editor:
```
https://app.supabase.com/project/YOUR_PROJECT/sql
```

### 3. Restart Application
Restart your Flask application to load the new routes.

### 4. Access Feature
Navigate to `/whatsapp_logs` or click the "WhatsApp Logs" button in the navigation.

## Configuration

### Environment Variables
Ensure these Twilio credentials are set in your `.env` file:
```env
TWILIO_ACCOUNT_SID=your_account_sid
TWILIO_AUTH_TOKEN=your_auth_token
TWILIO_WHATSAPP_FROM=whatsapp:+1234567890
```

### Permissions
- All logged-in users can view WhatsApp logs
- Only authorized users can refresh message statuses
- Message details require valid session

## Troubleshooting

### Common Issues

**1. Messages Not Being Logged**
- Check if `WhatsAppService` is properly imported
- Verify database connection
- Check for errors in application logs

**2. Status Not Updating**
- Verify Twilio credentials are correct
- Check internet connectivity
- Ensure message SID is valid

**3. Page Not Loading**
- Confirm migration was run successfully
- Check if blueprint is registered in app
- Verify template file exists

### Error Messages

**"Twilio client not configured"**
- Check TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN in environment

**"WhatsApp service not available"**
- Restart application after installing whatsapp_service.py
- Check for import errors in logs

**"Failed to log WhatsApp message"**
- Check database connectivity
- Verify whatsapp_logs table exists
- Check for constraint violations

## Benefits

### For Administrators
- **Complete Visibility**: See all WhatsApp communications
- **Delivery Confirmation**: Know which messages were delivered
- **Error Tracking**: Quickly identify and resolve delivery issues
- **Performance Metrics**: Monitor success rates and trends

### For Customer Service
- **Message History**: View complete communication history with customers
- **Delivery Status**: Confirm if important documents were received
- **Troubleshooting**: Identify why messages might not be reaching customers

### For Compliance
- **Audit Trail**: Complete record of all communications
- **Delivery Proof**: Evidence that important notices were sent
- **Error Documentation**: Record of any delivery failures

## Future Enhancements

### Planned Features
- **Message Templates**: Save and reuse common messages
- **Scheduled Messages**: Send messages at specific times
- **Bulk Messaging**: Send messages to multiple recipients
- **Analytics Dashboard**: Advanced reporting and insights
- **Webhook Integration**: Real-time status updates from Twilio
- **Export Functionality**: Download logs as CSV/Excel

### Integration Opportunities
- **Email Logs**: Similar tracking for email communications
- **SMS Logs**: Track SMS messages alongside WhatsApp
- **Notification Center**: Unified view of all communications
- **Customer Portal**: Let customers view their message history

## Support

For technical support or feature requests:
1. Check the application logs for detailed error messages
2. Verify all environment variables are set correctly
3. Ensure database migration was completed successfully
4. Test with a simple message to verify Twilio integration

## Version History

- **v1.0** - Initial implementation with basic logging and status tracking
- **v1.1** - Added filtering, pagination, and bulk refresh functionality
- **v1.2** - Enhanced UI with statistics dashboard and message details modal



================================================
FILE: whatsapp_logs_migration.sql
================================================
-- WhatsApp Message Logs Migration
-- This table will store all WhatsApp messages sent through the system

CREATE TABLE IF NOT EXISTS whatsapp_logs (
    log_id SERIAL PRIMARY KEY,
    message_sid VARCHAR(100) UNIQUE NOT NULL, -- Twilio Message SID
    policy_id BIGINT REFERENCES policies(policy_id) ON DELETE SET NULL,
    client_id TEXT REFERENCES clients(client_id) ON DELETE SET NULL,
    phone_number VARCHAR(20) NOT NULL,
    message_type VARCHAR(50) NOT NULL, -- 'policy_document', 'renewal_reminder', 'general'
    message_content TEXT,
    media_url TEXT,
    status VARCHAR(50) DEFAULT 'queued', -- Twilio status: queued, sending, sent, delivered, undelivered, failed, read
    error_code VARCHAR(20),
    error_message TEXT,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_status_check TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    delivered_at TIMESTAMP,
    read_at TIMESTAMP,
    created_by VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_whatsapp_logs_policy_id ON whatsapp_logs(policy_id);
CREATE INDEX IF NOT EXISTS idx_whatsapp_logs_client_id ON whatsapp_logs(client_id);
CREATE INDEX IF NOT EXISTS idx_whatsapp_logs_phone ON whatsapp_logs(phone_number);
CREATE INDEX IF NOT EXISTS idx_whatsapp_logs_status ON whatsapp_logs(status);
CREATE INDEX IF NOT EXISTS idx_whatsapp_logs_sent_at ON whatsapp_logs(sent_at);
CREATE INDEX IF NOT EXISTS idx_whatsapp_logs_message_type ON whatsapp_logs(message_type);

-- Add trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_whatsapp_logs_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_whatsapp_logs_updated_at
    BEFORE UPDATE ON whatsapp_logs
    FOR EACH ROW
    EXECUTE FUNCTION update_whatsapp_logs_updated_at();



================================================
FILE: whatsapp_service.py
================================================
"""
WhatsApp Service for logging and tracking message status
"""
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from supabase import create_client
from dynamic_config import Config
from twilio.rest import Client as TwilioClient

# Set up logging
logger = logging.getLogger(__name__)

# Initialize clients
supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)
twilio_client = TwilioClient(Config.TWILIO_ACCOUNT_SID, Config.TWILIO_AUTH_TOKEN) if (Config.TWILIO_ACCOUNT_SID and Config.TWILIO_AUTH_TOKEN) else None


class WhatsAppService:
    """Service for managing WhatsApp message logs and status tracking"""
    
    @staticmethod
    def log_message(
        message_sid: str,
        phone_number: str,
        message_type: str,
        message_content: str = None,
        media_url: str = None,
        policy_id: int = None,
        client_id: int = None,
        created_by: str = None,
        status: str = 'queued'
    ) -> bool:
        """Log a WhatsApp message to the database"""
        try:
            log_data = {
                'message_sid': message_sid,
                'phone_number': phone_number,
                'message_type': message_type,
                'message_content': message_content,
                'media_url': media_url,
                'policy_id': policy_id,
                'client_id': client_id,
                'status': status,
                'created_by': created_by,
                'sent_at': datetime.now().isoformat(),
                'last_status_check': datetime.now().isoformat()
            }
            
            result = supabase.table('whatsapp_logs').insert(log_data).execute()
            
            if result.data:
                logger.info(f"WhatsApp message logged: {message_sid}")
                return True
            else:
                logger.error(f"Failed to log WhatsApp message: {message_sid}")
                return False
                
        except Exception as e:
            logger.error(f"Error logging WhatsApp message {message_sid}: {e}")
            return False
    
    @staticmethod
    def get_message_status_from_twilio(message_sid: str) -> Dict:
        """Fetch current message status from Twilio API"""
        if not twilio_client:
            return {"error": "Twilio client not configured"}
        
        try:
            message = twilio_client.messages(message_sid).fetch()
            
            status_data = {
                'sid': message.sid,
                'status': message.status,
                'error_code': message.error_code,
                'error_message': message.error_message,
                'date_sent': message.date_sent.isoformat() if message.date_sent else None,
                'date_updated': message.date_updated.isoformat() if message.date_updated else None,
                'price': str(message.price) if message.price else None,
                'price_unit': message.price_unit,
                'direction': message.direction,
                'num_segments': message.num_segments
            }
            
            return status_data
            
        except Exception as e:
            logger.error(f"Error fetching message status from Twilio for {message_sid}: {e}")
            return {"error": str(e)}
    
    @staticmethod
    def update_message_status(message_sid: str, status_data: Dict) -> bool:
        """Update message status in database"""
        try:
            update_data = {
                'status': status_data.get('status'),
                'error_code': status_data.get('error_code'),
                'error_message': status_data.get('error_message'),
                'last_status_check': datetime.now().isoformat()
            }
            
            # Set delivered_at timestamp if status is delivered
            if status_data.get('status') == 'delivered' and status_data.get('date_updated'):
                update_data['delivered_at'] = status_data.get('date_updated')
            
            # Set read_at timestamp if status is read
            if status_data.get('status') == 'read' and status_data.get('date_updated'):
                update_data['read_at'] = status_data.get('date_updated')
            
            # Remove None values
            update_data = {k: v for k, v in update_data.items() if v is not None}
            
            result = supabase.table('whatsapp_logs').update(update_data).eq('message_sid', message_sid).execute()
            
            if result.data:
                logger.info(f"Message status updated: {message_sid} -> {status_data.get('status')}")
                return True
            else:
                logger.error(f"Failed to update message status: {message_sid}")
                return False
                
        except Exception as e:
            logger.error(f"Error updating message status {message_sid}: {e}")
            return False
    
    @staticmethod
    def refresh_message_status(message_sid: str) -> bool:
        """Refresh a single message status from Twilio"""
        status_data = WhatsAppService.get_message_status_from_twilio(message_sid)
        
        if 'error' in status_data:
            logger.error(f"Failed to fetch status for {message_sid}: {status_data['error']}")
            return False
        
        return WhatsAppService.update_message_status(message_sid, status_data)
    
    @staticmethod
    def refresh_all_pending_statuses() -> Tuple[int, int]:
        """Refresh status for all messages that are not in final state"""
        try:
            # Get messages that might need status updates (not delivered, read, failed, or undelivered)
            pending_statuses = ['queued', 'sending', 'sent']
            
            result = supabase.table('whatsapp_logs').select('message_sid').in_('status', pending_statuses).execute()
            
            if not result.data:
                return 0, 0
            
            total_messages = len(result.data)
            updated_count = 0
            
            for log in result.data:
                if WhatsAppService.refresh_message_status(log['message_sid']):
                    updated_count += 1
            
            logger.info(f"Refreshed {updated_count}/{total_messages} message statuses")
            return updated_count, total_messages
            
        except Exception as e:
            logger.error(f"Error refreshing all message statuses: {e}")
            return 0, 0
    
    @staticmethod
    def get_logs_with_filters(
        limit: int = 50,
        offset: int = 0,
        status_filter: str = None,
        message_type_filter: str = None,
        phone_filter: str = None,
        date_from: str = None,
        date_to: str = None
    ) -> Dict:
        """Get WhatsApp logs with optional filters"""
        try:
            query = supabase.table('whatsapp_logs').select(
                'log_id, message_sid, phone_number, message_type, status, '
                'error_code, error_message, sent_at, delivered_at, read_at, '
                'last_status_check, created_by, '
                'policies(policy_number, product_name, insurance_company), '
                'clients(name, email)'
            )
            
            # Apply filters
            if status_filter and status_filter != 'all':
                query = query.eq('status', status_filter)
            
            if message_type_filter and message_type_filter != 'all':
                query = query.eq('message_type', message_type_filter)
            
            if phone_filter:
                query = query.ilike('phone_number', f'%{phone_filter}%')
            
            if date_from:
                query = query.gte('sent_at', date_from)
            
            if date_to:
                query = query.lte('sent_at', date_to)
            
            # Order by sent_at desc and apply pagination
            query = query.order('sent_at', desc=True).range(offset, offset + limit - 1)
            
            result = query.execute()
            
            # Get total count for pagination
            count_query = supabase.table('whatsapp_logs').select('log_id', count='exact')
            
            if status_filter and status_filter != 'all':
                count_query = count_query.eq('status', status_filter)
            if message_type_filter and message_type_filter != 'all':
                count_query = count_query.eq('message_type', message_type_filter)
            if phone_filter:
                count_query = count_query.ilike('phone_number', f'%{phone_filter}%')
            if date_from:
                count_query = count_query.gte('sent_at', date_from)
            if date_to:
                count_query = count_query.lte('sent_at', date_to)
            
            count_result = count_query.execute()
            total_count = count_result.count if count_result.count is not None else 0
            
            return {
                'logs': result.data or [],
                'total_count': total_count,
                'has_next': offset + limit < total_count,
                'has_prev': offset > 0
            }
            
        except Exception as e:
            logger.error(f"Error fetching WhatsApp logs: {e}")
            return {
                'logs': [],
                'total_count': 0,
                'has_next': False,
                'has_prev': False
            }
    
    @staticmethod
    def get_status_summary() -> Dict:
        """Get summary statistics of message statuses"""
        try:
            result = supabase.table('whatsapp_logs').select('status').execute()
            
            if not result.data:
                return {
                    'total_messages': 0,
                    'status_counts': {},
                    'success_rate': 0
                }
            
            status_counts = {}
            for log in result.data:
                status = log['status']
                status_counts[status] = status_counts.get(status, 0) + 1
            
            # Calculate success rate
            total_messages = len(result.data)
            successful_messages = status_counts.get('delivered', 0) + status_counts.get('read', 0)
            success_rate = (successful_messages / total_messages * 100) if total_messages > 0 else 0
            
            return {
                'total_messages': total_messages,
                'status_counts': status_counts,
                'success_rate': round(success_rate, 2)
            }
            
        except Exception as e:
            logger.error(f"Error getting status summary: {e}")
            return {
                'total_messages': 0,
                'status_counts': {},
                'success_rate': 0
            }



================================================
FILE: wsgi.py
================================================
"""
WSGI Configuration for Production Multi-User Deployment
Optimized for concurrent user handling with proper worker management
"""
import os
import sys
import logging
from logging.handlers import RotatingFileHandler

# Add the application directory to Python path
sys.path.insert(0, os.path.dirname(__file__))

# Set production environment
os.environ.setdefault('FLASK_ENV', 'production')

# Configure logging for production
if not os.path.exists('logs'):
    os.makedirs('logs')

# Setup production logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s [%(name)s] %(message)s',
    handlers=[
        RotatingFileHandler('logs/production.log', maxBytes=50*1024*1024, backupCount=10),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

try:
    from app import app as application
    logger.info("WSGI application loaded successfully")
    
    # Validate critical environment variables
    required_vars = [
        'SUPABASE_URL', 'SUPABASE_KEY', 'CLERK_SECRET_KEY',
        'TWILIO_ACCOUNT_SID', 'TWILIO_AUTH_TOKEN'
    ]
    
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        logger.warning(f"Missing environment variables: {', '.join(missing_vars)}")
    else:
        logger.info("All critical environment variables are set")
    
    # Initialize database pool
    from database_pool import check_database_health
    db_healthy, db_message = check_database_health()
    if db_healthy:
        logger.info(f"Database connection pool initialized: {db_message}")
    else:
        logger.error(f"Database initialization failed: {db_message}")
    
except Exception as e:
    logger.error(f"Failed to load WSGI application: {e}")
    raise

if __name__ == "__main__":
    application.run()



================================================
FILE: .env.example
================================================
# Flask Configuration
FLASK_ENV=development
SECRET_KEY=your-secret-key-here

# Supabase Configuration (REQUIRED)
SUPABASE_URL=your-supabase-url-here
SUPABASE_KEY=your-supabase-anon-key-here

# Clerk Authentication (REQUIRED)
CLERK_PUBLISHABLE_KEY=your-clerk-publishable-key
CLERK_SECRET_KEY=your-clerk-secret-key
CLERK_FRONTEND_API=your-clerk-frontend-api.clerk.accounts.dev

# Admin Emails (REQUIRED - comma separated)
ADMIN_EMAILS=admin@example.com,user@example.com

# WhatsApp Configuration (Optional)
WHATSAPP_TOKEN=your-whatsapp-token
WHATSAPP_PHONE_ID=your-phone-id
VERIFY_TOKEN=your-webhook-verify-token

# Google Drive Configuration (Optional)
GOOGLE_CREDENTIALS_FILE=my-first-project-7fb14-715c168d62d2.json
ARCHIVE_FOLDER_ID=your-archive-folder-id

# Email Configuration (Updated for Zoho Mail)
SMTP_SERVER=smtp.zoho.in
SMTP_PORT=587
SMTP_USERNAME=your-email@instainsure.in
SMTP_PASSWORD=your-zoho-app-password
FROM_EMAIL=your-email@instainsure.in
FROM_NAME=Insta Insurance Consultancy

# Twilio WhatsApp (Optional)
TWILIO_ACCOUNT_SID=your-twilio-sid
TWILIO_AUTH_TOKEN=your-twilio-token
TWILIO_WHATSAPP_FROM=whatsapp:+14155238886
TWILIO_USE_CONTENT_TEMPLATE=false
TWILIO_CONTENT_SID=your-content-sid

# Public URL
APP_BASE_URL=http://localhost:5050



================================================
FILE: routes/claims.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify
from flask_login import login_required, current_user
from supabase import create_client, Client
from dynamic_config import Config
import io
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload
from google.oauth2 import service_account
from datetime import datetime
import logging

# Set up logging for this blueprint
logger = logging.getLogger(__name__)

# Initialize Supabase client
supabase: Client = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)

# Google Drive setup (using the same pattern as your other files)
SCOPES = ["https://www.googleapis.com/auth/drive"]
SERVICE_ACCOUNT_FILE = Config.GOOGLE_CREDENTIALS_FILE
ROOT_FOLDER_ID = "0AOc3bRLhlrgzUk9PVA" # Your main root folder ID from policies.py

claims_bp = Blueprint('claims', __name__, url_prefix='/claims')

def get_drive_service():
    """Initializes and returns the Google Drive service object."""
    try:
        creds = service_account.Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
        return build("drive", "v3", credentials=creds)
    except Exception as e:
        logger.error(f"Failed to initialize Google Drive service: {e}")
        return None

def find_or_create_folder(drive_service, parent_folder_id, folder_name):
    """Finds a folder by name within a parent folder, or creates it if it doesn't exist."""
    try:
        query = f"name='{folder_name}' and '{parent_folder_id}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
        results = drive_service.files().list(
            q=query,
            fields="files(id, name)",
            supportsAllDrives=True,
            includeItemsFromAllDrives=True
        ).execute()
        
        folders = results.get('files', [])
        
        if folders:
            return folders[0]['id']
        else:
            folder_metadata = {
                'name': folder_name,
                'parents': [parent_folder_id],
                'mimeType': 'application/vnd.google-apps.folder'
            }
            folder = drive_service.files().create(body=folder_metadata, supportsAllDrives=True, fields='id').execute()
            return folder['id']
            
    except Exception as e:
        logger.error(f"Error in find_or_create_folder for '{folder_name}': {e}")
        raise

def upload_claim_document(file, client_id, member_name, claim_id, document_type):
    """Uploads a claim document to a structured folder in Google Drive."""
    drive_service = get_drive_service()
    if not drive_service:
        raise Exception("Google Drive service could not be initialized.")

    try:
        # Build the folder structure: Client -> Member -> Claims -> Claim_ID -> Document_Type
        client_folder_id = find_or_create_folder(drive_service, ROOT_FOLDER_ID, str(client_id))
        member_folder_id = find_or_create_folder(drive_service, client_folder_id, member_name)
        claims_folder_id = find_or_create_folder(drive_service, member_folder_id, "Claims")
        claim_folder_id = find_or_create_folder(drive_service, claims_folder_id, f"Claim_{claim_id}")
        doc_type_folder_id = find_or_create_folder(drive_service, claim_folder_id, document_type)

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        file_extension = file.filename.split('.')[-1] if '.' in file.filename else 'pdf'
        new_filename = f"{client_id}_{member_name}_{document_type}_{timestamp}.{file_extension}"

        file_metadata = {"name": new_filename, "parents": [doc_type_folder_id]}
        media = MediaIoBaseUpload(io.BytesIO(file.read()), mimetype=file.mimetype, resumable=True)
        
        uploaded_file = drive_service.files().create(
            body=file_metadata,
            media_body=media,
            fields="id, name, webViewLink, size",
            supportsAllDrives=True
        ).execute()

        drive_path = f"{client_id}/{member_name}/Claims/Claim_{claim_id}/{document_type}/{new_filename}"

        return {
            "id": uploaded_file.get("id"),
            "name": uploaded_file.get("name"),
            "webViewLink": uploaded_file.get("webViewLink"),
            "drive_path": drive_path,
            "file_size": uploaded_file.get("size")
        }
    except Exception as e:
        logger.error(f"Error uploading claim document to Drive: {e}")
        raise

@claims_bp.route('/')
@login_required
def index():
    """View all claims with optional filtering"""
    try:
        # Get filter parameters
        client_id = request.args.get('client_id')
        policy_number = request.args.get('policy_number')
        search_query = request.args.get('search', '').strip()
        
        # Build the query
        query = supabase.table("claims").select("*, policies(policy_number, client_id, clients(name, client_id))")
        
        # Apply filters
        if client_id:
            query = query.eq("policies.client_id", client_id)
        
        if policy_number:
            query = query.eq("policies.policy_number", policy_number)
        
        # Execute query
        result = query.order("created_at", desc=True).execute()
        claims = result.data or []
        
        # Apply text search if provided
        if search_query:
            search_lower = search_query.lower()
            filtered_claims = []
            for claim in claims:
                # Search in claim number, member name, client name, policy number
                if (search_lower in str(claim.get('claim_number', '')).lower() or
                    search_lower in str(claim.get('member_name', '')).lower() or
                    search_lower in str(claim['policies']['clients']['name']).lower() or
                    search_lower in str(claim['policies']['policy_number']).lower()):
                    filtered_claims.append(claim)
            claims = filtered_claims
        
        # Calculate stats
        stats = {
            'total': len(claims),
            'pending': len([c for c in claims if c['status'] == 'PENDING']),
            'processing': len([c for c in claims if c['status'] == 'PROCESSING']),
            'approved': len([c for c in claims if c['status'] == 'APPROVED']),
            'settled': len([c for c in claims if c['status'] == 'SETTLED']),
            'rejected': len([c for c in claims if c['status'] == 'REJECTED'])
        }
        
        # Get client name for display if filtering by client
        client_name = None
        if client_id:
            try:
                client_result = supabase.table("clients").select("name").eq("client_id", client_id).single().execute()
                if client_result.data:
                    client_name = client_result.data['name']
            except:
                pass
        
        return render_template('claims.html', 
                             claims=claims, 
                             stats=stats,
                             current_client_id=client_id,
                             current_policy_number=policy_number,
                             current_search=search_query,
                             client_name=client_name,
                             current_user=current_user)
    except Exception as e:
        logger.error(f"Error fetching claims: {e}")
        flash(f"Error loading claims: {str(e)}", "error")
        return render_template('claims.html', claims=[], stats={}, 
                             current_client_id=None, current_policy_number=None, 
                             current_search="", client_name=None, current_user=current_user)

@claims_bp.route('/api/document-types')
@login_required
def get_document_types():
    """API endpoint to get all available document types."""
    try:
        result = supabase.table("custom_document_types").select("type_name").eq("is_active", True).order("type_name").execute()
        types = [item['type_name'] for item in result.data] if result.data else []
        return jsonify({'document_types': types})
    except Exception as e:
        logger.error(f"Error fetching document types: {e}")
        return jsonify({'error': 'Failed to fetch document types'}), 500

@claims_bp.route('/api/add-document-type', methods=['POST'])
@login_required
def add_document_type():
    """API endpoint to add a new custom document type."""
    try:
        data = request.get_json()
        type_name = data.get('type_name', '').strip().upper()
        
        if not type_name:
            return jsonify({'error': 'Document type name is required'}), 400
        
        # Check if it already exists
        existing = supabase.table("custom_document_types").select("id").eq("type_name", type_name).execute()
        if existing.data:
            return jsonify({'error': 'Document type already exists'}), 400
        
        # Add new document type
        result = supabase.table("custom_document_types").insert({"type_name": type_name}).execute()
        return jsonify({'success': True, 'type_name': type_name})
        
    except Exception as e:
        logger.error(f"Error adding document type: {e}")
        return jsonify({'error': 'Failed to add document type'}), 500

@claims_bp.route('/add', methods=['GET', 'POST'])
@login_required
def add_claim():
    """Handles the creation of a new claim."""
    if request.method == 'GET':
        # Get document types for the form
        try:
            result = supabase.table("custom_document_types").select("type_name").eq("is_active", True).order("type_name").execute()
            document_types = [item['type_name'] for item in result.data] if result.data else []
        except:
            document_types = ['MEDICAL_BILL', 'DISCHARGE_SUMMARY', 'PRESCRIPTION', 'LAB_REPORT', 'OTHER']
        
        return render_template('add_claim.html', document_types=document_types, current_user=current_user)
    
    if request.method == 'POST':
        try:
            policy_number = request.form.get('policy_number')
            member_name = request.form.get('member_name')
            claim_type = request.form.get('claim_type')
            claim_number = request.form.get('claim_number')

            if not all([policy_number, member_name, claim_type, claim_number]):
                flash("Policy Number, Member Name, Claim Type, and Claim Number are required.", "error")
                return redirect(url_for('claims.add_claim'))

            policy_result = supabase.table("policies").select("policy_id, client_id, clients(client_id)").eq("policy_number", policy_number).single().execute()
            if not policy_result.data:
                flash("Policy number not found.", "error")
                return redirect(url_for('claims.add_claim'))
            
            policy = policy_result.data
            client_id = policy['clients']['client_id']

            # Convert dates from DD/MM/YYYY to YYYY-MM-DD format for database
            def convert_date_format(date_str):
                if not date_str:
                    return None
                try:
                    # If it's already in YYYY-MM-DD format, return as is
                    if len(date_str.split('-')) == 3 and len(date_str.split('-')[0]) == 4:
                        return date_str
                    # Convert from DD/MM/YYYY to YYYY-MM-DD
                    day, month, year = date_str.split('/')
                    return f"{year}-{month.zfill(2)}-{day.zfill(2)}"
                except:
                    return None

            # Check if claim number already exists
            existing_claim = supabase.table("claims").select("claim_id").eq("claim_number", claim_number).execute()
            if existing_claim.data:
                flash(f"Claim number '{claim_number}' already exists. Please use a different claim number.", "error")
                return redirect(url_for('claims.add_claim'))

            claim_data = {
                "policy_id": policy['policy_id'],
                "member_name": member_name,
                "claim_type": claim_type,
                "claim_number": claim_number,
                "diagnosis": request.form.get('diagnosis'),
                "hospital_name": request.form.get('hospital_name'),
                "admission_date": convert_date_format(request.form.get('admission_date')),
                "discharge_date": convert_date_format(request.form.get('discharge_date')),
                "claimed_amount": float(request.form.get('claimed_amount')) if request.form.get('claimed_amount') else None,
                "status": "PENDING"
            }
            
            result = supabase.table("claims").insert(claim_data).execute()
            claim_id = result.data[0]["claim_id"]

            files = request.files.getlist('claim_documents[]')
            document_types = request.form.getlist('document_types[]')
            custom_document_types = request.form.getlist('custom_document_types[]')

            for i, file in enumerate(files):
                if file and file.filename:
                    try:
                        doc_type = document_types[i] if i < len(document_types) else 'OTHER'
                        
                        # If it's a custom type, use the custom name and save it to database
                        if doc_type == 'OTHER' and i < len(custom_document_types) and custom_document_types[i]:
                            custom_type = custom_document_types[i].strip().upper()
                            # Save custom type to database if it doesn't exist
                            try:
                                existing = supabase.table("custom_document_types").select("id").eq("type_name", custom_type).execute()
                                if not existing.data:
                                    supabase.table("custom_document_types").insert({"type_name": custom_type}).execute()
                                doc_type = custom_type
                            except:
                                pass  # If saving fails, just use the custom name
                        
                        drive_file = upload_claim_document(file, client_id, member_name, claim_id, doc_type)
                        doc_data = {
                            "claim_id": claim_id,
                            "document_name": file.filename,
                            "document_type": doc_type,
                            "drive_file_id": drive_file["id"],
                            "drive_url": drive_file["webViewLink"],
                            "drive_path": drive_file["drive_path"],
                            "file_size": drive_file.get("file_size")
                        }
                        supabase.table("claim_documents").insert(doc_data).execute()
                    except Exception as e:
                        logger.error(f"Failed to upload document '{file.filename}': {e}")
                        flash(f"Warning: Could not upload document '{file.filename}'.", "warning")

            flash(f"Claim added successfully! Claim Number: {claim_number}", "success")
            return redirect(url_for('claims.view_claim', claim_id=claim_id))

        except Exception as e:
            logger.error(f"Error adding claim: {e}", exc_info=True)
            flash(f"An unexpected error occurred while adding the claim: {str(e)}", "error")
            return redirect(url_for('claims.add_claim'))

    return render_template('add_claim.html', current_user=current_user)

@claims_bp.route('/<int:claim_id>')
@login_required
def view_claim(claim_id):
    """View claim details"""
    try:
        claim_result = supabase.table("claims").select("*, policies(policy_number, clients(name, client_id))").eq("claim_id", claim_id).single().execute()
        if not claim_result.data:
            flash("Claim not found", "error")
            return redirect(url_for('claims.index'))
        
        claim = claim_result.data
        docs_result = supabase.table("claim_documents").select("*").eq("claim_id", claim_id).order("uploaded_at", desc=True).execute()
        documents = docs_result.data or []
        
        return render_template('view_claim.html', claim=claim, documents=documents, current_user=current_user)
    except Exception as e:
        logger.error(f"Error fetching claim details for ID {claim_id}: {e}")
        flash(f"Error loading claim details: {str(e)}", "error")
        return redirect(url_for('claims.index'))

@claims_bp.route('/api/policy-lookup')
@login_required
def policy_lookup():
    """API endpoint to look up a policy and get its associated members."""
    policy_number = request.args.get('policy_number')
    if not policy_number:
        return jsonify({'error': 'Policy number is required'}), 400
        
    try:
        policy_result = supabase.table("policies").select("policy_id, product_name, clients(name)").eq("policy_number", policy_number).single().execute()
        if not policy_result.data:
            return jsonify({'error': 'Policy not found'}), 404
        
        policy = policy_result.data
        members = []

        if "HEALTH" in policy.get('product_name', '').upper():
            health_details_res = supabase.table("health_insurance_details").select("health_id").eq("policy_id", policy['policy_id']).single().execute()
            if health_details_res.data:
                health_id = health_details_res.data['health_id']
                members_res = supabase.table("health_insured_members").select("member_name").eq("health_id", health_id).execute()
                if members_res.data:
                    members = sorted([m['member_name'] for m in members_res.data])
        
        if not members:
            member_res = supabase.table("policies").select("members(member_name)").eq("policy_id", policy['policy_id']).single().execute()
            if member_res.data and member_res.data.get('members'):
                members = [member_res.data['members']['member_name']]

        return jsonify({
            'client_name': policy['clients']['name'],
            'members': members
        })
        
    except Exception as e:
        logger.error(f"Error in policy lookup API: {e}")
        return jsonify({'error': 'An internal error occurred.'}), 500

@claims_bp.route('/api/search-clients')
@login_required
def search_clients():
    """API endpoint to search for clients by name."""
    search_term = request.args.get('search', '').strip()
    if len(search_term) < 2:
        return jsonify({'clients': []})
        
    try:
        # Search clients by name (case-insensitive)
        result = supabase.table("clients").select("client_id, name").ilike("name", f"%{search_term}%").order("name").limit(10).execute()
        clients = result.data or []
        
        return jsonify({'clients': clients})
        
    except Exception as e:
        logger.error(f"Error searching clients: {e}")
        return jsonify({'error': 'Failed to search clients'}), 500

@claims_bp.route('/api/client-policies')
@login_required
def get_client_policies():
    """API endpoint to get all policies for a specific client."""
    client_id = request.args.get('client_id')
    if not client_id:
        return jsonify({'error': 'Client ID is required'}), 400
        
    try:
        # Get all policies for the client
        policies_result = supabase.table("policies").select("policy_id, policy_number, product_name, members(member_name)").eq("client_id", client_id).order("policy_number").execute()
        
        if not policies_result.data:
            return jsonify({'policies': []})
        
        policies = []
        for policy in policies_result.data:
            # Get members for health insurance policies
            members = []
            if "HEALTH" in policy.get('product_name', '').upper():
                health_details_res = supabase.table("health_insurance_details").select("health_id").eq("policy_id", policy['policy_id']).execute()
                if health_details_res.data:
                    health_id = health_details_res.data[0]['health_id']
                    members_res = supabase.table("health_insured_members").select("member_name").eq("health_id", health_id).execute()
                    if members_res.data:
                        members = sorted([m['member_name'] for m in members_res.data])
            
            # Fallback to regular members table
            if not members and policy.get('members'):
                members = [policy['members']['member_name']]
            
            policies.append({
                'policy_id': policy['policy_id'],
                'policy_number': policy['policy_number'],
                'product_name': policy['product_name'],
                'members': members
            })
        
        return jsonify({'policies': policies})
        
    except Exception as e:
        logger.error(f"Error fetching client policies: {e}")
        return jsonify({'error': 'Failed to fetch client policies'}), 500

@claims_bp.route('/<int:claim_id>/update-status', methods=['POST'])
@login_required
def update_claim_status(claim_id):
    """Handles status updates and adds settlement information."""
    try:
        new_status = request.form.get('status')
        if not new_status:
            flash("Status is required.", "error")
            return redirect(url_for('claims.view_claim', claim_id=claim_id))
        
        update_data = {
            "status": new_status,
            "remarks": request.form.get('remarks', '')
        }
        
        # Handle claim number update
        claim_number_update = request.form.get('claim_number', '').strip()
        if claim_number_update:
            # Check if this claim number is already used by another claim
            existing_claim = supabase.table("claims").select("claim_id").eq("claim_number", claim_number_update).neq("claim_id", claim_id).execute()
            if existing_claim.data:
                flash(f"Claim number '{claim_number_update}' is already used by another claim.", "error")
                return redirect(url_for('claims.view_claim', claim_id=claim_id))
            update_data["claim_number"] = claim_number_update
        
        # Handle approved amount for APPROVED status
        if new_status == 'APPROVED':
            approved_amount = request.form.get('approved_amount')
            update_data["approved_amount"] = float(approved_amount) if approved_amount else None
        
        # Handle settlement information for SETTLED status
        if new_status == 'SETTLED':
            settled_amount = request.form.get('settled_amount')
            settlement_date = request.form.get('settlement_date')
            settled_amount_float = float(settled_amount) if settled_amount else None
            
            update_data["settled_amount"] = settled_amount_float
            
            # If approved_amount is not set, set it to settled_amount (they should be the same)
            if settled_amount_float and not update_data.get("approved_amount"):
                # Check if approved_amount is already set in database
                current_claim = supabase.table("claims").select("approved_amount").eq("claim_id", claim_id).single().execute()
                if current_claim.data and not current_claim.data.get("approved_amount"):
                    update_data["approved_amount"] = settled_amount_float
            
            # Convert settlement date from DD/MM/YYYY to YYYY-MM-DD
            if settlement_date:
                try:
                    if '/' in settlement_date:
                        day, month, year = settlement_date.split('/')
                        update_data["settlement_date"] = f"{year}-{month.zfill(2)}-{day.zfill(2)}"
                    else:
                        update_data["settlement_date"] = settlement_date
                except:
                    update_data["settlement_date"] = None
            else:
                update_data["settlement_date"] = None
                
            update_data["utr_no"] = request.form.get('utr_no')
        
        supabase.table("claims").update(update_data).eq("claim_id", claim_id).execute()
        flash("Claim status updated successfully!", "success")
        
    except Exception as e:
        logger.error(f"Error updating status for claim {claim_id}: {e}")
        flash(f"Error updating status: {str(e)}", "error")
        
    return redirect(url_for('claims.view_claim', claim_id=claim_id))

@claims_bp.route('/<int:claim_id>/upload-document', methods=['POST'])
@login_required
def upload_document(claim_id):
    """Upload additional document to an existing claim."""
    try:
        claim_result = supabase.table("claims").select("*, policies(clients(client_id))").eq("claim_id", claim_id).single().execute()
        if not claim_result.data:
            flash("Claim not found", "error")
            return redirect(url_for('claims.index'))
        
        claim = claim_result.data
        client_id = claim['policies']['clients']['client_id']
        member_name = claim['member_name']
        
        file = request.files.get('document')
        document_type = request.form.get('document_type', 'OTHER')
        custom_document_type = request.form.get('custom_document_type', '')
        
        # If it's a custom type, use the custom name and save it to database
        if document_type == 'OTHER' and custom_document_type:
            custom_type = custom_document_type.strip().upper()
            # Save custom type to database if it doesn't exist
            try:
                existing = supabase.table("custom_document_types").select("id").eq("type_name", custom_type).execute()
                if not existing.data:
                    supabase.table("custom_document_types").insert({"type_name": custom_type}).execute()
                document_type = custom_type
            except:
                document_type = custom_type  # Use custom name even if saving fails
        
        if not file or not file.filename:
            flash("Please select a file to upload.", "error")
            return redirect(url_for('claims.view_claim', claim_id=claim_id))
        
        drive_file = upload_claim_document(file, client_id, member_name, claim_id, document_type)
        
        doc_data = {
            "claim_id": claim_id,
            "document_name": file.filename,
            "document_type": document_type,
            "drive_file_id": drive_file["id"],
            "drive_url": drive_file["webViewLink"],
            "drive_path": drive_file["drive_path"],
            "file_size": drive_file.get("file_size")
        }
        supabase.table("claim_documents").insert(doc_data).execute()
        
        flash("Document uploaded successfully!", "success")
    except Exception as e:
        logger.error(f"Error uploading additional document for claim {claim_id}: {e}")
        flash(f"Error uploading document: {str(e)}", "error")
        
    return redirect(url_for('claims.view_claim', claim_id=claim_id))


================================================
FILE: routes/client_export.py
================================================
from flask import Blueprint, request, jsonify, send_file, flash, redirect, url_for
from flask_login import login_required
import os
import tempfile
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from supabase import create_client
from dynamic_config import Config

client_export_bp = Blueprint('client_export', __name__)

# Initialize Supabase
supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)

def convert_date_for_display(date_str):
    """Convert database date to display format"""
    if not date_str:
        return ""
    try:
        if isinstance(date_str, str):
            # Handle different date formats
            for fmt in ('%Y-%m-%d', '%d/%m/%Y', '%Y-%m-%d %H:%M:%S'):
                try:
                    date_obj = datetime.strptime(date_str, fmt)
                    return date_obj.strftime('%d/%m/%Y')
                except ValueError:
                    continue
        return str(date_str)
    except:
        return str(date_str) if date_str else ""

@client_export_bp.route('/export_client_data/<client_id>')
@login_required
def export_client_data(client_id):
    """Export all client policy data to Excel file"""
    try:
        # Get client information
        client_result = supabase.table("clients").select("*").eq("client_id", client_id).single().execute()
        if not client_result.data:
            flash("Client not found", "error")
            return redirect(url_for('existing_policies.list_all'))
        
        client = client_result.data
        
        # Get all active policies for this client
        policies_result = supabase.table("policies").select("""
            policy_id, policy_number, insurance_company, product_name, agent_name,
            policy_from, policy_to, payment_date, business_type, group_name, subgroup_name,
            remarks, sum_insured, net_premium, addon_premium, tp_tr_premium, gst_percentage, 
            gross_premium
        """).eq("client_id", client_id).execute()
        
        policies = policies_result.data
        
        if not policies:
            flash("No active policies found for this client", "warning")
            return redirect(url_for('existing_policies.list_all'))
        
        # Get health insurance details for all policies
        health_details = {}
        health_members = {}
        
        for policy in policies:
            policy_id = policy['policy_id']
            
            # Get health insurance details
            health_result = supabase.table("health_insurance_details").select("*").eq("policy_id", policy_id).execute()
            if health_result.data:
                health_details[policy_id] = health_result.data[0]
                
                # Get health members
                health_id = health_result.data[0]['health_id']
                members_result = supabase.table("health_insured_members").select("*").eq("health_id", health_id).execute()
                health_members[policy_id] = members_result.data
        
        # Get factory insurance details for all policies
        factory_details = {}
        for policy in policies:
            policy_id = policy['policy_id']
            factory_result = supabase.table("factory_insurance_details").select("*").eq("policy_id", policy_id).execute()
            if factory_result.data:
                factory_details[policy_id] = factory_result.data[0]
        
        # Create Excel file
        wb = Workbook()
        ws = wb.active
        ws.title = f"{client_id} Policy Data"
        
        # Define styles
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # Determine maximum number of health members across all policies
        max_health_members = 0
        for policy_id in health_members:
            max_health_members = max(max_health_members, len(health_members[policy_id]))
        
        # Create headers (removed commission fields for client privacy)
        headers = [
            "Policy Number", "Insurance Company", "Product Type", "Agent Name",
            "Policy Start Date", "Policy End Date", "Payment Date", "Business Type",
            "Group", "Subgroup", "Remarks", "Sum Insured", "Net Premium/OD", 
            "Addon Premium", "TP/TR Premium", "GST %", "Gross Premium"
        ]
        
        # Add health insurance headers if applicable
        if max_health_members > 0:
            headers.extend(["Health Plan Type", "Floater Sum Insured", "Floater Bonus", "Floater Deductible"])
            for i in range(max_health_members):
                member_num = i + 1
                headers.extend([
                    f"Member {member_num} Name",
                    f"Member {member_num} Sum Insured", 
                    f"Member {member_num} Bonus",
                    f"Member {member_num} Deductible"
                ])
        
        # Add factory insurance headers
        factory_headers = [
            "Building Coverage", "Plant & Machinery Coverage", 
            "Furniture & Fittings Coverage", "Stocks Coverage", 
            "Electrical Installations Coverage"
        ]
        headers.extend(factory_headers)
        
        # Write headers
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
            cell.border = border
        
        # Write data rows
        for row_idx, policy in enumerate(policies, 2):
            policy_id = policy['policy_id']
            
            # Basic policy data (commission information excluded for client privacy)
            
            row_data = [
                policy.get('policy_number', ''),
                policy.get('insurance_company', ''),
                policy.get('product_name', ''),
                policy.get('agent_name', ''),
                convert_date_for_display(policy.get('policy_from')),
                convert_date_for_display(policy.get('policy_to')),
                convert_date_for_display(policy.get('payment_date')),
                policy.get('business_type', ''),
                policy.get('group_name', ''),
                policy.get('subgroup_name', ''),
                policy.get('remarks', ''),
                policy.get('sum_insured', ''),
                policy.get('net_premium', ''),
                policy.get('addon_premium', ''),
                policy.get('tp_tr_premium', ''),
                policy.get('gst_percentage', ''),
                policy.get('gross_premium', '')
            ]
            
            # Add health insurance data if applicable
            if max_health_members > 0:
                if policy_id in health_details:
                    health_detail = health_details[policy_id]
                    row_data.extend([
                        health_detail.get('plan_type', ''),
                        health_detail.get('floater_sum_insured', ''),
                        health_detail.get('floater_bonus', ''),
                        health_detail.get('floater_deductible', '')
                    ])
                    
                    # Add member data
                    members = health_members.get(policy_id, [])
                    for i in range(max_health_members):
                        if i < len(members):
                            member = members[i]
                            row_data.extend([
                                member.get('member_name', ''),
                                member.get('sum_insured', ''),
                                member.get('bonus', ''),
                                member.get('deductible', '')
                            ])
                        else:
                            row_data.extend(['', '', '', ''])  # Empty cells for missing members
                else:
                    # No health insurance for this policy
                    row_data.extend([''] * (4 + max_health_members * 4))
            
            # Add factory insurance data
            if policy_id in factory_details:
                factory_detail = factory_details[policy_id]
                row_data.extend([
                    factory_detail.get('building', ''),
                    factory_detail.get('plant_machinery', ''),
                    factory_detail.get('furniture_fittings', ''),
                    factory_detail.get('stocks', ''),
                    factory_detail.get('electrical_installations', '')
                ])
            else:
                row_data.extend(['', '', '', '', ''])  # Empty factory columns
            
            # Write row data
            for col, value in enumerate(row_data, 1):
                cell = ws.cell(row=row_idx, column=col, value=value)
                cell.border = border
                if col > 11 and value:  # Format numeric columns
                    try:
                        if float(value):
                            cell.number_format = '#,##0.00'
                    except (ValueError, TypeError):
                        pass
        
        # Auto-adjust column widths
        for column in ws.columns:
            max_length = 0
            column_letter = get_column_letter(column[0].column)
            
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            
            adjusted_width = min(max_length + 2, 50)  # Cap at 50 characters
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # Save to temporary file
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx')
        wb.save(temp_file.name)
        temp_file.close()
        
        # Generate filename
        filename = f"{client_id}_data.xlsx"
        
        return send_file(
            temp_file.name,
            as_attachment=True,
            download_name=filename,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        
    except Exception as e:
        print(f"Error exporting client data: {e}")
        flash(f"Error exporting data: {str(e)}", "error")
        return redirect(url_for('existing_policies.list_all'))
    
    finally:
        # Clean up temporary file
        try:
            if 'temp_file' in locals():
                os.unlink(temp_file.name)
        except:
            pass



================================================
FILE: routes/dashboard.py
================================================
from flask import Blueprint, render_template, request
from flask_login import login_required, current_user
from supabase import create_client
from dynamic_config import Config
from datetime import datetime, timedelta
import math

dashboard_bp = Blueprint("dashboard", __name__)

supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)


@dashboard_bp.route("/")
@login_required
def index():
    """
    Dashboard showing policies expiring in the next 30 days and statistics
    """
    today = datetime.today().strftime("%Y-%m-%d")
    next_month = (datetime.today() + timedelta(days=30)).strftime("%Y-%m-%d")

    try:
        # Get policies expiring soon with customer information
        policies_result = (
            supabase.table("policies")
            .select("*, clients(*), members(*)")
            .gte("policy_to", today)
            .lte("policy_to", next_month)
            .order("policy_to", desc=False)
            .execute()
        )

        policies = policies_result.data

        # Flatten the customer data for easier template access
        for policy in policies:
            if policy.get("clients"):
                policy["customer_name"] = policy["clients"]["name"]
                policy["customer_email"] = policy["clients"]["email"]
                policy["customer_phone"] = policy["clients"].get("phone", "")
            if policy.get("members"):
                policy["member_name"] = policy["members"].get("member_name", "")
            else:
                policy["customer_name"] = "Unknown"
                policy["customer_email"] = ""
                policy["customer_phone"] = ""

        print(f"Found {len(policies)} policies expiring between {today} and {next_month}")

        # Get total active policies count
        total_policies_result = supabase.table("policies").select("policy_id", count="exact").execute()
        total_active_policies = total_policies_result.count if total_policies_result.count else 0

        # Get pending policies count
        pending_policies_result = supabase.table("pending_policies").select("pending_id", count="exact").execute()
        total_pending_policies = pending_policies_result.count if pending_policies_result.count else 0

        # --- NEW: Get total claims count ---
        claims_result = supabase.table("claims").select("claim_id", count="exact").execute()
        total_claims = claims_result.count or 0

        print(f"Total active policies: {total_active_policies}")
        print(f"Total pending policies: {total_pending_policies}")

    except Exception as e:
        print(f"Error fetching policies: {e}")
        policies = []
        total_active_policies = 0
        total_pending_policies = 0

    return render_template("dashboard.html", 
                         policies=policies, 
                         total_active_policies=total_active_policies,
                         total_pending_policies=total_pending_policies,
                         total_claims=total_claims,
                         current_user=current_user)


@dashboard_bp.route("/view_all_policies")
@login_required
def view_all_policies():
    """
    View all policies with search functionality and pagination
    Shows 100 policies per page with member names instead of client names
    """
    try:
        # Get search and pagination parameters
        search_query = request.args.get("search", "").strip()
        page = int(request.args.get("page", 1))
        per_page = 100
        offset = (page - 1) * per_page

        # Base query to get policies with member and client information
        query = supabase.table("policies").select("*, clients(*), members(*)")

        # Apply search filter if provided
        if search_query:
            # Search in member name, insurance company, product name, or policy number
            search_lower = search_query.lower()
            
            # Get all policies first, then filter in Python (since Supabase doesn't support complex OR queries easily)
            all_policies_result = query.execute()
            all_policies = all_policies_result.data
            
            filtered_policies = []
            for policy in all_policies:
                member_name = policy.get("members", {}).get("member_name", "") if policy.get("members") else ""
                insurance_company = policy.get("insurance_company", "")
                product_name = policy.get("product_name", "")
                policy_number = policy.get("policy_number", "")
                
                if (search_lower in member_name.lower() or 
                    search_lower in insurance_company.lower() or 
                    search_lower in product_name.lower() or 
                    search_lower in str(policy_number).lower()):
                    filtered_policies.append(policy)
            
            total_policies = len(filtered_policies)
            # Apply pagination to filtered results
            policies = filtered_policies[offset:offset + per_page]
        else:
            # Get total count for pagination
            count_result = supabase.table("policies").select("policy_id", count="exact").execute()
            total_policies = count_result.count or 0
            
            # Get paginated policies
            policies_result = (query
                             .order("policy_id", desc=True)
                             .range(offset, offset + per_page - 1)
                             .execute())
            policies = policies_result.data

        # Process policies to flatten customer and member data
        for policy in policies:
            if policy.get("clients"):
                policy["customer_name"] = policy["clients"]["name"]
                policy["customer_email"] = policy["clients"]["email"]
                policy["customer_phone"] = policy["clients"].get("phone", "")
            else:
                policy["customer_name"] = "Unknown"
                policy["customer_email"] = ""
                policy["customer_phone"] = ""
                
            if policy.get("members"):
                policy["member_name"] = policy["members"].get("member_name", "")
            else:
                policy["member_name"] = "Unknown Member"

        # Calculate pagination info
        total_pages = math.ceil(total_policies / per_page)
        has_prev = page > 1
        has_next = page < total_pages
        prev_page = page - 1 if has_prev else None
        next_page = page + 1 if has_next else None

        # Calculate page range for pagination display
        start_page = max(1, page - 2)
        end_page = min(total_pages, page + 2)
        page_range = list(range(start_page, end_page + 1))

        print(f"Found {len(policies)} policies on page {page} of {total_pages}")
        print(f"Total policies: {total_policies}, Search query: '{search_query}'")

        return render_template("view_all_policies.html",
                             policies=policies,
                             current_search=search_query,
                             page=page,
                             total_pages=total_pages,
                             total_policies=total_policies,
                             has_prev=has_prev,
                             has_next=has_next,
                             prev_page=prev_page,
                             next_page=next_page,
                             page_range=page_range,
                             per_page=per_page,
                             current_user=current_user)

    except Exception as e:
        print(f"Error fetching policies: {e}")
        return render_template("view_all_policies.html",
                             policies=[],
                             current_search=search_query,
                             page=1,
                             total_pages=0,
                             total_policies=0,
                             has_prev=False,
                             has_next=False,
                             prev_page=None,
                             next_page=None,
                             page_range=[],
                             per_page=per_page,
                             current_user=current_user,
                             error=str(e))


================================================
FILE: routes/excel_routes.py
================================================
"""
Excel Management Routes for Insurance Portal
"""

from flask import Blueprint, render_template, jsonify, request, redirect, url_for, flash
from flask_login import login_required, current_user
import logging
import os
from datetime import datetime
# Try to import excel sync service, but don't fail if dependencies are missing
excel_sync = None
try:
    from excel_sync_service import get_excel_sync, initialize_excel_sync
    excel_sync = get_excel_sync()
    if excel_sync is None:
        excel_sync = initialize_excel_sync()
except ImportError as e:
    # Excel dependencies not installed yet
    import logging
    logging.getLogger(__name__).warning(f"Excel sync service not available: {e}")
    excel_sync = None

logger = logging.getLogger(__name__)
excel_bp = Blueprint("excel", __name__)


@excel_bp.route('/excel')
@login_required
def excel_dashboard():
    """Excel management dashboard"""
    try:
        if excel_sync is None:
            # Show setup page when dependencies are missing
            return render_template('excel_setup.html')
            
        # Get file information
        file_info = excel_sync.get_drive_file_info()
        shareable_link = excel_sync.get_shareable_link()
        
        return render_template('excel_dashboard.html', 
                             file_info=file_info,
                             shareable_link=shareable_link)
    except Exception as e:
        logger.error(f"Error loading Excel dashboard: {e}")
        # Show setup page on any error
        return render_template('excel_setup.html')


@excel_bp.route('/api/excel/export', methods=['POST'])
@login_required
def export_to_excel():
    """Export current database data to Excel in Google Drive"""
    try:
        if excel_sync is None:
            return jsonify({
                'success': False,
                'message': 'Excel service is not available. Please install required dependencies.'
            }), 500
            
        logger.info(f"Excel export requested by user: {current_user.email}")
        
        # Trigger manual sync
        excel_sync.manual_sync()
        success, message = True, "Excel file updated successfully"
        
        if success:
            logger.info(f"Excel export successful for user: {current_user.email}")
            return jsonify({
                'success': True,
                'message': message,
                'timestamp': datetime.now().isoformat()
            })
        else:
            logger.error(f"Excel export failed for user {current_user.email}: {message}")
            return jsonify({
                'success': False,
                'message': message
            }), 500
            
    except Exception as e:
        logger.error(f"Excel export error for user {current_user.email}: {e}")
        return jsonify({
            'success': False,
            'message': f"Export failed: {str(e)}"
        }), 500


@excel_bp.route('/api/excel/download', methods=['POST'])
@login_required
def download_excel():
    """Download Excel file (local file available)"""
    try:
        if excel_sync is None:
            return jsonify({
                'success': False,
                'message': 'Excel service is not available. Please install required dependencies.'
            }), 500
            
        logger.info(f"Excel download requested by user: {current_user.email}")
        
        # Check if local file exists
        if os.path.exists(excel_sync.local_excel_path):
            logger.info(f"Excel download successful for user: {current_user.email}")
            return jsonify({
                'success': True,
                'message': 'Excel file is available for download',
                'local_path': excel_sync.local_excel_path,
                'timestamp': datetime.now().isoformat()
            })
        else:
            # Trigger sync to create file
            excel_sync.manual_sync()
            return jsonify({
                'success': True,
                'message': 'Excel file created and available for download',
                'timestamp': datetime.now().isoformat()
            })
            
    except Exception as e:
        logger.error(f"Excel download error for user {current_user.email}: {e}")
        return jsonify({
            'success': False,
            'message': f"Download failed: {str(e)}"
        }), 500


@excel_bp.route('/api/excel/info', methods=['GET'])
@login_required
def get_excel_info():
    """Get Excel file information"""
    try:
        if excel_sync is None:
            return jsonify({
                'success': False,
                'message': 'Excel service is not available. Please install required dependencies.'
            }), 500
            
        file_info = excel_sync.get_drive_file_info()
        shareable_link = excel_sync.get_shareable_link()
        
        if file_info:
            return jsonify({
                'success': True,
                'file_info': file_info,
                'shareable_link': shareable_link,
                'timestamp': datetime.now().isoformat()
            })
        else:
            return jsonify({
                'success': False,
                'message': "Could not retrieve file information"
            }), 500
            
    except Exception as e:
        logger.error(f"Error getting Excel info: {e}")
        return jsonify({
            'success': False,
            'message': f"Error: {str(e)}"
        }), 500


@excel_bp.route('/api/excel/refresh', methods=['POST'])
@login_required
def refresh_excel_data():
    """Refresh Excel file with latest database data"""
    try:
        logger.info(f"Excel refresh requested by user: {current_user.email}")
        
        # Trigger manual sync
        excel_sync.manual_sync()
        
        # Get updated file info
        file_info = excel_sync.get_drive_file_info()
        shareable_link = excel_sync.get_shareable_link()
        
        success = True
        
        if success:
            logger.info(f"Excel refresh successful for user: {current_user.email}")
            return jsonify({
                'success': True,
                'message': 'Excel file refreshed with latest data',
                'file_info': file_info,
                'shareable_link': shareable_link,
                'timestamp': datetime.now().isoformat()
            })
        else:
            logger.error(f"Excel refresh failed for user {current_user.email}: {message}")
            return jsonify({
                'success': False,
                'message': message
            }), 500
            
    except Exception as e:
        logger.error(f"Excel refresh error for user {current_user.email}: {e}")
        return jsonify({
            'success': False,
            'message': f"Refresh failed: {str(e)}"
        }), 500


@excel_bp.route('/api/excel/policy-history-report', methods=['POST'])
@login_required
def generate_policy_history_report():
    """Generate a detailed policy history Excel report"""
    try:
        if excel_sync is None:
            return jsonify({
                'success': False,
                'message': 'Excel service is not available. Please install required dependencies.'
            }), 500
        
        # Get filter parameters from request
        data = request.get_json() or {}
        policy_id = data.get('policy_id')
        client_id = data.get('client_id')
        date_from = data.get('date_from')
        date_to = data.get('date_to')
        
        logger.info(f"Policy history report requested by user: {current_user.email}")
        logger.info(f"Filters - Policy ID: {policy_id}, Client ID: {client_id}, Date range: {date_from} to {date_to}")
        
        # Generate the report
        report_path = excel_sync.export_policy_history_report(
            policy_id=policy_id,
            client_id=client_id,
            date_from=date_from,
            date_to=date_to
        )
        
        if os.path.exists(report_path):
            logger.info(f"Policy history report generated successfully for user: {current_user.email}")
            return jsonify({
                'success': True,
                'message': 'Policy history report generated successfully',
                'report_path': report_path,
                'filename': os.path.basename(report_path),
                'timestamp': datetime.now().isoformat()
            })
        else:
            logger.error(f"Policy history report file not found: {report_path}")
            return jsonify({
                'success': False,
                'message': 'Report generation failed - file not created'
            }), 500
            
    except Exception as e:
        logger.error(f"Policy history report error for user {current_user.email}: {e}")
        return jsonify({
            'success': False,
            'message': f"Report generation failed: {str(e)}"
        }), 500


@excel_bp.route('/api/excel/download-history-report/<filename>')
@login_required
def download_history_report(filename):
    """Download a generated policy history report"""
    try:
        # Security check - ensure filename is safe
        if not filename.endswith('.xlsx') or '..' in filename or '/' in filename:
            return jsonify({
                'success': False,
                'message': 'Invalid filename'
            }), 400
        
        report_path = os.path.join(os.getcwd(), filename)
        
        if not os.path.exists(report_path):
            return jsonify({
                'success': False,
                'message': 'Report file not found'
            }), 404
        
        logger.info(f"Policy history report download: {filename} by user: {current_user.email}")
        
        from flask import send_file
        return send_file(
            report_path,
            as_attachment=True,
            download_name=filename,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        
    except Exception as e:
        logger.error(f"Policy history report download error: {e}")
        return jsonify({
            'success': False,
            'message': f"Download failed: {str(e)}"
        }), 500



================================================
FILE: routes/existing_policies.py
================================================
# routes/existing_policies.py - Now handles client-centric view
from flask import Blueprint, render_template, request, redirect, url_for, flash
from flask_login import login_required, current_user
from supabase import create_client
from dynamic_config import Config

existing_policies_bp = Blueprint("existing_policies", __name__)
supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)


@existing_policies_bp.route("/existing_policies")
@login_required
def list_all():
    """View all clients with their members and policies in hierarchical structure"""
    try:
        # Get search parameter
        search_query = request.args.get("search", "").strip()

        # Fetch all clients with their data
        clients_result = supabase.table("clients").select("*").order("client_id").execute()
        all_clients = clients_result.data

        # Build hierarchical structure: Clients -> Members -> Policies
        clients_data = []
        
        for client in all_clients:
            client_id = client['client_id']
            
            # Get all members for this client
            members_result = supabase.table("members").select("*").eq("client_id", client_id).order("member_name").execute()
            client_members = members_result.data
            
            # For each member, get their policies
            members_with_policies = []
            total_client_policies = 0
            
            for member in client_members:
                member_id = member['member_id']
                
                # Get all policies for this member
                policies_result = (
                    supabase.table("policies")
                    .select("*")
                    .eq("member_id", member_id)
                    .order("policy_to", desc=True)
                    .execute()
                )
                
                member_policies = policies_result.data
                total_client_policies += len(member_policies)
                
                # Add policies to member data
                member['policies'] = member_policies
                member['policy_count'] = len(member_policies)
                members_with_policies.append(member)
            
            # Add member data to client
            client['members'] = members_with_policies
            client['total_policies'] = total_client_policies
            client['member_count'] = len(members_with_policies)
            
            # Apply search filter if provided
            if search_query:
                search_lower = search_query.lower()
                # Search in client name, client ID, member names, or policy details
                client_matches = (
                    search_lower in client['name'].lower() or
                    search_lower in client['client_id'].lower() or
                    any(search_lower in member['member_name'].lower() for member in members_with_policies) or
                    any(
                        any(
                            search_lower in str(policy.get('insurance_company', '')).lower() or
                            search_lower in str(policy.get('product_name', '')).lower() or
                            search_lower in str(policy.get('policy_number', '')).lower()
                            for policy in member['policies']
                        )
                        for member in members_with_policies
                    )
                )
                
                if client_matches:
                    clients_data.append(client)
            else:
                clients_data.append(client)

        print(f"Found {len(clients_data)} clients (filtered from {len(all_clients)} total)")
        print(f"Search query: '{search_query}'")

        return render_template(
            "view_all_clients.html",
            clients=clients_data,
            current_search=search_query,
            total_clients=len(clients_data),
            current_user=current_user
        )

    except Exception as e:
        print(f"Error fetching clients: {e}")
        flash(f"Error loading clients: {str(e)}", "error")
        return render_template("view_all_clients.html", clients=[], current_search="", total_clients=0, current_user=current_user)


@existing_policies_bp.route("/view_policy/<int:policy_id>")
@login_required
def view_policy(policy_id):
    """View detailed information about a specific policy"""
    try:
        result = (
            supabase.table("policies")
            .select("*, clients(*), members(*)")
            .eq("policy_id", policy_id)
            .single()
            .execute()
        )

        policy = result.data

        # Flatten customer data
        if policy.get("clients"):
            policy["customer_name"] = policy["clients"]["name"]
            policy["customer_email"] = policy["clients"]["email"]
            policy["customer_phone"] = policy["clients"].get("phone", "")
        if policy.get("members"):
            policy["member_name"] = policy["members"].get("member_name", "")

        return render_template("view_policy.html", policy=policy, current_user=current_user)

    except Exception as e:
        print(f"Error fetching policy: {e}")
        flash(f"Error: {str(e)}", "error")
        return redirect(url_for("existing_policies.list_all"))


@existing_policies_bp.route("/delete_policy/<int:policy_id>", methods=["POST"])
@login_required
def delete_policy(policy_id):
    """Delete a policy"""
    try:
        supabase.table("policies").delete().eq("policy_id", policy_id).execute()
        flash("Policy deleted successfully", "success")
    except Exception as e:
        print(f"Error deleting policy: {e}")
        flash(f"Error: {str(e)}", "error")

    return redirect(url_for("existing_policies.list_all"))


================================================
FILE: routes/pending_policies.py
================================================
# routes/pending_policies.py
from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify
from flask_login import login_required, current_user
from supabase import create_client
from dynamic_config import Config
from datetime import datetime


def convert_date_format(date_string):
    """Convert DD/MM/YYYY to YYYY-MM-DD for database storage"""
    if not date_string:
        return None
    try:
        # If already in YYYY-MM-DD format, return as is
        if '-' in date_string and len(date_string.split('-')[0]) == 4:
            return date_string
        # Convert DD/MM/YYYY to YYYY-MM-DD
        if '/' in date_string:
            parts = date_string.split('/')
            if len(parts) == 3:
                return f"{parts[2]}-{parts[1]}-{parts[0]}"
        return date_string
    except:
        return date_string

def _is_factory_insurance(product_name):
    """Check if a product is a factory-type insurance that requires factory details"""
    if not product_name:
        return False
    
    product_upper = product_name.upper()
    return (
        "FACTORY" in product_upper or
        "BHARAT GRIHA RAKSHA" in product_upper or
        "BHARAT SOOKSHMA UDYAM SURAKSHA" in product_upper or
        "BHARAT LAGHU UDYAM SURAKSHA" in product_upper
    )

pending_policies_bp = Blueprint("pending_policies", __name__)
supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)

@pending_policies_bp.route("/test_pending_backend")
@login_required
def test_pending_backend():
    """Test endpoint to verify pending policies backend is working"""
    return jsonify({
        "status": "success",
        "message": "Pending policies backend is working properly",
        "timestamp": datetime.now().isoformat()
    })


@pending_policies_bp.route("/pending_policies")
@login_required
def list_pending():
    """View all pending policies"""
    try:
        result = (
            supabase.table("pending_policies")
            .select("*, clients(*), members(*)")
            .order("created_at", desc=True)
            .execute()
        )

        pending = result.data

        # Flatten customer data
        for policy in pending:
            if policy.get("clients"):
                policy["client_name"] = policy["clients"]["name"]
                policy["customer_email"] = policy["clients"]["email"]
                policy["customer_phone"] = policy["clients"].get("phone", "")
            if policy.get("members"):
                policy["member_name"] = policy["members"].get("member_name", "")
                # Use member name as the primary display name
                policy["customer_name"] = policy["members"].get("member_name", "")
            else:
                policy["client_name"] = "Unknown"
                policy["customer_name"] = "Unknown"
                policy["customer_email"] = ""
                policy["customer_phone"] = ""

        print(f"Found {len(pending)} pending policies")
        return render_template("pending_policies.html", pending_policies=pending, current_user=current_user)

    except Exception as e:
        print(f"Error fetching pending policies: {e}")
        flash(f"Error loading pending policies: {str(e)}", "error")
        return render_template("pending_policies.html", pending_policies=[], current_user=current_user)


@pending_policies_bp.route("/add_pending", methods=["GET", "POST"])
@login_required
def add_pending():
    """Add a new pending policy"""
    if request.method == "POST":
        print("\n" + "="*50)
        print("ADD PENDING POLICY FORM SUBMITTED")
        print("="*50)
        print(f"Form data received: {dict(request.form)}")
        
        # Basic validation to catch issues early
        required_fields = ['customer_type', 'insurance_company', 'product_name']
        missing_fields = []
        for field in required_fields:
            if not request.form.get(field):
                missing_fields.append(field)
        
        if missing_fields:
            print(f"❌ Missing required fields: {missing_fields}")
            flash(f"Missing required fields: {', '.join(missing_fields)}", "error")
            return redirect(url_for("pending_policies.add_pending"))
        
        print("✅ Basic validation passed, processing...")
        try:
            customer_type = request.form.get("customer_type")
            insurance_company = request.form.get("insurance_company")
            product_name = request.form.get("product_name")
            agent_name = request.form.get("agent_name")
            remarks = request.form.get("remarks")
            policy_from = request.form.get("policy_from")
            policy_to = request.form.get("policy_to")
            payment_date = request.form.get("payment_date")
            net_premium = request.form.get("net_premium")
            addon_premium = request.form.get("addon_premium")  # NEW
            tp_tr_premium = request.form.get("tp_tr_premium")
            gst_percentage = request.form.get("gst_percentage")  # NEW
            gross_premium = request.form.get("gross_premium")  # This will be auto-calculated
            commission_percentage = request.form.get("commission_percentage")
            commission_amount = request.form.get("commission_amount")  # NEW
            business_type = request.form.get("business_type")
            group_name = request.form.get("group_name")
            subgroup_name = request.form.get("subgroup_name")
            payment_details = request.form.get("payment_details")
            one_time_insurance = True if request.form.get("one_time_insurance") in ["on", "true", "1"] else False
            commission_received = True if request.form.get("commission_received") in ["on", "true", "1"] else False
            sum_insured = request.form.get("sum_insured")
            
            # Health insurance specific fields
            health_plan_type = request.form.get("health_plan_type")
            health_member_names = request.form.getlist("health_member_name[]")
            health_member_sum_insureds = request.form.getlist("health_member_sum_insured[]")
            health_member_bonuses = request.form.getlist("health_member_bonus[]")
            health_member_deductibles = request.form.getlist("health_member_deductible[]")
            
            # Floater-specific fields (single sum_insured, bonus, and deductible for entire policy)
            floater_sum_insured = request.form.get("floater_sum_insured")
            floater_bonus = request.form.get("floater_bonus")
            floater_deductible = request.form.get("floater_deductible")
            
            # Factory insurance specific fields
            factory_building = request.form.get("factory_building")
            factory_plant_machinery = request.form.get("factory_plant_machinery")
            factory_furniture_fittings = request.form.get("factory_furniture_fittings")
            factory_stocks = request.form.get("factory_stocks")
            factory_electrical_installations = request.form.get("factory_electrical_installations")

            # Handle client/member creation or selection
            client_id = None
            member_id = None

            if customer_type == "new":
                customer_name = request.form.get("customer_name")
                customer_email = request.form.get("customer_email")
                customer_phone = request.form.get("customer_phone")
                client_prefix = request.form.get("client_prefix")
                member_name = request.form.get("member_name") or customer_name

                if not customer_name:
                    flash("Customer name is required", "error")
                    return redirect(url_for("pending_policies.add_pending"))
                
                if not client_prefix:
                    flash("Client prefix is required", "error")
                    return redirect(url_for("pending_policies.add_pending"))

                # Insert client with prefix
                client_result = supabase.table("clients").insert({
                    "prefix": client_prefix.upper(),
                    "name": customer_name,
                    "email": customer_email,
                    "phone": customer_phone
                }).execute()
                client_id = client_result.data[0]["client_id"]

                # Insert member
                member_result = supabase.table("members").insert({
                    "client_id": client_id,
                    "member_name": member_name
                }).execute()
                member_id = member_result.data[0]["member_id"]

            elif customer_type == "existing":
                client_id = request.form.get("existing_client_id")
                member_id = request.form.get("existing_member_id")
                new_member_name = request.form.get("new_member_name")
                if not client_id:
                    flash("Please select a client", "error")
                    return redirect(url_for("pending_policies.add_pending"))
                # client_id is now a string (e.g., "DS01"), no need to convert to int
                if member_id:
                    member_id = int(member_id)  # member_id is still an integer
                else:
                    # create new member using provided new_member_name or fallback to client name
                    client_row = supabase.table("clients").select("name").eq("client_id", client_id).single().execute()
                    chosen_member_name = new_member_name if new_member_name else (client_row.data.get("name") if client_row and client_row.data else "Member")
                    member_result = supabase.table("members").insert({
                        "client_id": client_id,  # Remove int() conversion since client_id is now a string
                        "member_name": chosen_member_name
                    }).execute()
                    member_id = member_result.data[0]["member_id"]
                print(f"Using existing client {client_id} and member {member_id}")
            else:
                flash("Invalid customer type", "error")
                return redirect(url_for("pending_policies.add_pending"))

            # Insert pending policy - ensure all fields are captured
            pending_data = {
                "client_id": client_id,
                "member_id": member_id,
                "insurance_company": insurance_company,
                "product_name": product_name,
                "one_time_insurance": one_time_insurance,
                "commission_received": commission_received
            }

            # Add optional fields
            if agent_name:
                pending_data["agent_name"] = agent_name
            if remarks:
                pending_data["remarks"] = remarks
            if policy_from:
                pending_data["policy_from"] = convert_date_format(policy_from)
            if policy_to:
                pending_data["policy_to"] = convert_date_format(policy_to)
            if payment_date:
                pending_data["payment_date"] = convert_date_format(payment_date)
            if payment_details:
                pending_data["payment_details"] = payment_details
            if net_premium:
                pending_data["net_premium"] = float(net_premium)
            if addon_premium:
                pending_data["addon_premium"] = float(addon_premium)
            if tp_tr_premium:
                pending_data["tp_tr_premium"] = float(tp_tr_premium)
            if gst_percentage:
                pending_data["gst_percentage"] = float(gst_percentage)
            if gross_premium:
                pending_data["gross_premium"] = float(gross_premium)
            if commission_percentage:
                pending_data["commission_percentage"] = float(commission_percentage)
            if commission_amount:
                pending_data["commission_amount"] = float(commission_amount)
            if business_type:
                pending_data["business_type"] = business_type
            if group_name:
                pending_data["group_name"] = group_name
            if subgroup_name:
                pending_data["subgroup_name"] = subgroup_name
            if sum_insured:
                pending_data["sum_insured"] = float(sum_insured)

            result = supabase.table("pending_policies").insert(pending_data).execute()
            pending_policy = result.data[0]
            pending_id = pending_policy["pending_id"]
            print(f"Pending policy created: {result.data}")
            
            # Handle health insurance details if applicable
            if product_name and "HEALTH" in product_name.upper() and health_plan_type:
                try:
                    # Insert pending health insurance details
                    health_details = {
                        "pending_id": pending_id,
                        "plan_type": health_plan_type
                    }
                    
                    # Add floater-specific fields if it's a floater plan
                    if health_plan_type in ["FLOATER", "TOPUP_FLOATER"]:
                        if floater_sum_insured:
                            health_details["floater_sum_insured"] = float(floater_sum_insured)
                        if floater_bonus:
                            health_details["floater_bonus"] = float(floater_bonus)
                        if health_plan_type == "TOPUP_FLOATER" and floater_deductible:
                            health_details["floater_deductible"] = float(floater_deductible)
                    
                    health_result = supabase.table("pending_health_insurance_details").insert(health_details).execute()
                    pending_health_id = health_result.data[0]["pending_health_id"]
                    
                    # Insert health insured members
                    if health_member_names:
                        for i, member_name in enumerate(health_member_names):
                            if member_name.strip():  # Only insert non-empty names
                                member_data = {
                                    "pending_health_id": pending_health_id,
                                    "member_name": member_name.strip()
                                }
                                
                                # For INDIVIDUAL plans, store sum_insured, bonus, and deductible per member
                                # For FLOATER plans, only store member names (sum_insured, bonus, and deductible are in health_details)
                                if health_plan_type in ["INDIVIDUAL", "TOPUP_INDIVIDUAL"]:
                                    if i < len(health_member_sum_insureds) and health_member_sum_insureds[i]:
                                        member_data["sum_insured"] = float(health_member_sum_insureds[i])
                                    if i < len(health_member_bonuses) and health_member_bonuses[i]:
                                        member_data["bonus"] = float(health_member_bonuses[i])
                                    if health_plan_type == "TOPUP_INDIVIDUAL" and i < len(health_member_deductibles) and health_member_deductibles[i]:
                                        member_data["deductible"] = float(health_member_deductibles[i])
                                
                                supabase.table("pending_health_insured_members").insert(member_data).execute()
                    
                    print(f"Health insurance details saved for pending policy {pending_id} with plan type {health_plan_type}")
                except Exception as e:
                    print(f"Error saving health insurance details: {e}")
                    # Don't fail the whole operation, just log the error
            
            # Handle factory insurance details if applicable
            elif product_name and _is_factory_insurance(product_name):
                try:
                    factory_details = {"pending_id": pending_id}
                    
                    if factory_building:
                        factory_details["building"] = float(factory_building)
                    if factory_plant_machinery:
                        factory_details["plant_machinery"] = float(factory_plant_machinery)
                    if factory_furniture_fittings:
                        factory_details["furniture_fittings"] = float(factory_furniture_fittings)
                    if factory_stocks:
                        factory_details["stocks"] = float(factory_stocks)
                    if factory_electrical_installations:
                        factory_details["electrical_installations"] = float(factory_electrical_installations)
                    
                    # Only insert if we have at least one factory detail
                    if len(factory_details) > 1:  # More than just pending_id
                        supabase.table("pending_factory_insurance_details").insert(factory_details).execute()
                        print(f"Factory insurance details saved for pending policy {pending_id}")
                except Exception as e:
                    print(f"Error saving factory insurance details: {e}")
                    # Don't fail the whole operation, just log the error

            flash("Pending policy added successfully!", "success")
            return redirect(url_for("pending_policies.list_pending"))

        except Exception as e:
            print(f"Error adding pending policy: {e}")
            flash(f"Error: {str(e)}", "error")
            return redirect(url_for("pending_policies.add_pending"))

    return render_template("add_pending_policy.html", current_user=current_user)


@pending_policies_bp.route("/complete_pending/<int:pending_id>", methods=["GET", "POST"])
@login_required
def complete_pending(pending_id):
    """Complete a pending policy by uploading document and converting to active policy"""
    if request.method == "POST":
        try:
            from routes.policies import upload_policy_file

            file = request.files.get("policy_file")
            policy_number = request.form.get("policy_number")
            send_to_customer = request.form.get("send_to_customer") == "yes"  # NEW

            if not file:
                flash("Please upload a policy document", "error")
                return redirect(url_for("pending_policies.complete_pending", pending_id=pending_id))

            # Get pending policy data with customer info
            pending_result = (
                supabase.table("pending_policies")
                .select("*, clients(*), members(*)")
                .eq("pending_id", pending_id)
                .single()
                .execute()
            )
            pending = pending_result.data
            customer = pending.get("clients", {})
            
            # Get health insurance details if they exist
            health_details = None
            health_members = []
            try:
                health_result = supabase.table("pending_health_insurance_details").select("*").eq("pending_id", pending_id).execute()
                if health_result.data:
                    health_details = health_result.data[0]
                    # Get health members
                    members_result = supabase.table("pending_health_insured_members").select("*").eq("pending_health_id", health_details["pending_health_id"]).execute()
                    health_members = members_result.data
            except Exception as e:
                print(f"Error fetching health details: {e}")
            
            # Get factory insurance details if they exist
            factory_details = None
            try:
                factory_result = supabase.table("pending_factory_insurance_details").select("*").eq("pending_id", pending_id).execute()
                if factory_result.data:
                    factory_details = factory_result.data[0]
            except Exception as e:
                print(f"Error fetching factory details: {e}")

            # Get client and member information for file upload
            try:
                # Get client info
                client_result = supabase.table("clients").select("client_id, name").eq("client_id", pending["client_id"]).single().execute()
                client_data = client_result.data
                
                # Get member info  
                member_result = supabase.table("members").select("member_name").eq("member_id", pending["member_id"]).single().execute()
                member_data = member_result.data
                
                client_id_str = client_data['client_id']
                member_name_str = member_data['member_name']
                
            except Exception as e:
                print(f"Error getting client/member info: {e}")
                flash(f"Error retrieving client information: {str(e)}", "error")
                return redirect(url_for("pending_policies.complete_pending", pending_id=pending_id))

            # Upload file to Google Drive with fallback
            print("Uploading file to Google Drive...")
            drive_file = None
            try:
                drive_file = upload_policy_file(file, client_id_str, member_name_str)
                print(f"File uploaded successfully: {drive_file}")
            except Exception as e:
                print(f"Drive upload error: {e}")
                
                # Fallback: Save file locally and continue with policy creation
                print("Attempting local file storage as fallback...")
                try:
                    import os
                    from werkzeug.utils import secure_filename
                    
                    # Create local storage directory
                    upload_folder = os.path.join(os.getcwd(), 'local_uploads', client_id_str, member_name_str)
                    os.makedirs(upload_folder, exist_ok=True)
                    
                    # Save file locally
                    filename = secure_filename(file.filename)
                    local_path = os.path.join(upload_folder, filename)
                    file.seek(0)  # Reset file pointer
                    file.save(local_path)
                    
                    # Create fallback drive_file object
                    drive_file = {
                        "id": f"local_{client_id_str}_{member_name_str}_{filename}",
                        "webViewLink": f"file://{local_path}",
                        "drive_path": f"local/{client_id_str}/{member_name_str}/{filename}"
                    }
                    
                    print(f"File saved locally: {local_path}")
                    flash("File uploaded locally (Google Drive unavailable). Policy completed successfully.", "warning")
                    
                except Exception as local_error:
                    print(f"Local storage also failed: {local_error}")
                    flash(f"Error uploading file: {str(e)}. Please try again or contact support.", "error")
                    return redirect(url_for("pending_policies.complete_pending", pending_id=pending_id))

            # Create active policy
            policy_data = {
                "client_id": pending["client_id"],
                "member_id": pending["member_id"],
                "insurance_company": pending.get("insurance_company"),
                "product_name": pending.get("product_name"),
                "agent_name": pending.get("agent_name"),
                "payment_date": pending.get("payment_date"),
                "policy_from": pending.get("policy_from"),
                "policy_to": pending.get("policy_to"),
                "one_time_insurance": pending.get("one_time_insurance", False),
                "payment_details": pending.get("payment_details"),
                "net_premium": pending.get("net_premium"),
                "gross_premium": pending.get("gross_premium"),
                "tp_tr_premium": pending.get("tp_tr_premium"),
                "commission_percentage": pending.get("commission_percentage"),
                "commission_received": pending.get("commission_received", False),
                "business_type": pending.get("business_type"),
                "group_name": pending.get("group_name"),
                "subgroup_name": pending.get("subgroup_name"),
                "file_path": file.filename,
                "drive_file_id": drive_file.get("id"),
                "drive_path": drive_file.get("drive_path"),
                "drive_url": drive_file.get("webViewLink")
            }

            if policy_number:
                policy_data["policy_number"] = policy_number
            if pending.get("remarks"):
                policy_data["remarks"] = pending["remarks"]
            

            # Insert into policies table
            policy_result = supabase.table("policies").insert(policy_data).execute()
            inserted_policy = policy_result.data[0]
            new_policy_id = inserted_policy["policy_id"]
            print(f"Active policy created: {policy_result.data}")
            
            # Transfer health insurance details if they exist
            if health_details:
                try:
                    # Insert health insurance details for active policy
                    active_health_details = {
                        "policy_id": new_policy_id,
                        "plan_type": health_details["plan_type"]
                    }
                    active_health_result = supabase.table("health_insurance_details").insert(active_health_details).execute()
                    active_health_id = active_health_result.data[0]["health_id"]
                    
                    # Transfer health insured members
                    for member in health_members:
                        member_data = {
                            "health_id": active_health_id,
                            "member_name": member["member_name"]
                        }
                        if member.get("sum_insured"):
                            member_data["sum_insured"] = member["sum_insured"]
                        if member.get("bonus"):
                            member_data["bonus"] = member["bonus"]
                        
                        supabase.table("health_insured_members").insert(member_data).execute()
                    
                    print(f"Health insurance details transferred to active policy {new_policy_id}")
                except Exception as e:
                    print(f"Error transferring health insurance details: {e}")
            
            # Transfer factory insurance details if they exist
            if factory_details:
                try:
                    active_factory_details = {"policy_id": new_policy_id}
                    
                    if factory_details.get("building"):
                        active_factory_details["building"] = factory_details["building"]
                    if factory_details.get("plant_machinery"):
                        active_factory_details["plant_machinery"] = factory_details["plant_machinery"]
                    if factory_details.get("furniture_fittings"):
                        active_factory_details["furniture_fittings"] = factory_details["furniture_fittings"]
                    if factory_details.get("stocks"):
                        active_factory_details["stocks"] = factory_details["stocks"]
                    if factory_details.get("electrical_installations"):
                        active_factory_details["electrical_installations"] = factory_details["electrical_installations"]
                    
                    # Only insert if we have factory details beyond just policy_id
                    if len(active_factory_details) > 1:
                        supabase.table("factory_insurance_details").insert(active_factory_details).execute()
                        print(f"Factory insurance details transferred to active policy {new_policy_id}")
                except Exception as e:
                    print(f"Error transferring factory insurance details: {e}")

            # Remove pending policy and related details after completion
            try:
                # Delete health insurance details if they exist
                if health_details:
                    # Delete health members first (foreign key constraint)
                    supabase.table("pending_health_insured_members").delete().eq("pending_health_id", health_details["pending_health_id"]).execute()
                    # Delete health details
                    supabase.table("pending_health_insurance_details").delete().eq("pending_id", pending_id).execute()
                
                # Delete factory insurance details if they exist
                if factory_details:
                    supabase.table("pending_factory_insurance_details").delete().eq("pending_id", pending_id).execute()
                
                # Finally delete the pending policy
                supabase.table("pending_policies").delete().eq("pending_id", pending_id).execute()
                print(f"Pending policy {pending_id} and related details deleted")
            except Exception as e:
                print(f"Error deleting pending policy details: {e}")
                # Still try to delete the main pending policy
                supabase.table("pending_policies").delete().eq("pending_id", pending_id).execute()

            # NEW: Send to customer if checkbox was ticked
            if send_to_customer:
                messages = []

                # Send via WhatsApp and Email using the unified function
                if customer.get("phone"):
                    try:
                        from whatsapp_bot import send_policy_to_customer, normalize_phone
                        phone = normalize_phone(customer["phone"])
                        # This function handles both WhatsApp and Email sending automatically
                        success, message = send_policy_to_customer(phone, inserted_policy, send_email=True)

                        if success:
                            messages.append("Document sent successfully")
                        else:
                            messages.append(f"Delivery status: {message}")
                    except Exception as e:
                        print(f"Delivery error: {e}")
                        messages.append("Failed to send document")
                elif customer.get("email"):
                    # If no phone but has email, send email only
                    try:
                        from whatsapp_bot import extract_file_id_from_url, download_file_from_drive, delete_temp_file
                        from email_service import send_policy_email, indian_date_filter

                        # Download file temporarily for email
                        file_id = extract_file_id_from_url(inserted_policy.get('drive_url'))
                        if file_id:
                            filename = f"{inserted_policy['insurance_company']}_{inserted_policy['product_name']}.pdf".replace(
                                ' ', '_')
                            temp_file_path = download_file_from_drive(file_id, filename)

                            if temp_file_path:
                                # Prepare policy data for the new template-based function
                                policy_data = {
                                    'client_name': customer["name"],
                                    'policy_type': inserted_policy.get('product_name', 'Insurance'),
                                    'policy_no': inserted_policy.get('policy_number', 'N/A'),
                                    'asset': inserted_policy.get('remarks', 'N/A'),
                                    'start_date': indian_date_filter(inserted_policy.get('policy_from')),
                                    'expiry_date': indian_date_filter(inserted_policy.get('policy_to'))
                                }
                                
                                email_success, email_msg = send_policy_email(
                                    customer["email"],
                                    policy_data,
                                    temp_file_path
                                )

                                if email_success:
                                    messages.append("Email: Sent successfully")
                                else:
                                    messages.append(f"Email: {email_msg}")

                                # Clean up temp file
                                delete_temp_file(temp_file_path)
                    except Exception as e:
                        print(f"Email error: {e}")
                        messages.append("Email: Failed to send")

                if messages:
                    flash(f"Policy completed! Delivery status: {' | '.join(messages)}", "success")
                else:
                    flash("Policy completed but customer has no contact information", "warning")
            else:
                flash("Policy completed and moved to active policies!", "success")

            return redirect(url_for("pending_policies.list_pending"))

        except Exception as e:
            print(f"Error completing policy: {e}")
            flash(f"Error: {str(e)}", "error")
            return redirect(url_for("pending_policies.complete_pending", pending_id=pending_id))

    # GET request - show form
    try:
        result = (
            supabase.table("pending_policies")
            .select("*, clients(*), members(*)")
            .eq("pending_id", pending_id)
            .single()
            .execute()
        )
        pending = result.data

        # Flatten customer data
        if pending.get("clients"):
            pending["client_name"] = pending["clients"]["name"]
            pending["customer_email"] = pending["clients"]["email"]
            pending["customer_phone"] = pending["clients"].get("phone", "")
        if pending.get("members"):
            pending["member_name"] = pending["members"].get("member_name", "")
            # Use member name as the primary display name
            pending["customer_name"] = pending["members"].get("member_name", "")

        return render_template("complete_pending.html", pending=pending, current_user=current_user)

    except Exception as e:
        print(f"Error fetching pending policy: {e}")
        flash(f"Error: {str(e)}", "error")
        return redirect(url_for("pending_policies.list_pending"))


@pending_policies_bp.route("/delete_pending/<int:pending_id>", methods=["POST"])
@login_required
def delete_pending(pending_id):
    """Delete a pending policy"""
    try:
        supabase.table("pending_policies").delete().eq("pending_id", pending_id).execute()
        flash("Pending policy deleted successfully", "success")
    except Exception as e:
        print(f"Error deleting pending policy: {e}")
        flash(f"Error: {str(e)}", "error")

    return redirect(url_for("pending_policies.list_pending"))


================================================
FILE: routes/policies.py
================================================
# routes/policies.py
from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify
from flask_login import login_required, current_user
import datetime, io
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload
from google.oauth2 import service_account
from supabase import create_client
from dynamic_config import Config

# Import WhatsApp functionality
from whatsapp_bot import send_policy_to_customer, normalize_phone


def convert_date_format(date_string):
    """Convert DD/MM/YYYY to YYYY-MM-DD for database storage"""
    if not date_string:
        return None
    try:
        # If already in YYYY-MM-DD format, return as is
        if '-' in date_string and len(date_string.split('-')[0]) == 4:
            return date_string
        # Convert DD/MM/YYYY to YYYY-MM-DD
        if '/' in date_string:
            parts = date_string.split('/')
            if len(parts) == 3:
                return f"{parts[2]}-{parts[1]}-{parts[0]}"
        return date_string
    except:
        return date_string

def _is_factory_insurance(product_name):
    """Check if a product is a factory-type insurance that requires factory details"""
    if not product_name:
        return False
    
    product_upper = product_name.upper()
    return (
        "FACTORY" in product_upper or
        "BHARAT GRIHA RAKSHA" in product_upper or
        "BHARAT SOOKSHMA UDYAM SURAKSHA" in product_upper or
        "BHARAT LAGHU UDYAM SURAKSHA" in product_upper
    )

policies_bp = Blueprint("policies", __name__)

# Initialize Supabase
supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)

# Google Drive setup
SCOPES = ["https://www.googleapis.com/auth/drive"]
SERVICE_ACCOUNT_FILE = "my-first-project-7fb14-715c168d62d2.json"


def get_drive_service():
    """Initialize and return Google Drive service with comprehensive SSL error handling"""
    try:
        import ssl
        import httplib2
        from google.auth.transport.requests import Request
        
        creds = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES
        )
        
        # Try multiple connection methods
        connection_methods = [
            ("Standard SSL", lambda: build("drive", "v3", credentials=creds)),
            ("Disabled SSL Cert Validation", lambda: build("drive", "v3", credentials=creds, 
                http=httplib2.Http(disable_ssl_certificate_validation=True))),
            ("Custom SSL Context", lambda: build_with_custom_ssl(creds))
        ]
        
        for method_name, method_func in connection_methods:
            try:
                print(f"Attempting Google Drive connection using: {method_name}")
                service = method_func()
                print(f"✅ Google Drive connected successfully using: {method_name}")
                return service
            except Exception as method_error:
                print(f"❌ {method_name} failed: {method_error}")
                continue
        
        print("❌ All Google Drive connection methods failed")
        return None
            
    except Exception as e:
        print(f"Error initializing Google Drive service: {e}")
        return None

def build_with_custom_ssl(creds):
    """Build Google Drive service with custom SSL context"""
    import ssl
    import httplib2
    
    # Create custom SSL context with relaxed settings
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    
    # Create HTTP with custom SSL context
    http = httplib2.Http()
    
    return build("drive", "v3", credentials=creds, http=http)


# Initialize drive service
drive_service = get_drive_service()

# Root folder in Google Drive where month folders exist
# Now loaded from settings/config instead of hardcoded
ROOT_FOLDER_ID = Config.ROOT_FOLDER_ID or "0AOc3bRLhlrgzUk9PVA"  # Fallback to old value if not set


def test_drive_connection():
    """Test function to verify Drive API connection and folder access"""
    print("\n" + "=" * 50)
    print("GOOGLE DRIVE CONNECTION TEST")
    print("=" * 50)

    try:
        print("\nGoogle Drive API connection successful")

        print(f"\n--- Testing access to folder ID: {ROOT_FOLDER_ID} ---")
        try:
            folder = drive_service.files().get(
                fileId=ROOT_FOLDER_ID,
                fields="id, name, mimeType, capabilities",
                supportsAllDrives=True
            ).execute()
            print(f"Folder found: '{folder['name']}'")
            print(f"   Type: {folder['mimeType']}")

            capabilities = folder.get('capabilities', {})
            can_edit = capabilities.get('canEdit', False)
            can_add_children = capabilities.get('canAddChildren', False)
            print(f"   Can Edit: {can_edit}")
            print(f"   Can Add Children: {can_add_children}")

            if not can_add_children:
                print("\nWARNING: Service account doesn't have permission to add files!")
                print("   Change permissions from 'Viewer' to 'Editor'")

            print(f"\n--- Contents of '{folder['name']}' ---")
            query = f"'{ROOT_FOLDER_ID}' in parents and mimeType='application/vnd.google-apps.folder' and trashed=false"
            results = drive_service.files().list(
                q=query,
                fields="files(id, name)",
                supportsAllDrives=True,
                includeItemsFromAllDrives=True
            ).execute()

            items = results.get('files', [])
            print(f"Found {len(items)} month folders:")
            for item in items:
                print(f"  {item['name']} (ID: {item['id']})")

            if len(items) == 0:
                print("\nWARNING: No folders found!")

        except Exception as e:
            print(f"Cannot access folder: {e}")

    except Exception as e:
        print(f"Drive API connection failed: {e}")

    print("\n" + "=" * 50 + "\n")


def get_month_folder_id(root_folder_id, month_name):
    """Search for a subfolder by name inside the root folder"""
    print(f"\n=== Searching for folder: '{month_name}' ===")
    print(f"Root folder ID: {root_folder_id}")

    all_folders_query = (
        f"mimeType='application/vnd.google-apps.folder' and "
        f"'{root_folder_id}' in parents and trashed=false"
    )
    all_folders_result = drive_service.files().list(
        q=all_folders_query,
        spaces='drive',
        fields='files(id, name)'
    ).execute()

    all_folders = all_folders_result.get('files', [])
    print(f"\nAll folders found in root folder ({len(all_folders)} total):")
    for folder in all_folders:
        print(f"  - '{folder['name']}' (ID: {folder['id']})")

    query = (
        f"mimeType='application/vnd.google-apps.folder' and "
        f"name='{month_name}' and '{root_folder_id}' in parents and trashed=false"
    )
    results = drive_service.files().list(
        q=query,
        spaces='drive',
        fields='files(id, name, webViewLink)'
    ).execute()

    files = results.get('files', [])
    if not files:
        print(f"\nERROR: Folder '{month_name}' not found!")
        print(f"Available folder names: {[f['name'] for f in all_folders]}")
        raise ValueError(
            f"Folder '{month_name}' not found in root folder. Available folders: {[f['name'] for f in all_folders]}")

    print(f"Found folder: '{files[0]['name']}' (ID: {files[0]['id']})\n")
    return files[0]


def find_month_folder(root_folder_id, month_name):
    query = f"'{root_folder_id}' in parents and mimeType='application/vnd.google-apps.folder' and name='{month_name}'"
    results = drive_service.files().list(
        q=query,
        fields="files(id, name)",
        supportsAllDrives=True,
        includeItemsFromAllDrives=True
    ).execute()
    folders = results.get("files", [])

    if folders:
        print(f"Found {month_name} folder with ID: {folders[0]['id']}")
        return folders[0]
    else:
        raise Exception(f"{month_name} folder not found")


def find_or_create_folder(parent_folder_id, folder_name):
    """Find existing folder or create new one in parent folder"""
    print(f"Looking for folder '{folder_name}' in parent {parent_folder_id}")

    # Search for existing folder
    query = f"'{parent_folder_id}' in parents and mimeType='application/vnd.google-apps.folder' and name='{folder_name}' and trashed=false"
    results = drive_service.files().list(
        q=query,
        fields="files(id, name)",
        supportsAllDrives=True,
        includeItemsFromAllDrives=True
    ).execute()

    folders = results.get("files", [])

    if folders:
        print(f"Found existing folder: {folders[0]['name']} (ID: {folders[0]['id']})")
        return folders[0]
    else:
        # Create new folder
        print(f"Creating new folder: {folder_name}")
        folder_metadata = {
            "name": folder_name,
            "mimeType": "application/vnd.google-apps.folder",
            "parents": [parent_folder_id]
        }

        created_folder = drive_service.files().create(
            body=folder_metadata,
            fields="id, name",
            supportsAllDrives=True
        ).execute()

        print(f"Created folder: {created_folder['name']} (ID: {created_folder['id']})")
        return created_folder


def upload_policy_file(file, client_id, member_name):
    """Upload file to Google Drive in client/member folder structure"""
    print(f"\nUploading file: {file.filename}")
    print(f"   Client ID: {client_id}")
    print(f"   Member Name: {member_name}")

    # Step 1: Find or create client folder
    client_folder = find_or_create_folder(ROOT_FOLDER_ID, client_id)
    client_folder_id = client_folder['id']

    # Step 2: Find or create member subfolder
    member_folder = find_or_create_folder(client_folder_id, member_name)
    member_folder_id = member_folder['id']

    # Step 3: Generate filename with format: Client ID - Member Name - File.PDF
    file_extension = file.filename.split('.')[-1] if '.' in file.filename else 'pdf'
    new_filename = f"{client_id} - {member_name} - {file.filename}"

    # Step 4: Upload file to member folder
    file_metadata = {"name": new_filename, "parents": [member_folder_id]}
    file_content = file.read()

    media = MediaIoBaseUpload(io.BytesIO(file_content), mimetype=file.mimetype, resumable=True)
    uploaded_file = drive_service.files().create(
        body=file_metadata,
        media_body=media,
        fields="id, name, webViewLink",
        supportsAllDrives=True
    ).execute()

    drive_path = f"{client_id}/{member_name}/{new_filename}"

    print(f"File uploaded successfully!")
    print(f"   Drive Path: {drive_path}")
    print(f"   Drive URL: {uploaded_file.get('webViewLink')}")

    return {
        "id": uploaded_file.get("id"),
        "webViewLink": uploaded_file.get("webViewLink"),
        "drive_path": drive_path
    }


def archive_policy_file(file_id, client_id, member_name, filename):
    """Move file to archive with year-based folder structure"""
    import datetime

    current_year = datetime.datetime.now().year
    # Financial year format: 2024-25, 2025-26, etc.
    if datetime.datetime.now().month >= 4:  # April onwards is new financial year
        financial_year = f"{current_year}-{str(current_year + 1)[-2:]}"
    else:
        financial_year = f"{current_year - 1}-{str(current_year)[-2:]}"

    print(f"\nArchiving file: {filename}")
    print(f"   Financial Year: {financial_year}")
    print(f"   Client ID: {client_id}")
    print(f"   Member Name: {member_name}")

    # Assume ARCHIVE_FOLDER_ID is defined (you'll need to set this)
    # For now, we'll create archive folder in root if it doesn't exist
    archive_folder = find_or_create_folder(ROOT_FOLDER_ID, "Archive")
    archive_folder_id = archive_folder['id']

    # Step 1: Find or create financial year folder
    year_folder = find_or_create_folder(archive_folder_id, financial_year)
    year_folder_id = year_folder['id']

    # Step 2: Find or create client folder in year folder
    client_folder = find_or_create_folder(year_folder_id, client_id)
    client_folder_id = client_folder['id']

    # Step 3: Find or create member folder in client folder
    member_folder = find_or_create_folder(client_folder_id, member_name)
    member_folder_id = member_folder['id']

    # Step 4: Move file to archive location
    try:
        # Update file's parent to move it to archive
        drive_service.files().update(
            fileId=file_id,
            addParents=member_folder_id,
            removeParents=ROOT_FOLDER_ID,  # Remove from current location
            supportsAllDrives=True
        ).execute()

        archive_path = f"Archive/{financial_year}/{client_id}/{member_name}/{filename}"
        print(f"File archived successfully to: {archive_path}")
        return archive_path

    except Exception as e:
        print(f"Error archiving file: {e}")
        return None


@policies_bp.route("/test_drive")
@login_required
def test_drive():
    """Test endpoint to check Google Drive connection"""
    test_drive_connection()
    return "<pre>Check your console/terminal for detailed output</pre>"


@policies_bp.route("/list_all_folders")
@login_required
def list_all_folders():
    """List all folders accessible by the service account"""
    print("\n" + "=" * 50)
    print("LISTING ALL ACCESSIBLE FOLDERS")
    print("=" * 50 + "\n")

    try:
        results = drive_service.files().list(
            q="mimeType='application/vnd.google-apps.folder' and trashed=false",
            spaces='drive',
            fields='files(id, name, parents, webViewLink)',
            pageSize=100
        ).execute()

        folders = results.get('files', [])
        print(f"Found {len(folders)} folders:\n")

        for folder in folders:
            print(f"{folder['name']}")
            print(f"   ID: {folder['id']}")
            print(f"   Link: {folder.get('webViewLink', 'N/A')}")
            print()

        if len(folders) == 0:
            print("WARNING: No folders found!")

    except Exception as e:
        print(f"Error: {e}")

    print("=" * 50 + "\n")
    return "<pre>Check your console/terminal for the list of folders</pre>"


@policies_bp.route("/get_clients")
@login_required
def get_clients():
    """API endpoint to get all existing clients"""
    try:
        result = supabase.table("clients").select("client_id, name, email, phone").execute()
        return jsonify(result.data)
    except Exception as e:
        print(f"Error fetching clients: {e}")
        return jsonify({"error": str(e)}), 500


@policies_bp.route("/get_members")
@login_required
def get_members():
    """Get members for a client"""
    try:
        client_id = request.args.get("client_id")  # Remove int() conversion since client_id is now a string
        result = supabase.table("members").select("member_id, member_name").eq("client_id", client_id).order("member_id").execute()
        return jsonify(result.data)
    except Exception as e:
        print(f"Error fetching members: {e}")
        return jsonify({"error": str(e)}), 500


@policies_bp.route("/create_member", methods=["POST"])
@login_required
def create_member():
    """Create a new member for a client"""
    try:
        client_id = request.json.get("client_id")  # Remove int() conversion since client_id is now a string
        member_name = request.json.get("member_name")
        if not member_name:
            return jsonify({"error": "member_name required"}), 400
        result = supabase.table("members").insert({
            "client_id": client_id,
            "member_name": member_name
        }).execute()
        return jsonify(result.data[0])
    except Exception as e:
        print(f"Error creating member: {e}")
        return jsonify({"error": str(e)}), 500


@policies_bp.route("/test_backend")
@login_required
def test_backend():
    """Test endpoint to verify backend is working"""
    return jsonify({
        "status": "success",
        "message": "Backend is working properly",
        "timestamp": datetime.datetime.now().isoformat()
    })

@policies_bp.route("/test_drive_connection")
@login_required
def test_drive_connection_endpoint():
    """Test Google Drive connectivity"""
    try:
        global drive_service
        if not drive_service:
            drive_service = get_drive_service()
        
        if drive_service:
            # Try a simple API call
            results = drive_service.files().list(pageSize=1).execute()
            return jsonify({
                "status": "success",
                "message": "Google Drive connection successful",
                "files_accessible": len(results.get('files', []))
            })
        else:
            return jsonify({
                "status": "error",
                "message": "Could not establish Google Drive connection"
            }), 500
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": f"Google Drive test failed: {str(e)}"
        }), 500

@policies_bp.route("/add_policy", methods=["GET", "POST"])
@login_required
def add_policy():
    if request.method == "POST":
        print("\n" + "="*50)
        print("ADD POLICY FORM SUBMITTED")
        print("="*50)
        print(f"Form data received: {dict(request.form)}")
        print(f"Files received: {list(request.files.keys())}")
        
        # Basic validation to catch issues early
        required_fields = ['customer_type', 'insurance_company', 'policy_number']
        missing_fields = []
        for field in required_fields:
            if not request.form.get(field):
                missing_fields.append(field)
        
        if missing_fields:
            print(f"❌ Missing required fields: {missing_fields}")
            flash(f"Missing required fields: {', '.join(missing_fields)}", "error")
            return redirect(url_for("policies.add_policy"))
        
        if 'policy_file' not in request.files:
            print("❌ No policy file uploaded")
            flash("Please upload a policy file", "error")
            return redirect(url_for("policies.add_policy"))
        
        print("✅ Basic validation passed, processing...")
        try:
            customer_type = request.form.get("customer_type")
            insurance_company = request.form.get("insurance_company")
            product_name = request.form.get("product_name")
            policy_number = request.form.get("policy_number")
            payment_date = request.form.get("payment_date")
            agent_name = request.form.get("agent_name")
            policy_from = request.form.get("policy_from")
            policy_to = request.form.get("policy_to")
            one_time_insurance = True if request.form.get("one_time_insurance") in ["on", "true", "1"] else False
            payment_details = request.form.get("payment_details")
            net_premium = request.form.get("net_premium")
            addon_premium = request.form.get("addon_premium")  # NEW
            tp_tr_premium = request.form.get("tp_tr_premium")
            gst_percentage = request.form.get("gst_percentage")  # NEW
            gross_premium = request.form.get("gross_premium")  # This will be auto-calculated
            commission_percentage = request.form.get("commission_percentage")
            commission_amount = request.form.get("commission_amount")  # NEW
            commission_received = True if request.form.get("commission_received") in ["on", "true", "1"] else False
            business_type = request.form.get("business_type")
            group_name = request.form.get("group_name")
            subgroup_name = request.form.get("subgroup_name")
            remarks = request.form.get("remarks")
            file = request.files.get("policy_file")
            send_via_whatsapp = request.form.get("send_via_whatsapp") == "yes"  # NEW
            sum_insured = request.form.get("sum_insured")
            
            # Health insurance specific fields
            health_plan_type = request.form.get("health_plan_type")
            health_member_names = request.form.getlist("health_member_name[]")
            health_member_sum_insureds = request.form.getlist("health_member_sum_insured[]")
            health_member_bonuses = request.form.getlist("health_member_bonus[]")
            health_member_deductibles = request.form.getlist("health_member_deductible[]")
            
            # Floater-specific fields (single sum_insured, bonus, and deductible for entire policy)
            floater_sum_insured = request.form.get("floater_sum_insured")
            floater_bonus = request.form.get("floater_bonus")
            floater_deductible = request.form.get("floater_deductible")
            
            # Factory insurance specific fields
            factory_building = request.form.get("factory_building")
            factory_plant_machinery = request.form.get("factory_plant_machinery")
            factory_furniture_fittings = request.form.get("factory_furniture_fittings")
            factory_stocks = request.form.get("factory_stocks")
            factory_electrical_installations = request.form.get("factory_electrical_installations")

            if not file:
                flash("Please upload a file", "error")
                return redirect(url_for("policies.add_policy"))

            if not policy_number:
                flash("Policy number is required", "error")
                return redirect(url_for("policies.add_policy"))

            # Handle client/member creation or selection
            client_id = None
            member_id = None
            customer_phone = None  # used for WhatsApp

            if customer_type == "new":
                customer_name = request.form.get("customer_name")
                customer_email = request.form.get("customer_email")
                customer_phone = request.form.get("customer_phone")  # NEW
                client_prefix = request.form.get("client_prefix")  # NEW
                member_name = request.form.get("member_name") or customer_name

                if not customer_name:
                    flash("Customer name is required", "error")
                    return redirect(url_for("policies.add_policy"))

                if not client_prefix:
                    flash("Client prefix is required", "error")
                    return redirect(url_for("policies.add_policy"))

                # Create client (auto identity with prefix)
                client_result = supabase.table("clients").insert({
                    "prefix": client_prefix.upper(),
                    "name": customer_name,
                    "email": customer_email,
                    "phone": customer_phone
                }).execute()

                client_id = client_result.data[0]["client_id"]
                print(f"Created new client with id: {client_id}")

                # Create member for the client
                member_result = supabase.table("members").insert({
                    "client_id": client_id,
                    "member_name": member_name
                }).execute()
                member_id = member_result.data[0]["member_id"]
                print(f"Created new member with id: {member_id}")

            elif customer_type == "existing":
                client_id = request.form.get("existing_client_id")
                member_id = request.form.get("existing_member_id")
                new_member_name = request.form.get("new_member_name")

                if not client_id:
                    flash("Please select a client", "error")
                    return redirect(url_for("policies.add_policy"))

                # client_id is now a string (e.g., "DS01"), no need to convert to int

                # Ensure member exists; if not provided, create from new_member_name or default to client name
                if not member_id:
                    try:
                        client_row = supabase.table("clients").select("name, phone").eq("client_id", client_id).single().execute()
                        chosen_member_name = new_member_name if new_member_name else (client_row.data.get("name") if client_row and client_row.data else "Member")
                        customer_phone = client_row.data.get("phone") if client_row and client_row.data else None
                        member_result = supabase.table("members").insert({
                            "client_id": client_id,
                            "member_name": chosen_member_name
                        }).execute()
                        member_id = member_result.data[0]["member_id"]
                    except Exception as e:
                        print(f"Error creating default member: {e}")
                        flash("Could not create default member", "error")
                        return redirect(url_for("policies.add_policy"))
                else:
                    member_id = int(member_id)

                    # Fetch client phone for WhatsApp  # NEW
                    try:
                        client_result = supabase.table("clients").select("phone").eq("client_id",
                                                                                     client_id).single().execute()
                        customer_phone = client_result.data.get("phone")
                    except Exception as e:
                        print(f"Error fetching client phone: {e}")
                        customer_phone = None

                print(f"Using existing client {client_id} and member {member_id}")
            else:
                flash("Invalid customer type", "error")
                return redirect(url_for("policies.add_policy"))

            # Get client and member information for file upload
            try:
                # Get client info
                client_result = supabase.table("clients").select("client_id, name").eq("client_id", client_id).single().execute()
                client_data = client_result.data

                # Get member info
                member_result = supabase.table("members").select("member_name").eq("member_id", member_id).single().execute()
                member_data = member_result.data

                client_id_str = client_data['client_id']
                member_name_str = member_data['member_name']

            except Exception as e:
                print(f"Error getting client/member info: {e}")
                flash(f"Error retrieving client information: {str(e)}", "error")
                return redirect(url_for("policies.add_policy"))

            # Upload file to Google Drive with fallback
            print("Uploading file to Google Drive...")
            drive_file = None
            try:
                drive_file = upload_policy_file(file, client_id_str, member_name_str)
                print(f"File uploaded successfully: {drive_file}")
            except Exception as e:
                print(f"Drive upload error: {e}")
                
                # Fallback: Save file locally and continue with policy creation
                print("Attempting local file storage as fallback...")
                try:
                    import os
                    from werkzeug.utils import secure_filename
                    
                    # Create local storage directory
                    upload_folder = os.path.join(os.getcwd(), 'local_uploads', client_id_str, member_name_str)
                    os.makedirs(upload_folder, exist_ok=True)
                    
                    # Save file locally
                    filename = secure_filename(file.filename)
                    local_path = os.path.join(upload_folder, filename)
                    file.seek(0)  # Reset file pointer
                    file.save(local_path)
                    
                    # Create fallback drive_file object
                    drive_file = {
                        "id": f"local_{client_id_str}_{member_name_str}_{filename}",
                        "webViewLink": f"file://{local_path}",
                        "drive_path": f"local/{client_id_str}/{member_name_str}/{filename}"
                    }
                    
                    print(f"File saved locally: {local_path}")
                    flash("File uploaded locally (Google Drive unavailable). Policy created successfully.", "warning")
                    
                except Exception as local_error:
                    print(f"Local storage also failed: {local_error}")
                    flash(f"Error uploading file: {str(e)}. Please try again or contact support.", "error")
                    return redirect(url_for("policies.add_policy"))

            # Insert policy metadata into Supabase
            print("Inserting policy into Supabase...")
            try:
                policy_data = {
                    "client_id": client_id,
                    "member_id": member_id,
                    "insurance_company": insurance_company,
                    "product_name": product_name,
                    "policy_number": policy_number,
                    "one_time_insurance": one_time_insurance,
                    "commission_received": commission_received,
                    "file_path": file.filename,
                    "drive_file_id": drive_file.get("id"),
                    "drive_path": drive_file.get("drive_path"),
                    "drive_url": drive_file.get("webViewLink")
                }

                # Add optional fields
                if payment_date:
                    policy_data["payment_date"] = convert_date_format(payment_date)
                if agent_name:
                    policy_data["agent_name"] = agent_name
                if policy_from:
                    policy_data["policy_from"] = convert_date_format(policy_from)
                if policy_to:
                    policy_data["policy_to"] = convert_date_format(policy_to)
                if payment_details:
                    policy_data["payment_details"] = payment_details
                if net_premium:
                    policy_data["net_premium"] = float(net_premium)
                if addon_premium:
                    policy_data["addon_premium"] = float(addon_premium)
                if tp_tr_premium:
                    policy_data["tp_tr_premium"] = float(tp_tr_premium)
                if gst_percentage:
                    policy_data["gst_percentage"] = float(gst_percentage)
                if gross_premium:
                    policy_data["gross_premium"] = float(gross_premium)
                if commission_percentage:
                    policy_data["commission_percentage"] = float(commission_percentage)
                if commission_amount:
                    policy_data["commission_amount"] = float(commission_amount)
                if business_type:
                    policy_data["business_type"] = business_type
                if group_name:
                    policy_data["group_name"] = group_name
                if subgroup_name:
                    policy_data["subgroup_name"] = subgroup_name
                if remarks:
                    policy_data["remarks"] = remarks
                if sum_insured:
                    policy_data["sum_insured"] = float(sum_insured)

                result = supabase.table("policies").insert(policy_data).execute()
                inserted_policy = result.data[0]
                policy_id = inserted_policy["policy_id"]
                print(f"Policy inserted successfully: {result.data}")
                
                # Handle health insurance details if applicable
                if product_name and "HEALTH" in product_name.upper() and health_plan_type:
                    try:
                        # Insert health insurance details
                        health_details = {
                            "policy_id": policy_id,
                            "plan_type": health_plan_type
                        }
                        
                        # Add floater-specific fields if it's a floater plan
                        if health_plan_type in ["FLOATER", "TOPUP_FLOATER"]:
                            if floater_sum_insured:
                                health_details["floater_sum_insured"] = float(floater_sum_insured)
                            if floater_bonus:
                                health_details["floater_bonus"] = float(floater_bonus)
                            if health_plan_type == "TOPUP_FLOATER" and floater_deductible:
                                health_details["floater_deductible"] = float(floater_deductible)
                        
                        health_result = supabase.table("health_insurance_details").insert(health_details).execute()
                        health_id = health_result.data[0]["health_id"]
                        
                        # Insert health insured members
                        if health_member_names:
                            for i, member_name in enumerate(health_member_names):
                                if member_name.strip():  # Only insert non-empty names
                                    member_data = {
                                        "health_id": health_id,
                                        "member_name": member_name.strip()
                                    }
                                    
                                    # For INDIVIDUAL plans, store sum_insured, bonus, and deductible per member
                                    # For FLOATER plans, only store member names (sum_insured, bonus, and deductible are in health_details)
                                    if health_plan_type in ["INDIVIDUAL", "TOPUP_INDIVIDUAL"]:
                                        if i < len(health_member_sum_insureds) and health_member_sum_insureds[i]:
                                            member_data["sum_insured"] = float(health_member_sum_insureds[i])
                                        if i < len(health_member_bonuses) and health_member_bonuses[i]:
                                            member_data["bonus"] = float(health_member_bonuses[i])
                                        if health_plan_type == "TOPUP_INDIVIDUAL" and i < len(health_member_deductibles) and health_member_deductibles[i]:
                                            member_data["deductible"] = float(health_member_deductibles[i])
                                    
                                    supabase.table("health_insured_members").insert(member_data).execute()
                        
                        print(f"Health insurance details saved for policy {policy_id} with plan type {health_plan_type}")
                    except Exception as e:
                        print(f"Error saving health insurance details: {e}")
                        # Don't fail the whole operation, just log the error
                
                # Handle factory insurance details if applicable
                elif product_name and _is_factory_insurance(product_name):
                    try:
                        factory_details = {"policy_id": policy_id}
                        
                        if factory_building:
                            factory_details["building"] = float(factory_building)
                        if factory_plant_machinery:
                            factory_details["plant_machinery"] = float(factory_plant_machinery)
                        if factory_furniture_fittings:
                            factory_details["furniture_fittings"] = float(factory_furniture_fittings)
                        if factory_stocks:
                            factory_details["stocks"] = float(factory_stocks)
                        if factory_electrical_installations:
                            factory_details["electrical_installations"] = float(factory_electrical_installations)
                        
                        # Only insert if we have at least one factory detail
                        if len(factory_details) > 1:  # More than just policy_id
                            supabase.table("factory_insurance_details").insert(factory_details).execute()
                            print(f"Factory insurance details saved for policy {policy_id}")
                    except Exception as e:
                        print(f"Error saving factory insurance details: {e}")
                        # Don't fail the whole operation, just log the error

                # NEW: Handle WhatsApp sending
                if send_via_whatsapp and customer_phone:
                    try:
                        phone = normalize_phone(customer_phone)
                        success, message = send_policy_to_customer(phone, inserted_policy)
                        if success:
                            flash("Policy added and sent via WhatsApp successfully!", "success")
                        else:
                            flash(f"Policy added but WhatsApp send failed: {message}", "warning")
                    except Exception as whatsapp_error:
                        print(f"WhatsApp error: {whatsapp_error}")
                        flash("Policy added but could not send via WhatsApp", "warning")
                elif send_via_whatsapp and not customer_phone:
                    flash("Policy added but customer has no phone number for WhatsApp", "warning")
                else:
                    flash("Policy added successfully!", "success")

                return redirect(url_for("dashboard.index"))

            except Exception as e:
                print(f"Database error: {e}")
                flash(f"Error saving policy to database: {str(e)}", "error")
                return redirect(url_for("policies.add_policy"))

        except Exception as e:
            print(f"General error: {e}")
            flash(f"An error occurred: {str(e)}", "error")
            return redirect(url_for("policies.add_policy"))

    return render_template("add_policy.html", current_user=current_user)


================================================
FILE: routes/renewal_routes.py
================================================
from flask import Blueprint, request, jsonify, render_template, redirect, url_for, flash, send_file
from flask_login import login_required
from supabase import create_client
from dynamic_config import Config
from database_pool import execute_query
from email_service import send_renewal_reminder_email, indian_date_filter
from renewal_service import (
    renew_policy,
    get_policy_renewal_history,
    get_policy_historical_data,
    get_policy_with_history,
    update_policy_payment,
    send_payment_confirmation_email,
    send_payment_confirmation_whatsapp
)
import logging
import os
from datetime import datetime, timedelta
import pandas as pd
from io import BytesIO


def convert_date_format(date_string):
    """Convert DD/MM/YYYY to YYYY-MM-DD for database storage"""
    if not date_string or date_string.strip() == '':
        return None
    
    date_string = date_string.strip()
    
    try:
        from datetime import datetime
        
        # If already in YYYY-MM-DD format, validate and return
        if '-' in date_string and len(date_string.split('-')[0]) == 4:
            # Validate the date
            datetime.strptime(date_string, '%Y-%m-%d')
            return date_string
            
        # Convert DD/MM/YYYY to YYYY-MM-DD
        if '/' in date_string:
            parts = date_string.split('/')
            if len(parts) == 3:
                day, month, year = parts[0].zfill(2), parts[1].zfill(2), parts[2]
                
                # Validate the date before converting
                datetime.strptime(f"{day}/{month}/{year}", '%d/%m/%Y')
                
                return f"{year}-{month}-{day}"
                
        # Try to parse other common formats
        for fmt in ['%d-%m-%Y', '%Y/%m/%d', '%m/%d/%Y']:
            try:
                parsed_date = datetime.strptime(date_string, fmt)
                return parsed_date.strftime('%Y-%m-%d')
            except ValueError:
                continue
                
        # If no format matches, return None to avoid database errors
        logger.warning(f"Could not parse date format: {date_string}")
        return None
        
    except Exception as e:
        logger.error(f"Error converting date {date_string}: {e}")
        return None

# Set up logging
logger = logging.getLogger(__name__)

renewal_bp = Blueprint("renewal", __name__)
supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)


@renewal_bp.route('/api/renew_policy', methods=['POST'])
@login_required
def renew_policy_api():
    """API endpoint to renew a policy with new PDF"""
    try:
        # Input validation
        policy_id = request.form.get('policy_id')
        renewed_file = request.files.get('renewed_file')
        new_expiry_date = request.form.get('new_expiry_date')
        new_policy_number = request.form.get('new_policy_number')

        if not policy_id:
            logger.error("Renewal attempt without policy ID")
            return jsonify({'success': False, 'message': 'Policy ID is required'}), 400

        if not policy_id.isdigit():
            logger.error(f"Invalid policy ID format: {policy_id}")
            return jsonify({'success': False, 'message': 'Invalid policy ID format'}), 400

        if not renewed_file:
            logger.error(f"Renewal attempt for policy {policy_id} without file")
            return jsonify({'success': False, 'message': 'Renewed policy file is required'}), 400

        # Validate file type and size
        if not renewed_file.filename:
            return jsonify({'success': False, 'message': 'Invalid file - no filename'}), 400
            
        if not renewed_file.filename.lower().endswith('.pdf'):
            logger.error(f"Invalid file type for policy {policy_id}: {renewed_file.filename}")
            return jsonify({'success': False, 'message': 'Only PDF files are allowed'}), 400

        # Check file size (max 50MB)
        renewed_file.seek(0, 2)  # Seek to end
        file_size = renewed_file.tell()
        renewed_file.seek(0)  # Reset to beginning
        
        if file_size > 50 * 1024 * 1024:  # 50MB
            logger.error(f"File too large for policy {policy_id}: {file_size} bytes")
            return jsonify({'success': False, 'message': 'File size must be less than 50MB'}), 400

        if file_size == 0:
            logger.error(f"Empty file for policy {policy_id}")
            return jsonify({'success': False, 'message': 'File cannot be empty'}), 400

        # Get policy details with comprehensive error handling
        try:
            policy_result = (
                supabase.table("policies")
                .select("*, clients!policies_client_id_fkey(client_id, name, email, phone), members!policies_member_id_fkey(member_name)")
                .eq("policy_id", policy_id)
                .single()
                .execute()
            )
        except Exception as db_error:
            logger.error(f"Database error fetching policy {policy_id}: {db_error}")
            return jsonify({'success': False, 'message': 'Database error - please try again'}), 500

        if not policy_result.data:
            logger.error(f"Policy not found: {policy_id}")
            return jsonify({'success': False, 'message': 'Policy not found'}), 404

        policy = policy_result.data
        client = policy.get('clients', {})
        member = policy.get('members', {})
        
        if not client:
            logger.error(f"No client data found for policy {policy_id}")
            return jsonify({'success': False, 'message': 'Client information not found'}), 404
            
        if not member:
            logger.error(f"No member data found for policy {policy_id}")
            return jsonify({'success': False, 'message': 'Member information not found'}), 404

        # Convert date format if provided
        converted_expiry_date = None
        if new_expiry_date:
            converted_expiry_date = convert_date_format(new_expiry_date)
            if converted_expiry_date is None:
                logger.error(f"Invalid expiry date format for policy {policy_id}: {new_expiry_date}")
                return jsonify({'success': False, 'message': f'Invalid expiry date format: {new_expiry_date}. Please use DD/MM/YYYY format.'}), 400

        # Renew the policy (pass current user email for audit trail)
        from flask_login import current_user
        archived_by = current_user.email if current_user and current_user.is_authenticated else None
        
        success, message, updated_policy = renew_policy(
            policy_id=int(policy_id),
            renewed_file=renewed_file,
            new_expiry_date=converted_expiry_date,
            new_policy_number=new_policy_number if new_policy_number else None,
            archived_by=archived_by
        )

        if success:
            logger.info(f"Policy {policy_id} renewed successfully")
            
            # Send confirmation with the actual renewed policy document
            notification_results = []
            
            if client.get('email') or client.get('phone'):
                # Send via WhatsApp if phone available
                if client.get('phone'):
                    try:
                        from whatsapp_bot import send_policy_to_customer
                        whatsapp_success, whatsapp_msg = send_policy_to_customer(
                            client['phone'], 
                            updated_policy
                        )
                        if whatsapp_success:
                            notification_results.append("WhatsApp: ✅ Policy sent")
                            logger.info(f"WhatsApp notification sent for policy {policy_id}")
                        else:
                            notification_results.append(f"WhatsApp: ❌ {whatsapp_msg}")
                            logger.warning(f"WhatsApp failed for policy {policy_id}: {whatsapp_msg}")
                    except Exception as whatsapp_error:
                        error_msg = f"WhatsApp: ❌ Service error"
                        notification_results.append(error_msg)
                        logger.error(f"WhatsApp error for policy {policy_id}: {whatsapp_error}")
                
                # Send via Email if email available
                if client.get('email'):
                    try:
                        from renewal_service import send_renewal_confirmation_email
                        email_success, email_message = send_renewal_confirmation_email(
                            client['email'],
                            client['name'],
                            updated_policy,
                            {'name': renewed_file.filename}
                        )
                        if email_success:
                            notification_results.append("Email: ✅ Policy sent")
                            logger.info(f"Email notification sent for policy {policy_id}")
                        else:
                            notification_results.append(f"Email: ❌ {email_message}")
                            logger.warning(f"Email failed for policy {policy_id}: {email_message}")
                    except Exception as email_error:
                        error_msg = f"Email: ❌ Service error"
                        notification_results.append(error_msg)
                        logger.error(f"Email error for policy {policy_id}: {email_error}")
            
            # Combine results
            if notification_results:
                message += " | " + " | ".join(notification_results)
            else:
                message += " | No contact information available for notifications"

            return jsonify({
                'success': True,
                'message': message,
                'policy': updated_policy
            })
        else:
            return jsonify({'success': False, 'message': message}), 500

    except Exception as e:
        logger.error(f"Error in renew_policy_api: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


@renewal_bp.route('/api/get_renewal_history/<int:policy_id>')
@login_required
def get_renewal_history_api(policy_id):
    """API endpoint to get renewal history for a policy"""
    try:
        history = get_policy_renewal_history(policy_id)

        if history:
            return jsonify({'success': True, 'history': history})
        else:
            return jsonify({'success': False, 'message': 'Could not retrieve renewal history'}), 404

    except Exception as e:
        logger.error(f"Error getting renewal history: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


@renewal_bp.route('/api/get_policy_history/<int:policy_id>')
@login_required
def get_policy_history_api(policy_id):
    """API endpoint to get complete historical data for a policy"""
    try:
        historical_data = get_policy_historical_data(policy_id)
        
        return jsonify({
            'success': True, 
            'history': historical_data,
            'total_records': len(historical_data)
        })

    except Exception as e:
        logger.error(f"Error getting policy history: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


@renewal_bp.route('/api/get_policy_with_history/<int:policy_id>')
@login_required
def get_policy_with_history_api(policy_id):
    """API endpoint to get current policy data along with complete history"""
    try:
        policy_data = get_policy_with_history(policy_id)
        
        if policy_data:
            return jsonify({'success': True, 'data': policy_data})
        else:
            return jsonify({'success': False, 'message': 'Policy not found'}), 404

    except Exception as e:
        logger.error(f"Error getting policy with history: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


@renewal_bp.route('/policy_history/<int:policy_id>')
@login_required
def policy_history_page(policy_id):
    """Page for viewing policy history"""
    try:
        # Get policy with complete history
        policy_data = get_policy_with_history(policy_id)
        
        if not policy_data:
            flash("Policy not found", "error")
            return redirect(url_for("existing_policies.list_all"))
        
        return render_template("policy_history.html", 
                               policy_data=policy_data,
                               policy_id=policy_id)
    
    except Exception as e:
        logger.error(f"Error loading policy history page: {e}")
        flash("Error loading policy history", "error")
        return redirect(url_for("existing_policies.list_all"))


@renewal_bp.route('/renewal_page/<int:policy_id>')
@login_required
def renewal_page(policy_id):
    """Page for renewing a specific policy with full details editing"""
    try:
        # Get policy details
        policy_result = (
            supabase.table("policies")
            .select("*, clients!policies_client_id_fkey(client_id, name, email, phone), members!policies_member_id_fkey(member_name)")
            .eq("policy_id", policy_id)
            .single()
            .execute()
        )

        if not policy_result.data:
            flash("Policy not found", "error")
            return redirect(url_for("existing_policies.list_all"))

        policy = policy_result.data
        client = policy.get('clients', {})
        member = policy.get('members', {})

        # Get health insurance details if exists
        health_details = None
        health_members = []
        try:
            health_result = supabase.table("health_insurance_details").select("*").eq("policy_id", policy_id).execute()
            if health_result.data:
                health_details = health_result.data[0]
                health_id = health_details['health_id']
                
                # Get health insured members
                members_result = supabase.table("health_insured_members").select("*").eq("health_id", health_id).execute()
                health_members = members_result.data
        except Exception as e:
            logger.warning(f"No health insurance details found for policy {policy_id}: {e}")

        # Get factory insurance details if exists
        factory_details = None
        try:
            factory_result = supabase.table("factory_insurance_details").select("*").eq("policy_id", policy_id).execute()
            if factory_result.data:
                factory_details = factory_result.data[0]
        except Exception as e:
            logger.warning(f"No factory insurance details found for policy {policy_id}: {e}")

        # Get renewal history
        history = get_policy_renewal_history(policy_id)

        return render_template("renewal_page.html",
                               policy=policy,
                               client=client,
                               member=member,
                               health_details=health_details,
                               health_members=health_members,
                               factory_details=factory_details,
                               history=history)

    except Exception as e:
        logger.error(f"Error loading renewal page: {e}")
        flash("Error loading policy details", "error")
        return redirect(url_for("existing_policies.list_all"))


@renewal_bp.route('/api/update_policy_details', methods=['POST'])
@login_required
def update_policy_details_api():
    """API endpoint to update policy details during renewal"""
    try:
        data = request.get_json()
        policy_id = data.get('policy_id')
        
        if not policy_id:
            return jsonify({'success': False, 'message': 'Policy ID is required'}), 400
        
        # Update basic policy details
        policy_updates = {}
        if 'insurance_company' in data:
            policy_updates['insurance_company'] = data['insurance_company']
        if 'product_name' in data:
            policy_updates['product_name'] = data['product_name']
        if 'agent_name' in data:
            policy_updates['agent_name'] = data['agent_name']
        if 'sum_insured' in data and data['sum_insured'] and str(data['sum_insured']).strip():
            try:
                policy_updates['sum_insured'] = float(data['sum_insured'])
            except (ValueError, TypeError):
                return jsonify({'success': False, 'message': 'Invalid sum insured amount'}), 400
        if 'net_premium' in data and data['net_premium'] and str(data['net_premium']).strip():
            try:
                policy_updates['net_premium'] = float(data['net_premium'])
            except (ValueError, TypeError):
                return jsonify({'success': False, 'message': 'Invalid net premium amount'}), 400
        if 'gross_premium' in data and data['gross_premium'] and str(data['gross_premium']).strip():
            try:
                policy_updates['gross_premium'] = float(data['gross_premium'])
            except (ValueError, TypeError):
                return jsonify({'success': False, 'message': 'Invalid gross premium amount'}), 400
        if 'tp_tr_premium' in data and data['tp_tr_premium'] and str(data['tp_tr_premium']).strip():
            try:
                policy_updates['tp_tr_premium'] = float(data['tp_tr_premium'])
            except (ValueError, TypeError):
                return jsonify({'success': False, 'message': 'Invalid TP/TR premium amount'}), 400
        if 'business_type' in data:
            policy_updates['business_type'] = data['business_type']
        if 'group_name' in data:
            policy_updates['group_name'] = data['group_name']
        if 'subgroup_name' in data:
            policy_updates['subgroup_name'] = data['subgroup_name']
        if 'remarks' in data:
            policy_updates['remarks'] = data['remarks']
        if 'policy_from' in data and data['policy_from']:
            converted_date = convert_date_format(data['policy_from'])
            if converted_date is None:
                return jsonify({'success': False, 'message': f'Invalid policy start date format: {data["policy_from"]}. Please use DD/MM/YYYY format.'}), 400
            policy_updates['policy_from'] = converted_date
        if 'policy_to' in data and data['policy_to']:
            converted_date = convert_date_format(data['policy_to'])
            if converted_date is None:
                return jsonify({'success': False, 'message': f'Invalid policy end date format: {data["policy_to"]}. Please use DD/MM/YYYY format.'}), 400
            policy_updates['policy_to'] = converted_date
        if 'payment_date' in data and data['payment_date']:
            converted_date = convert_date_format(data['payment_date'])
            if converted_date is None:
                return jsonify({'success': False, 'message': f'Invalid payment date format: {data["payment_date"]}. Please use DD/MM/YYYY format.'}), 400
            policy_updates['payment_date'] = converted_date
        
        # Update policy table
        if policy_updates:
            supabase.table("policies").update(policy_updates).eq("policy_id", policy_id).execute()
        
        # Handle health insurance details
        if 'health_details' in data:
            health_data = data['health_details']
            
            # Check if health insurance details exist
            health_result = supabase.table("health_insurance_details").select("*").eq("policy_id", policy_id).execute()
            
            if health_result.data:
                # Update existing health details
                health_id = health_result.data[0]['health_id']
                health_updates = {}
                if 'plan_type' in health_data:
                    health_updates['plan_type'] = health_data['plan_type']
                
                # Handle floater-specific fields
                if health_data.get('plan_type') in ['FLOATER', 'TOPUP_FLOATER']:
                    if 'floater_sum_insured' in health_data:
                        health_updates['floater_sum_insured'] = float(health_data['floater_sum_insured']) if health_data['floater_sum_insured'] else None
                    if 'floater_bonus' in health_data:
                        health_updates['floater_bonus'] = float(health_data['floater_bonus']) if health_data['floater_bonus'] else None
                    if health_data.get('plan_type') == 'TOPUP_FLOATER' and 'floater_deductible' in health_data:
                        health_updates['floater_deductible'] = float(health_data['floater_deductible']) if health_data['floater_deductible'] else None
                
                if health_updates:
                    supabase.table("health_insurance_details").update(health_updates).eq("health_id", health_id).execute()
                
                # Handle health members
                if 'members' in health_data:
                    # Delete existing members
                    supabase.table("health_insured_members").delete().eq("health_id", health_id).execute()
                    
                    # Insert new members
                    plan_type = health_data.get('plan_type', health_result.data[0].get('plan_type'))
                    for member in health_data['members']:
                        if member.get('member_name'):  # Only insert if name is provided
                            member_data = {
                                'health_id': health_id,
                                'member_name': member['member_name']
                            }
                            
                            # For INDIVIDUAL plans, store sum_insured, bonus, and deductible per member
                            # For FLOATER plans, only store member names (sum_insured, bonus, and deductible are in health_details)
                            if plan_type in ['INDIVIDUAL', 'TOPUP_INDIVIDUAL']:
                                # Handle numeric fields properly
                                if member.get('sum_insured') and str(member.get('sum_insured')).strip():
                                    try:
                                        member_data['sum_insured'] = float(member['sum_insured'])
                                    except (ValueError, TypeError):
                                        pass  # Skip invalid values
                                if member.get('bonus') and str(member.get('bonus')).strip():
                                    try:
                                        member_data['bonus'] = float(member['bonus'])
                                    except (ValueError, TypeError):
                                        pass  # Skip invalid values
                                if plan_type == 'TOPUP_INDIVIDUAL' and member.get('deductible') and str(member.get('deductible')).strip():
                                    try:
                                        member_data['deductible'] = float(member['deductible'])
                                    except (ValueError, TypeError):
                                        pass  # Skip invalid values
                            
                            supabase.table("health_insured_members").insert(member_data).execute()
            
            elif health_data.get('plan_type'):  # Create new health insurance if plan_type is provided
                # Insert new health insurance details
                health_insert = {
                    'policy_id': policy_id,
                    'plan_type': health_data['plan_type']
                }
                
                # Add floater-specific fields if it's a floater plan
                if health_data['plan_type'] == 'FLOATER':
                    if 'floater_sum_insured' in health_data and health_data['floater_sum_insured']:
                        health_insert['floater_sum_insured'] = float(health_data['floater_sum_insured'])
                    if 'floater_bonus' in health_data and health_data['floater_bonus']:
                        health_insert['floater_bonus'] = float(health_data['floater_bonus'])
                
                health_result = supabase.table("health_insurance_details").insert(health_insert).execute()
                health_id = health_result.data[0]['health_id']
                
                # Insert health members
                if 'members' in health_data:
                    for member in health_data['members']:
                        if member.get('member_name'):  # Only insert if name is provided
                            member_data = {
                                'health_id': health_id,
                                'member_name': member['member_name']
                            }
                            
                            # For INDIVIDUAL plans, store sum_insured and bonus per member
                            # For FLOATER plans, only store member names (sum_insured and bonus are in health_details)
                            if health_data['plan_type'] == 'INDIVIDUAL':
                                # Handle numeric fields properly
                                if member.get('sum_insured') and str(member.get('sum_insured')).strip():
                                    try:
                                        member_data['sum_insured'] = float(member['sum_insured'])
                                    except (ValueError, TypeError):
                                        pass  # Skip invalid values
                                if member.get('bonus') and str(member.get('bonus')).strip():
                                    try:
                                        member_data['bonus'] = float(member['bonus'])
                                    except (ValueError, TypeError):
                                        pass  # Skip invalid values
                            
                            supabase.table("health_insured_members").insert(member_data).execute()
        
        # Handle factory insurance details
        if 'factory_details' in data:
            factory_data = data['factory_details']
            
            # Check if factory insurance details exist
            factory_result = supabase.table("factory_insurance_details").select("*").eq("policy_id", policy_id).execute()
            
            factory_updates = {}
            if 'building' in factory_data and factory_data['building'] and str(factory_data['building']).strip():
                try:
                    factory_updates['building'] = float(factory_data['building'])
                except (ValueError, TypeError):
                    pass  # Skip invalid values
            if 'plant_machinery' in factory_data and factory_data['plant_machinery'] and str(factory_data['plant_machinery']).strip():
                try:
                    factory_updates['plant_machinery'] = float(factory_data['plant_machinery'])
                except (ValueError, TypeError):
                    pass  # Skip invalid values
            if 'furniture_fittings' in factory_data and factory_data['furniture_fittings'] and str(factory_data['furniture_fittings']).strip():
                try:
                    factory_updates['furniture_fittings'] = float(factory_data['furniture_fittings'])
                except (ValueError, TypeError):
                    pass  # Skip invalid values
            if 'stocks' in factory_data and factory_data['stocks'] and str(factory_data['stocks']).strip():
                try:
                    factory_updates['stocks'] = float(factory_data['stocks'])
                except (ValueError, TypeError):
                    pass  # Skip invalid values
            if 'electrical_installations' in factory_data and factory_data['electrical_installations'] and str(factory_data['electrical_installations']).strip():
                try:
                    factory_updates['electrical_installations'] = float(factory_data['electrical_installations'])
                except (ValueError, TypeError):
                    pass  # Skip invalid values
            
            if factory_result.data:
                # Update existing factory details
                if factory_updates:
                    supabase.table("factory_insurance_details").update(factory_updates).eq("policy_id", policy_id).execute()
            elif any(factory_updates.values()):  # Create new factory insurance if any value is provided
                # Insert new factory insurance details
                factory_updates['policy_id'] = policy_id
                supabase.table("factory_insurance_details").insert(factory_updates).execute()
        
        return jsonify({'success': True, 'message': 'Policy details updated successfully'})
        
    except Exception as e:
        logger.error(f"Error updating policy details: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


@renewal_bp.route('/api/update_policy_payment', methods=['POST'])
@login_required
def update_policy_payment_api():
    """API endpoint to update policy when payment is received"""
    try:
        policy_id = request.form.get('policy_id')
        paid_file = request.files.get('paid_file')
        new_expiry_date = request.form.get('new_expiry_date')
        new_policy_number = request.form.get('new_policy_number')
        send_confirmation = request.form.get('send_confirmation') == 'yes'

        # Get customer data if confirmation is requested
        customer_phone = request.form.get('customer_phone', '')
        customer_email = request.form.get('customer_email', '')
        customer_name = request.form.get('customer_name', '')

        if not policy_id:
            return jsonify({'success': False, 'message': 'Policy ID required'}), 400

        if not paid_file:
            return jsonify({'success': False, 'message': 'Paid policy file required'}), 400

        # Validate file type
        if not paid_file.filename.lower().endswith('.pdf'):
            return jsonify({'success': False, 'message': 'Only PDF files are allowed'}), 400

        # Get policy details
        policy_result = (
            supabase.table("policies")
            .select("*, clients!policies_client_id_fkey(client_id, name, email, phone), members!policies_member_id_fkey(member_name)")
            .eq("policy_id", policy_id)
            .single()
            .execute()
        )

        if not policy_result.data:
            return jsonify({'success': False, 'message': 'Policy not found'}), 404

        policy = policy_result.data
        client = policy.get('clients', {})
        member = policy.get('members', {})

        # Convert date format if provided
        converted_expiry_date = None
        if new_expiry_date:
            converted_expiry_date = convert_date_format(new_expiry_date)
            if converted_expiry_date is None:
                logger.error(f"Invalid expiry date format for policy {policy_id}: {new_expiry_date}")
                return jsonify({'success': False, 'message': f'Invalid expiry date format: {new_expiry_date}. Please use DD/MM/YYYY format.'}), 400

        # Update the policy with payment (pass current user email for audit trail)
        from flask_login import current_user
        archived_by = current_user.email if current_user and current_user.is_authenticated else None
        
        success, message, updated_policy = update_policy_payment(
            policy_id=int(policy_id),
            paid_file=paid_file,
            new_expiry_date=converted_expiry_date,
            new_policy_number=new_policy_number if new_policy_number else None,
            archived_by=archived_by
        )

        if success:
            confirmation_messages = []

            # Send confirmations if checkbox was ticked
            if send_confirmation:
                # Send WhatsApp confirmation with document if phone is available
                if customer_phone:
                    try:
                        from whatsapp_bot import normalize_phone, send_policy_to_customer
                        normalized_phone = normalize_phone(customer_phone)
                        
                        # Send the actual policy document via WhatsApp
                        whatsapp_success, whatsapp_msg = send_policy_to_customer(
                            normalized_phone,
                            updated_policy
                        )

                        if whatsapp_success:
                            confirmation_messages.append("Policy document sent via WhatsApp")
                        else:
                            confirmation_messages.append(f"WhatsApp failed: {whatsapp_msg}")
                    except Exception as e:
                        logger.warning(f"Could not send WhatsApp confirmation: {e}")
                        confirmation_messages.append("WhatsApp confirmation failed")

                # Send Email confirmation if email is available
                if customer_email:
                    try:
                        email_success, email_message = send_payment_confirmation_email(
                            customer_email,
                            customer_name or client.get('name', 'Customer'),
                            updated_policy,
                            {'name': paid_file.filename}
                        )

                        if email_success:
                            confirmation_messages.append("Email confirmation sent")
                        else:
                            confirmation_messages.append(f"Email failed: {email_message}")
                    except Exception as e:
                        logger.warning(f"Could not send email confirmation: {e}")
                        confirmation_messages.append("Email confirmation failed")

                if confirmation_messages:
                    message += " | " + " | ".join(confirmation_messages)

            return jsonify({
                'success': True,
                'message': message,
                'policy': updated_policy
            })
        else:
            return jsonify({'success': False, 'message': message}), 500

    except Exception as e:
        logger.error(f"Error in update_policy_payment_api: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


@renewal_bp.route("/send_renewal_reminder/<policy_id>", methods=['POST'])
@login_required
def send_reminder(policy_id):
    """Send a renewal reminder for a specific policy."""
    try:
        # 1. Fetch the policy details from the database
        policy_response = execute_query('policies', 'select', filters={'policy_id': policy_id}, single=True)
        if not policy_response.data:
            return jsonify({'success': False, 'message': 'Policy not found'}), 404
        policy = policy_response.data

        # 2. Fetch the client details
        client_response = execute_query('clients', 'select', filters={'client_id': policy['client_id']}, single=True)
        if not client_response.data:
            return jsonify({'success': False, 'message': 'Client not found for this policy'}), 404
        client = client_response.data
        
        # 3. Check if the client has an email address
        if not client.get('email'):
             return jsonify({'success': False, 'message': 'Client does not have an email address on file.'}), 400

        # 4. Create the data dictionary with the exact keys the HTML template needs
        renewal_data = {
            'client_name': client.get('name', 'Valued Customer'),
            'policy_no': policy.get('policy_number', 'N/A'), # The official policy number
            'asset': policy.get('remarks', 'N/A'),            # Using the 'remarks' field as requested
            'company': policy.get('insurance_company', 'N/A'),# The insurance company name
            'expiry_date': indian_date_filter(policy.get('policy_to'))
        }

        # 5. Call the email function with the data dictionary
        # (Assuming no file attachment for a reminder)
        success, message = send_renewal_reminder_email(
            client.get('email'),
            renewal_data,
            file_path=None 
        )

        if success:
            return jsonify({'success': True, 'message': f"Renewal reminder sent successfully to {client.get('email')}"})
        else:
            return jsonify({'success': False, 'message': f"Failed to send email: {message}"}), 500

    except Exception as e:
        print(f"Error in send_reminder route: {e}")
        return jsonify({'success': False, 'message': 'An internal error occurred.'}), 500


@renewal_bp.route('/renewal_export')
@login_required
def renewal_export_page():
    """Page for exporting renewal data by month"""
    try:
        return render_template("renewal_export.html")
    except Exception as e:
        logger.error(f"Error loading renewal export page: {e}")
        flash("Error loading renewal export page", "error")
        return redirect(url_for("dashboard.index"))


@renewal_bp.route('/api/get_renewal_data/<year>/<month>')
@login_required
def get_renewal_data_api(year, month):
    """API endpoint to get policies expiring in a specific month"""
    try:
        # Validate year and month
        try:
            year = int(year)
            month = int(month)
            if month < 1 or month > 12:
                return jsonify({'success': False, 'message': 'Invalid month'}), 400
        except ValueError:
            return jsonify({'success': False, 'message': 'Invalid year or month format'}), 400

        # Calculate the start and end dates for the month
        start_date = datetime(year, month, 1)
        if month == 12:
            end_date = datetime(year + 1, 1, 1) - timedelta(days=1)
        else:
            end_date = datetime(year, month + 1, 1) - timedelta(days=1)

        # Format dates for database query
        start_date_str = start_date.strftime('%Y-%m-%d')
        end_date_str = end_date.strftime('%Y-%m-%d')

        # Query policies expiring in the selected month
        query = """
        SELECT 
            p.policy_id,
            p.policy_number,
            p.policy_to as expiry_date,
            p.group_name,
            p.subgroup_name,
            p.insurance_company,
            p.remarks,
            c.name as client_name,
            m.member_name
        FROM policies p
        LEFT JOIN clients c ON p.client_id = c.client_id
        LEFT JOIN members m ON p.member_id = m.member_id
        WHERE p.policy_to >= %s AND p.policy_to <= %s
        ORDER BY p.policy_to ASC, c.name ASC
        """

        # Execute query using Supabase
        result = supabase.table("policies").select(
            "policy_id, policy_number, policy_to, group_name, subgroup_name, insurance_company, remarks, "
            "clients!policies_client_id_fkey(name), members!policies_member_id_fkey(member_name)"
        ).gte("policy_to", start_date_str).lte("policy_to", end_date_str).order("policy_to").execute()

        policies = []
        for policy in result.data:
            client = policy.get('clients', {}) or {}
            member = policy.get('members', {}) or {}
            
            policies.append({
                'policy_id': policy.get('policy_id'),
                'policy_number': policy.get('policy_number', 'N/A'),
                'expiry_date': policy.get('policy_to'),
                'member_name': member.get('member_name', 'N/A'),
                'group_name': policy.get('group_name', 'N/A'),
                'subgroup_name': policy.get('subgroup_name', 'N/A'),
                'insurance_company': policy.get('insurance_company', 'N/A'),
                'remarks': policy.get('remarks', '')
            })

        return jsonify({
            'success': True,
            'policies': policies,
            'count': len(policies)
        })

    except Exception as e:
        logger.error(f"Error getting renewal data: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


@renewal_bp.route('/api/export_renewal_excel/<year>/<month>')
@login_required
def export_renewal_excel(year, month):
    """Export renewal data to Excel file"""
    try:
        # Validate year and month
        try:
            year = int(year)
            month = int(month)
            if month < 1 or month > 12:
                return jsonify({'success': False, 'message': 'Invalid month'}), 400
        except ValueError:
            return jsonify({'success': False, 'message': 'Invalid year or month format'}), 400

        # Calculate the start and end dates for the month
        start_date = datetime(year, month, 1)
        if month == 12:
            end_date = datetime(year + 1, 1, 1) - timedelta(days=1)
        else:
            end_date = datetime(year, month + 1, 1) - timedelta(days=1)

        # Format dates for database query
        start_date_str = start_date.strftime('%Y-%m-%d')
        end_date_str = end_date.strftime('%Y-%m-%d')

        # Query policies expiring in the selected month
        result = supabase.table("policies").select(
            "policy_id, policy_number, policy_to, group_name, subgroup_name, insurance_company, remarks, "
            "clients!policies_client_id_fkey(name), members!policies_member_id_fkey(member_name)"
        ).gte("policy_to", start_date_str).lte("policy_to", end_date_str).order("policy_to").execute()

        # Prepare data for Excel
        excel_data = []
        for policy in result.data:
            client = policy.get('clients', {}) or {}
            member = policy.get('members', {}) or {}
            
            # Convert expiry date to DD/MM/YYYY format
            expiry_date = policy.get('policy_to', '')
            if expiry_date:
                try:
                    date_obj = datetime.strptime(expiry_date, '%Y-%m-%d')
                    expiry_date = date_obj.strftime('%d/%m/%Y')
                except ValueError:
                    pass  # Keep original format if conversion fails

            excel_data.append({
                'Date': expiry_date,
                'Name': member.get('member_name', 'N/A'),
                'Status_1': '',  # Empty column for manual filling
                'Status_2': '',  # Empty column for manual filling
                'Policy': policy.get('policy_number', 'N/A'),
                'Group': policy.get('group_name', 'N/A'),
                'Sub - Group': policy.get('subgroup_name', 'N/A'),
                'Company': policy.get('insurance_company', 'N/A'),
                'Remarks': policy.get('remarks', '')
            })

        # Create DataFrame
        df = pd.DataFrame(excel_data)

        # Create Excel file in memory
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Renewal Data', index=False)
            
            # Get the workbook and worksheet
            workbook = writer.book
            worksheet = writer.sheets['Renewal Data']
            
            # Merge Status columns to create the effect shown in the image
            worksheet.merge_cells('C1:D1')
            worksheet['C1'] = 'Status'
            
            # Add headers for the merged Status columns
            worksheet['C2'] = ''  # Sub-column 1
            worksheet['D2'] = 'R'  # Sub-column 2 (as shown in image)
            
            # Adjust column widths
            worksheet.column_dimensions['A'].width = 12  # Date
            worksheet.column_dimensions['B'].width = 30  # Name
            worksheet.column_dimensions['C'].width = 8   # Status 1
            worksheet.column_dimensions['D'].width = 8   # Status 2
            worksheet.column_dimensions['E'].width = 20  # Policy
            worksheet.column_dimensions['F'].width = 15  # Group
            worksheet.column_dimensions['G'].width = 15  # Sub-Group
            worksheet.column_dimensions['H'].width = 15  # Company
            worksheet.column_dimensions['I'].width = 30  # Remarks

        output.seek(0)

        # Generate filename
        month_names = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
        ]
        filename = f"Renewal_Export_{month_names[month-1]}_{year}.xlsx"

        return send_file(
            output,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            as_attachment=True,
            download_name=filename
        )

    except Exception as e:
        logger.error(f"Error exporting renewal Excel: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


================================================
FILE: routes/settings_routes.py
================================================
"""
Settings Routes - Admin-only settings management
"""

from flask import Blueprint, render_template, request, jsonify, flash, redirect, url_for
from flask_login import current_user
from auth_decorators import admin_required, settings_access_required
from settings_service import settings, SettingsService
from models import User
import logging
import json

logger = logging.getLogger(__name__)
settings_bp = Blueprint('settings', __name__, url_prefix='/settings')

@settings_bp.route('/')
@settings_access_required
def index():
    """Settings dashboard page"""
    try:
        all_settings = settings.get_all_settings()
        users = User.get_all_users()
        
        return render_template('settings/index.html', 
                             settings=all_settings, 
                             users=users,
                             current_user=current_user)
    except Exception as e:
        logger.error(f"Error loading settings page: {e}")
        flash('Error loading settings page', 'error')
        return redirect(url_for('dashboard.index'))

@settings_bp.route('/api/get/<category>')
@admin_required
def get_category_settings(category):
    """Get settings for a specific category"""
    try:
        category_settings = settings.get_category_with_metadata(category)
        logger.info(f"Retrieved settings for category '{category}': {len(category_settings) if category_settings else 0} items")
        
        # If no settings exist for this category, create default ones
        if not category_settings:
            logger.info(f"No settings found for category '{category}', creating defaults")
            _create_default_settings_for_category(category)
            category_settings = settings.get_category_with_metadata(category)
        
        logger.debug(f"Settings data for '{category}': {category_settings}")
        
        return jsonify({
            'success': True,
            'settings': category_settings
        })
    except Exception as e:
        logger.error(f"Error getting category settings for '{category}': {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

def _create_default_settings_for_category(category):
    """Create default settings for a category if none exist"""
    try:
        default_settings = {
            'company': {
                'name': ('Insta Insurance Consultancy', 'Company name displayed in the application'),
                'portal_name': ('Insta Insurance Consultancy Portal', 'Portal name displayed in navigation bar'),
                'portal_title': ('Insta Insurances Portal', 'Portal title shown in browser tab'),
                'logo_path': ('ico.png', 'Path to logo file in static folder'),
                'address': ('', 'Company address'),
                'email': ('', 'Company email address'),
                'phone': ('', 'Company phone number'),
                'website': ('', 'Company website URL'),
                'logo_url': ('', 'URL to company logo image')
            },
            'email': {
                'smtp_server': ('', 'SMTP server hostname'),
                'smtp_port': ('587', 'SMTP server port'),
                'smtp_username': ('', 'SMTP username'),
                'smtp_password': ('', 'SMTP password'),
                'from_email': ('', 'From email address'),
                'use_tls': ('true', 'Use TLS encryption')
            },
            'whatsapp': {
                'token': ('', 'WhatsApp API token'),
                'phone_id': ('', 'WhatsApp phone number ID'),
                'webhook_url': ('', 'WhatsApp webhook URL'),
                'verify_token': ('', 'WhatsApp webhook verify token')
            },
            'twilio': {
                'account_sid': ('', 'Twilio Account SID'),
                'auth_token': ('', 'Twilio Auth Token'),
                'whatsapp_number': ('', 'Twilio WhatsApp number')
            },
            'google_drive': {
                'credentials_file': ('credentials.json', 'Google Drive credentials file name'),
                'credentials_json': ('{}', 'Google Drive service account credentials'),
                'root_folder_id': ('', 'Google Drive root folder ID for policy uploads'),
                'folder_id': ('', 'Google Drive folder ID'),
                'archive_folder_id': ('', 'Google Drive archive folder ID')
            },
            'app': {
                'base_url': ('http://localhost:5050', 'Application base URL'),
                'environment': ('development', 'Application environment'),
                'debug': ('true', 'Debug mode enabled')
            },
            'business': {
                'default_gst': ('18', 'Default GST percentage'),
                'default_commission': ('10', 'Default commission percentage'),
                'reminder_days': ('30', 'Days before expiry to send reminders')
            }
        }
        
        if category in default_settings:
            for key, (value, description) in default_settings[category].items():
                # Determine data type
                if key in ['use_tls', 'debug']:
                    data_type = 'boolean'
                elif key in ['smtp_port', 'default_gst', 'default_commission', 'reminder_days']:
                    data_type = 'number'
                elif key == 'credentials_json':
                    data_type = 'json'
                else:
                    data_type = 'string'
                
                # Create the setting
                settings.create(
                    category=category,
                    key=key,
                    value=value,
                    description=description,
                    is_sensitive=key in ['smtp_password', 'token', 'auth_token', 'credentials_json'],
                    updated_by='system'
                )
            
            logger.info(f"Created {len(default_settings[category])} default settings for category '{category}'")
        
    except Exception as e:
        logger.error(f"Error creating default settings for category '{category}': {e}")

@settings_bp.route('/api/update', methods=['POST'])
@admin_required
def update_settings():
    """Update multiple settings"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({
                'success': False,
                'error': 'No data provided'
            }), 400
        
        updated_count = 0
        errors = []
        
        for category, category_settings in data.items():
            for key, value in category_settings.items():
                if settings.set(category, key, value, current_user.email):
                    updated_count += 1
                else:
                    errors.append(f"Failed to update {category}.{key}")
        
        if errors:
            logger.warning(f"Some settings failed to update: {errors}")
            return jsonify({
                'success': False,
                'error': f"Updated {updated_count} settings, but {len(errors)} failed",
                'errors': errors
            }), 207  # Multi-status
        
        logger.info(f"Settings updated successfully by {current_user.email}: {updated_count} settings")
        return jsonify({
            'success': True,
            'message': f'Successfully updated {updated_count} settings'
        })
        
    except Exception as e:
        logger.error(f"Error updating settings: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@settings_bp.route('/api/create', methods=['POST'])
@admin_required
def create_setting():
    """Create a new setting"""
    try:
        data = request.get_json()
        
        required_fields = ['category', 'key', 'value']
        for field in required_fields:
            if field not in data:
                return jsonify({
                    'success': False,
                    'error': f'Missing required field: {field}'
                }), 400
        
        success = settings.create(
            category=data['category'],
            key=data['key'],
            value=data['value'],
            description=data.get('description', ''),
            is_sensitive=data.get('is_sensitive', False),
            updated_by=current_user.email
        )
        
        if success:
            logger.info(f"Setting {data['category']}.{data['key']} created by {current_user.email}")
            return jsonify({
                'success': True,
                'message': 'Setting created successfully'
            })
        else:
            return jsonify({
                'success': False,
                'error': 'Failed to create setting'
            }), 500
            
    except Exception as e:
        logger.error(f"Error creating setting: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@settings_bp.route('/api/delete', methods=['POST'])
@admin_required
def delete_setting():
    """Delete a setting"""
    try:
        data = request.get_json()
        
        if 'category' not in data or 'key' not in data:
            return jsonify({
                'success': False,
                'error': 'Category and key are required'
            }), 400
        
        success = settings.delete(data['category'], data['key'])
        
        if success:
            logger.info(f"Setting {data['category']}.{data['key']} deleted by {current_user.email}")
            return jsonify({
                'success': True,
                'message': 'Setting deleted successfully'
            })
        else:
            return jsonify({
                'success': False,
                'error': 'Failed to delete setting'
            }), 500
            
    except Exception as e:
        logger.error(f"Error deleting setting: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@settings_bp.route('/api/export')
@admin_required
def export_settings():
    """Export settings for backup"""
    try:
        include_sensitive = request.args.get('include_sensitive', 'false').lower() == 'true'
        exported_settings = settings.export_settings(include_sensitive)
        
        logger.info(f"Settings exported by {current_user.email} (include_sensitive: {include_sensitive})")
        return jsonify({
            'success': True,
            'settings': exported_settings
        })
        
    except Exception as e:
        logger.error(f"Error exporting settings: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@settings_bp.route('/api/import', methods=['POST'])
@admin_required
def import_settings():
    """Import settings from backup"""
    try:
        data = request.get_json()
        
        if 'settings' not in data:
            return jsonify({
                'success': False,
                'error': 'Settings data is required'
            }), 400
        
        success = settings.bulk_update(data['settings'], current_user.email)
        
        if success:
            logger.info(f"Settings imported successfully by {current_user.email}")
            return jsonify({
                'success': True,
                'message': 'Settings imported successfully'
            })
        else:
            return jsonify({
                'success': False,
                'error': 'Some settings failed to import'
            }), 207
            
    except Exception as e:
        logger.error(f"Error importing settings: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# User Management Routes
@settings_bp.route('/api/users')
@admin_required
def get_users():
    """Get all users"""
    try:
        users = User.get_all_users()
        return jsonify({
            'success': True,
            'users': users
        })
    except Exception as e:
        logger.error(f"Error getting users: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@settings_bp.route('/api/users/create', methods=['POST'])
@admin_required
def create_user():
    """Create a new user"""
    try:
        data = request.get_json()
        
        required_fields = ['email', 'name', 'password', 'role']
        for field in required_fields:
            if field not in data:
                return jsonify({
                    'success': False,
                    'error': f'Missing required field: {field}'
                }), 400
        
        success, message = User.create_user_with_password(
            email=data['email'],
            name=data['name'],
            password=data['password'],
            role=data['role'],
            created_by=current_user.email
        )
        
        if success:
            return jsonify({
                'success': True,
                'message': message
            })
        else:
            return jsonify({
                'success': False,
                'error': message
            }), 400
            
    except Exception as e:
        logger.error(f"Error creating user: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@settings_bp.route('/api/users/update-role', methods=['POST'])
@admin_required
def update_user_role():
    """Update user role"""
    try:
        data = request.get_json()
        
        if 'email' not in data or 'role' not in data:
            return jsonify({
                'success': False,
                'error': 'Email and role are required'
            }), 400
        
        # Prevent admin from changing their own role
        if data['email'] == current_user.email:
            return jsonify({
                'success': False,
                'error': 'You cannot change your own role'
            }), 400
        
        success, message = User.update_user_role(
            email=data['email'],
            new_role=data['role'],
            updated_by=current_user.email
        )
        
        if success:
            return jsonify({
                'success': True,
                'message': message
            })
        else:
            return jsonify({
                'success': False,
                'error': message
            }), 400
            
    except Exception as e:
        logger.error(f"Error updating user role: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@settings_bp.route('/api/users/delete', methods=['POST'])
@admin_required
def delete_user():
    """Delete a user"""
    try:
        data = request.get_json()
        
        if 'email' not in data:
            return jsonify({
                'success': False,
                'error': 'Email is required'
            }), 400
        
        # Prevent admin from deleting themselves
        if data['email'] == current_user.email:
            return jsonify({
                'success': False,
                'error': 'You cannot delete your own account'
            }), 400
        
        success, message = User.delete_user(
            email=data['email'],
            deleted_by=current_user.email
        )
        
        if success:
            return jsonify({
                'success': True,
                'message': message
            })
        else:
            return jsonify({
                'success': False,
                'error': message
            }), 400
            
    except Exception as e:
        logger.error(f"Error deleting user: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@settings_bp.route('/api/users/reset-password', methods=['POST'])
@admin_required
def reset_user_password():
    """Reset user password"""
    try:
        data = request.get_json()
        
        if 'email' not in data or 'password' not in data:
            return jsonify({
                'success': False,
                'error': 'Email and password are required'
            }), 400
        
        success, message = User.reset_user_password(
            email=data['email'],
            new_password=data['password'],
            reset_by=current_user.email
        )
        
        if success:
            return jsonify({
                'success': True,
                'message': message
            })
        else:
            return jsonify({
                'success': False,
                'error': message
            }), 400
            
    except Exception as e:
        logger.error(f"Error resetting password: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500



================================================
FILE: routes/whatsapp_logs_routes.py
================================================
"""
WhatsApp Logs Routes
Routes for viewing and managing WhatsApp message logs
"""
from flask import Blueprint, render_template, request, jsonify
from flask_login import login_required
from whatsapp_service import WhatsAppService
from renewal_file_cleanup import RenewalFileCleanup
from realtime_cleanup_service import get_realtime_cleanup_service, start_realtime_cleanup_service, stop_realtime_cleanup_service
from datetime import datetime
import math

whatsapp_logs_bp = Blueprint("whatsapp_logs", __name__)


@whatsapp_logs_bp.app_template_filter('format_datetime')
def format_datetime(value):
    """Format datetime for display"""
    if not value:
        return '-'
    
    try:
        if isinstance(value, str):
            # Parse ISO format datetime
            dt = datetime.fromisoformat(value.replace('Z', '+00:00'))
        else:
            dt = value
        
        # Format as DD/MM/YYYY HH:MM
        return dt.strftime('%d/%m/%Y %H:%M')
    except:
        return str(value) if value else '-'


@whatsapp_logs_bp.route('/whatsapp_logs')
@login_required
def whatsapp_logs():
    """Display WhatsApp message logs with filters and pagination"""
    try:
        # Get filter parameters
        status_filter = request.args.get('status_filter', 'all')
        message_type_filter = request.args.get('message_type_filter', 'all')
        phone_filter = request.args.get('phone_filter', '')
        date_from = request.args.get('date_from', '')
        date_to = request.args.get('date_to', '')
        
        # Pagination parameters
        page = int(request.args.get('page', 1))
        per_page = 25
        offset = (page - 1) * per_page
        
        # Get logs with filters
        result = WhatsAppService.get_logs_with_filters(
            limit=per_page,
            offset=offset,
            status_filter=status_filter if status_filter != 'all' else None,
            message_type_filter=message_type_filter if message_type_filter != 'all' else None,
            phone_filter=phone_filter if phone_filter else None,
            date_from=date_from if date_from else None,
            date_to=date_to if date_to else None
        )
        
        logs = result['logs']
        total_count = result['total_count']
        has_next = result['has_next']
        has_prev = result['has_prev']
        
        # Calculate pagination info
        total_pages = math.ceil(total_count / per_page) if total_count > 0 else 1
        
        # Get status summary
        summary = WhatsAppService.get_status_summary()
        
        return render_template(
            'whatsapp_logs.html',
            logs=logs,
            summary=summary,
            page=page,
            total_pages=total_pages,
            has_next=has_next,
            has_prev=has_prev,
            total_count=total_count
        )
        
    except Exception as e:
        print(f"Error loading WhatsApp logs: {e}")
        return render_template(
            'whatsapp_logs.html',
            logs=[],
            summary={},
            page=1,
            total_pages=1,
            has_next=False,
            has_prev=False,
            total_count=0,
            error=str(e)
        )


@whatsapp_logs_bp.route('/api/whatsapp/refresh_all_statuses', methods=['POST'])
@login_required
def refresh_all_statuses():
    """Refresh status for all pending messages"""
    try:
        updated_count, total_count = WhatsAppService.refresh_all_pending_statuses()
        
        return jsonify({
            'success': True,
            'updated_count': updated_count,
            'total_count': total_count,
            'message': f'Updated {updated_count} out of {total_count} messages'
        })
        
    except Exception as e:
        print(f"Error refreshing all statuses: {e}")
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500


@whatsapp_logs_bp.route('/api/whatsapp/refresh_status', methods=['POST'])
@login_required
def refresh_single_status():
    """Refresh status for a single message"""
    try:
        data = request.get_json()
        message_sid = data.get('message_sid')
        
        if not message_sid:
            return jsonify({
                'success': False,
                'message': 'Message SID is required'
            }), 400
        
        success = WhatsAppService.refresh_message_status(message_sid)
        
        if success:
            return jsonify({
                'success': True,
                'message': 'Status updated successfully'
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Failed to update status'
            }), 500
            
    except Exception as e:
        print(f"Error refreshing single status: {e}")
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500


@whatsapp_logs_bp.route('/api/whatsapp/message_details/<message_sid>')
@login_required
def get_message_details(message_sid):
    """Get detailed information about a specific message from Twilio"""
    try:
        status_data = WhatsAppService.get_message_status_from_twilio(message_sid)
        
        if 'error' in status_data:
            return jsonify({
                'success': False,
                'message': status_data['error']
            }), 500
        
        return jsonify({
            'success': True,
            'message': status_data
        })
        
    except Exception as e:
        print(f"Error getting message details: {e}")
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500


@whatsapp_logs_bp.route('/api/whatsapp/stats')
@login_required
def get_whatsapp_stats():
    """Get WhatsApp statistics for dashboard widgets"""
    try:
        summary = WhatsAppService.get_status_summary()
        
        return jsonify({
            'success': True,
            'stats': summary
        })
        
    except Exception as e:
        print(f"Error getting WhatsApp stats: {e}")
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500


@whatsapp_logs_bp.route('/api/whatsapp/cleanup_files', methods=['POST'])
@login_required
def cleanup_renewal_files():
    """Clean up renewal files based on WhatsApp delivery status"""
    try:
        data = request.get_json() or {}
        dry_run = data.get('dry_run', False)
        
        cleanup_service = RenewalFileCleanup()
        results = cleanup_service.run_full_cleanup(dry_run=dry_run)
        
        return jsonify({
            'success': True,
            'results': results,
            'message': results['summary']
        })
        
    except Exception as e:
        print(f"Error during file cleanup: {e}")
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500


@whatsapp_logs_bp.route('/api/whatsapp/cleanup_preview')
@login_required
def preview_cleanup():
    """Preview which files would be cleaned up without actually deleting them"""
    try:
        cleanup_service = RenewalFileCleanup()
        
        # Get files ready for cleanup
        files_to_cleanup = cleanup_service.get_files_ready_for_cleanup()
        
        # Get orphaned files info
        orphaned_results = cleanup_service.cleanup_orphaned_files(dry_run=True)
        
        return jsonify({
            'success': True,
            'preview': {
                'status_based_files': files_to_cleanup,
                'orphaned_files': orphaned_results['deleted_orphaned'],
                'total_files': len(files_to_cleanup) + len(orphaned_results['deleted_orphaned']),
                'estimated_size_freed': sum(f.get('size', 0) for f in files_to_cleanup) + orphaned_results['total_size_freed']
            }
        })
        
    except Exception as e:
        print(f"Error previewing cleanup: {e}")
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500


@whatsapp_logs_bp.route('/api/whatsapp/realtime_service_status')
@login_required
def get_realtime_service_status():
    """Get status of the real-time cleanup service"""
    try:
        service = get_realtime_cleanup_service()
        
        if service:
            status = service.get_status()
            return jsonify({
                'success': True,
                'service_running': status['running'],
                'check_interval_seconds': status['check_interval_seconds'],
                'thread_alive': status['thread_alive']
            })
        else:
            return jsonify({
                'success': True,
                'service_running': False,
                'check_interval_seconds': 0,
                'thread_alive': False
            })
        
    except Exception as e:
        print(f"Error getting service status: {e}")
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500


@whatsapp_logs_bp.route('/api/whatsapp/start_realtime_service', methods=['POST'])
@login_required
def start_realtime_service():
    """Start the real-time cleanup service"""
    try:
        data = request.get_json() or {}
        interval = data.get('interval_seconds', 60)
        
        service = start_realtime_cleanup_service(check_interval_seconds=interval)
        
        return jsonify({
            'success': True,
            'message': f'Real-time cleanup service started (checking every {interval} seconds)',
            'service_running': True
        })
        
    except Exception as e:
        print(f"Error starting real-time service: {e}")
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500


@whatsapp_logs_bp.route('/api/whatsapp/stop_realtime_service', methods=['POST'])
@login_required
def stop_realtime_service_api():
    """Stop the real-time cleanup service"""
    try:
        stop_realtime_cleanup_service()
        
        return jsonify({
            'success': True,
            'message': 'Real-time cleanup service stopped',
            'service_running': False
        })
        
    except Exception as e:
        print(f"Error stopping real-time service: {e}")
        return jsonify({
            'success': False,
            'message': str(e)
        }), 500



================================================
FILE: routes/whatsapp_routes.py
================================================
from flask import Blueprint, request, jsonify, send_file
from flask_login import login_required
from whatsapp_bot import (
    send_policy_to_customer,
    send_renewal_reminder,
    normalize_phone
)
from email_service import send_policy_email, send_renewal_reminder_email, indian_date_filter
from supabase import create_client
from dynamic_config import Config
import io
from googleapiclient.http import MediaIoBaseDownload
from whatsapp_bot import get_drive_service
import tempfile
import os

whatsapp_bp = Blueprint("whatsapp", __name__)
supabase = create_client(Config.SUPABASE_URL, Config.SUPABASE_KEY)


@whatsapp_bp.route('/api/send_policy_whatsapp', methods=['POST'])
@login_required
def send_policy_whatsapp():
    """Send a policy document to customer via WhatsApp"""
    try:
        data = request.json
        policy_id = data.get('policy_id')

        if not policy_id:
            return jsonify({'success': False, 'message': 'Policy ID required'}), 400

        # Fetch policy and customer info
        result = (
            supabase.table("policies")
            .select("*, clients(*), members(*)")
            .eq("policy_id", policy_id)
            .single()
            .execute()
        )

        policy = result.data
        customer = policy.get('clients')

        if not customer or not customer.get('phone'):
            return jsonify({'success': False, 'message': 'No phone number found for customer'}), 400

        phone = normalize_phone(customer['phone'])
        success, message = send_policy_to_customer(phone, policy)

        return jsonify({'success': success, 'message': message})

    except Exception as e:
        print(f"Error sending policy via WhatsApp: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


@whatsapp_bp.route('/api/send_policy_email', methods=['POST'])
@login_required
def send_policy_email_api():
    """Send a policy document to customer via email only"""
    try:
        data = request.json
        policy_id = data.get('policy_id')

        if not policy_id:
            return jsonify({'success': False, 'message': 'Policy ID required'}), 400

        # Fetch policy and customer info
        result = (
            supabase.table("policies")
            .select("*, clients(*), members(*)")
            .eq("policy_id", policy_id)
            .single()
            .execute()
        )

        policy = result.data
        customer = policy.get('clients')

        if not customer or not customer.get('email'):
            return jsonify({'success': False, 'message': 'No email address found for customer'}), 400

        # Download file from Google Drive
        from whatsapp_bot import extract_file_id_from_url, download_file_from_drive, delete_temp_file
        
        file_id = extract_file_id_from_url(policy.get('drive_url'))
        if not file_id:
            return jsonify({'success': False, 'message': 'No drive URL found'}), 400

        filename = f"{policy.get('insurance_company','')}_{policy.get('product_name','')}.pdf".replace(' ', '_')
        temp_file_path = download_file_from_drive(file_id, filename)

        if not temp_file_path:
            return jsonify({'success': False, 'message': 'Could not download file'}), 400

        # Prepare policy data for the new template-based function
        policy_data = {
            'client_name': customer['name'],
            'policy_type': policy.get('product_name', 'Insurance'),
            'policy_no': policy.get('policy_number', 'N/A'),
            'asset': policy.get('remarks', 'N/A'),
            'start_date': indian_date_filter(policy.get('policy_from')),
            'expiry_date': indian_date_filter(policy.get('policy_to'))
        }
        
        # Send email
        success, message = send_policy_email(
            customer['email'], 
            policy_data, 
            temp_file_path
        )

        # Clean up temp file
        delete_temp_file(temp_file_path)

        return jsonify({'success': success, 'message': message})

    except Exception as e:
        print(f"Error sending policy via email: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


@whatsapp_bp.route('/api/send_renewal_reminder_email', methods=['POST'])
@login_required
def send_renewal_reminder_email_api():
    """Send renewal reminder via email only"""
    try:
        policy_id = request.form.get('policy_id')
        payment_link = request.form.get('payment_link', '')
        renewal_file = request.files.get('renewal_file')

        if not policy_id:
            return jsonify({'success': False, 'message': 'Policy ID required'}), 400

        # Fetch policy and customer info
        result = (
            supabase.table("policies")
            .select("*, clients(*), members(*)")
            .eq("policy_id", policy_id)
            .single()
            .execute()
        )

        policy = result.data
        customer = policy.get('clients')

        if not customer or not customer.get('email'):
            return jsonify({'success': False, 'message': 'No email address found'}), 400

        # Handle renewal file if provided
        file_path = None
        if renewal_file:
            temp_dir = tempfile.gettempdir()
            file_path = os.path.join(temp_dir, renewal_file.filename)
            renewal_file.save(file_path)

        # Prepare renewal data for the new template-based function
        renewal_data = {
            'client_name': customer['name'],
            'policy_no': policy.get('policy_number', policy.get('policy_id', 'N/A')),
            'asset': policy.get('remarks', 'N/A'),
            'company': policy.get('insurance_company', 'N/A'),
            'expiry_date': policy.get('policy_to', 'N/A'),
            'payment_link': payment_link if payment_link else None
        }
        
        success, message = send_renewal_reminder_email(
            customer['email'],
            renewal_data,
            file_path=file_path
        )

        # Clean up temp file
        if file_path and os.path.exists(file_path):
            os.remove(file_path)

        return jsonify({'success': success, 'message': message})

    except Exception as e:
        print(f"Error sending renewal reminder via email: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


@whatsapp_bp.route('/api/send_renewal_reminder', methods=['POST'])
@login_required
def send_renewal_reminder_api():
    """Send renewal reminder via WhatsApp"""
    try:
        policy_id = request.form.get('policy_id')
        payment_link = request.form.get('payment_link', '')
        renewal_file = request.files.get('renewal_file')

        if not policy_id:
            return jsonify({'success': False, 'message': 'Policy ID required'}), 400

        # Fetch policy and customer info
        result = (
            supabase.table("policies")
            .select("*, clients(*), members(*)")
            .eq("policy_id", policy_id)
            .single()
            .execute()
        )

        policy = result.data
        customer = policy.get('clients')

        if not customer or not customer.get('phone'):
            return jsonify({'success': False, 'message': 'No phone number found'}), 400

        phone = normalize_phone(customer['phone'])

        # Handle renewal file if provided - save directly to static/renewals
        renewal_filename = None
        if renewal_file:
            # Ensure static renewals directory exists
            static_renewals_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'static', 'renewals')
            os.makedirs(static_renewals_dir, exist_ok=True)
            
            # Sanitize filename for URL safety (replace spaces and special chars)
            import re
            original_filename = renewal_file.filename
            # Replace spaces with underscores and remove/replace problematic characters
            safe_filename = re.sub(r'[^\w\-_\.]', '_', original_filename)
            # Remove multiple consecutive underscores
            safe_filename = re.sub(r'_+', '_', safe_filename)
            
            renewal_filename = safe_filename
            static_file_path = os.path.join(static_renewals_dir, safe_filename)
            renewal_file.save(static_file_path)
            
            print(f"Renewal file saved: {static_file_path}")
            print(f"Original filename: '{original_filename}' -> Sanitized: '{safe_filename}'")

        success, message = send_renewal_reminder(
            phone,
            policy,
            renewal_filename=renewal_filename,
            payment_link=payment_link if payment_link else None
        )

        return jsonify({'success': success, 'message': message})

    except Exception as e:
        print(f"Error sending renewal reminder: {e}")
        return jsonify({'success': False, 'message': str(e)}), 500


@whatsapp_bp.route('/media/drive/<file_id>/<path:filename>', methods=['GET'])
def serve_drive_media(file_id, filename):
    """Proxy a Google Drive file as a public URL for Twilio media_url.
    
    This endpoint serves files from Google Drive with proper HTTPS access
    and content-type headers required by Twilio WhatsApp API.
    """
    try:
        service = get_drive_service()
        if not service:
            print(f"Google Drive service not available for file_id: {file_id}")
            return jsonify({'error': 'Drive service unavailable'}), 500

        # Get file metadata to determine proper content type
        try:
            file_metadata = service.files().get(fileId=file_id).execute()
            mime_type = file_metadata.get('mimeType', 'application/octet-stream')
            
            # Map Google Drive MIME types to standard MIME types for WhatsApp
            mime_type_mapping = {
                'application/vnd.google-apps.document': 'application/pdf',
                'application/vnd.google-apps.spreadsheet': 'application/pdf',
                'application/vnd.google-apps.presentation': 'application/pdf',
                'application/pdf': 'application/pdf',
                'image/jpeg': 'image/jpeg',
                'image/png': 'image/png',
                'image/jpg': 'image/jpeg'
            }
            
            # Use mapped MIME type or default to PDF for documents
            final_mime_type = mime_type_mapping.get(mime_type, 'application/pdf')
            
        except Exception as e:
            print(f"Could not get file metadata for {file_id}: {e}")
            final_mime_type = 'application/pdf'  # Default fallback

        # Download the file content
        request_obj = service.files().get_media(fileId=file_id)
        mem = io.BytesIO()
        downloader = MediaIoBaseDownload(mem, request_obj)
        
        done = False
        while not done:
            status, done = downloader.next_chunk()
        
        mem.seek(0)
        
        # Ensure filename has proper extension for the MIME type
        if final_mime_type == 'application/pdf' and not filename.lower().endswith('.pdf'):
            filename = f"{filename}.pdf"
        
        print(f"Serving file {filename} with MIME type {final_mime_type} for Twilio")
        
        # Return file with proper headers for Twilio
        response = send_file(
            mem, 
            mimetype=final_mime_type,
            download_name=filename,
            as_attachment=False
        )
        
        # Add additional headers for better compatibility
        response.headers['Content-Type'] = final_mime_type
        response.headers['Cache-Control'] = 'public, max-age=3600'  # Cache for 1 hour
        response.headers['Access-Control-Allow-Origin'] = '*'  # Allow cross-origin access
        
        return response
        
    except Exception as e:
        print(f"Error serving drive media {file_id}/{filename}: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'error': 'Failed to serve media file',
            'message': str(e),
            'file_id': file_id,
            'filename': filename
        }), 500


@whatsapp_bp.route('/media/health', methods=['GET'])
def media_health_check():
    """Health check endpoint to verify media serving is working"""
    try:
        from dynamic_config import Config
        return jsonify({
            'status': 'healthy',
            'base_url': Config.APP_BASE_URL,
            'https_enabled': Config.APP_BASE_URL.startswith('https://'),
            'drive_service': get_drive_service() is not None,
            'message': 'Media serving endpoint is operational'
        })
    except Exception as e:
        return jsonify({
            'status': 'unhealthy',
            'error': str(e)
        }), 500


================================================
FILE: static/dropdown_manager.js
================================================
/**
 * Dropdown Manager - Local Storage Utility for Insurance Companies and Agent Names
 * Manages dropdown lists locally on the PC without storing in database
 */

class DropdownManager {
    constructor(storageKey, defaultItems = []) {
        this.storageKey = storageKey;
        this.defaultItems = defaultItems;
    }

    /**
     * Get all items from local storage
     */
    getItems() {
        try {
            const stored = localStorage.getItem(this.storageKey);
            if (stored) {
                const items = JSON.parse(stored);
                return [...new Set([...this.defaultItems, ...items])].sort();
            }
            return this.defaultItems;
        } catch (error) {
            console.error(`Error loading items for ${this.storageKey}:`, error);
            return this.defaultItems;
        }
    }

    /**
     * Add a new item to local storage
     */
    addItem(itemName) {
        if (!itemName || typeof itemName !== 'string') {
            return false;
        }

        const trimmed = itemName.trim();
        if (trimmed.length === 0) {
            return false;
        }

        try {
            const items = this.getItems();
            if (!items.includes(trimmed)) {
                const stored = localStorage.getItem(this.storageKey);
                const existing = stored ? JSON.parse(stored) : [];
                existing.push(trimmed);
                localStorage.setItem(this.storageKey, JSON.stringify(existing));
                return true;
            }
            return false; // Already exists
        } catch (error) {
            console.error(`Error saving item for ${this.storageKey}:`, error);
            return false;
        }
    }

    /**
     * Remove an item from local storage
     */
    removeItem(itemName) {
        if (!itemName) return false;

        const trimmed = itemName.trim();
        
        // Don't allow removal of default items
        if (this.defaultItems.includes(trimmed)) {
            return false;
        }

        try {
            const stored = localStorage.getItem(this.storageKey);
            if (stored) {
                const items = JSON.parse(stored);
                const filtered = items.filter(item => item !== trimmed);
                localStorage.setItem(this.storageKey, JSON.stringify(filtered));
                return true;
            }
            return false;
        } catch (error) {
            console.error(`Error removing item for ${this.storageKey}:`, error);
            return false;
        }
    }

    /**
     * Populate a select element with options
     */
    populateSelect(selectElement, selectedValue = '', placeholder = 'Select...') {
        if (!selectElement) return;

        const items = this.getItems();
        
        // Clear existing options except placeholder
        selectElement.innerHTML = `<option value="">${placeholder}</option>`;
        
        // Add items
        items.forEach(item => {
            const option = document.createElement('option');
            option.value = item;
            option.textContent = item;
            if (item === selectedValue) {
                option.selected = true;
            }
            selectElement.appendChild(option);
        });

        // Add "Add New" option
        const addNewOption = document.createElement('option');
        addNewOption.value = '__ADD_NEW__';
        addNewOption.textContent = '+ Add New';
        addNewOption.style.fontStyle = 'italic';
        addNewOption.style.color = '#666';
        selectElement.appendChild(addNewOption);
    }

    /**
     * Handle "Add New" selection in dropdown
     */
    handleAddNewSelection(selectElement, callback, promptText = 'Enter new item:') {
        if (!selectElement) return;

        selectElement.addEventListener('change', (e) => {
            if (e.target.value === '__ADD_NEW__') {
                const newItem = prompt(promptText);
                if (newItem) {
                    const added = this.addItem(newItem);
                    if (added) {
                        // Repopulate the select with new item selected
                        this.populateSelect(selectElement, newItem.trim(), selectElement.querySelector('option').textContent);
                        if (callback) callback(newItem.trim());
                    } else {
                        alert('Item already exists or invalid name');
                        selectElement.value = ''; // Reset selection
                    }
                } else {
                    selectElement.value = ''; // Reset selection if cancelled
                }
            } else if (callback) {
                callback(e.target.value);
            }
        });
    }
}

// Create managers for insurance companies and agent names
window.insuranceCompanyManager = new DropdownManager('insurance_companies', [
    'Bajaj General Insurance Limited',
    'Tata AIG General Insurance Co Ltd',
    'ICICI Lombard General Insurance Co Ltd',
    'Generali Central Insurance Co Ltd',
    'The Oriental Insurance Co Ltd',
    'United India Insurance Co Ltd',
    'HDFC Ergo General Insurance Co Ltd',
    'Go Digit'
]);

window.agentNameManager = new DropdownManager('agent_names', [
    'Sameer Shah',
    'Sweta Shah',
    'Dhruv Shah',
    'Vikas Mhatre',
    'Fortune Five',
    'Jaimini Thakkar',
    'C.H.Ramchandani'
]);

/**
 * Initialize insurance company dropdown
 */
function initializeInsuranceCompanyDropdown(selectId, onChangeCallback) {
    const selectElement = document.getElementById(selectId);
    if (!selectElement) {
        console.error(`Insurance company select element with ID '${selectId}' not found`);
        return;
    }

    // Convert input to select if needed
    if (selectElement.tagName.toLowerCase() === 'input') {
        const newSelect = document.createElement('select');
        newSelect.id = selectElement.id;
        newSelect.name = selectElement.name;
        newSelect.className = selectElement.className;
        newSelect.required = selectElement.required;
        
        // Copy attributes
        Array.from(selectElement.attributes).forEach(attr => {
            if (!['type', 'placeholder'].includes(attr.name)) {
                newSelect.setAttribute(attr.name, attr.value);
            }
        });
        
        selectElement.parentNode.replaceChild(newSelect, selectElement);
    }

    const finalSelectElement = document.getElementById(selectId);
    
    // Populate and setup event handlers
    window.insuranceCompanyManager.populateSelect(finalSelectElement, '', 'Select insurance company...');
    window.insuranceCompanyManager.handleAddNewSelection(finalSelectElement, onChangeCallback, 'Enter new insurance company name:');
    
    return finalSelectElement;
}

/**
 * Initialize agent name dropdown
 */
function initializeAgentNameDropdown(selectId, onChangeCallback) {
    const selectElement = document.getElementById(selectId);
    if (!selectElement) {
        console.error(`Agent name select element with ID '${selectId}' not found`);
        return;
    }

    // Convert input to select if needed
    if (selectElement.tagName.toLowerCase() === 'input') {
        const newSelect = document.createElement('select');
        newSelect.id = selectElement.id;
        newSelect.name = selectElement.name;
        newSelect.className = selectElement.className;
        newSelect.required = selectElement.required;
        
        // Copy attributes
        Array.from(selectElement.attributes).forEach(attr => {
            if (!['type', 'placeholder'].includes(attr.name)) {
                newSelect.setAttribute(attr.name, attr.value);
            }
        });
        
        selectElement.parentNode.replaceChild(newSelect, selectElement);
    }

    const finalSelectElement = document.getElementById(selectId);
    
    // Populate and setup event handlers
    window.agentNameManager.populateSelect(finalSelectElement, '', 'Select agent name...');
    window.agentNameManager.handleAddNewSelection(finalSelectElement, onChangeCallback, 'Enter new agent name:');
    
    return finalSelectElement;
}



================================================
FILE: static/product_manager.js
================================================
/**
 * Product Manager - Local Storage Utility for Insurance Product Names
 * Manages product names locally on the PC without storing in database
 */

class ProductManager {
    constructor() {
        this.storageKey = 'insurance_product_names';
        this.defaultProducts = [
            'HEALTH INSURANCE',
            'MOTOR INSURANCE', 
            'FACTORY INSURANCE',
            'LIFE INSURANCE',
            'TRAVEL INSURANCE',
            'BHARAT GRIHA RAKSHA',
            'BHARAT SOOKSHMA UDYAM SURAKSHA',
            'BHARAT LAGHU UDYAM SURAKSHA',
            'BHARAT GRIHA RAKSHA POLICY - LTD'
        ];
    }

    /**
     * Get all product names from local storage
     */
    getProducts() {
        try {
            const stored = localStorage.getItem(this.storageKey);
            if (stored) {
                const products = JSON.parse(stored);
                return [...new Set([...this.defaultProducts, ...products])].sort();
            }
            return this.defaultProducts;
        } catch (error) {
            console.error('Error loading products:', error);
            return this.defaultProducts;
        }
    }

    /**
     * Add a new product name to local storage
     */
    addProduct(productName) {
        if (!productName || typeof productName !== 'string') {
            return false;
        }

        const trimmed = productName.trim().toUpperCase();
        if (trimmed.length === 0) {
            return false;
        }

        try {
            const products = this.getProducts();
            if (!products.includes(trimmed)) {
                const stored = localStorage.getItem(this.storageKey);
                const existing = stored ? JSON.parse(stored) : [];
                existing.push(trimmed);
                localStorage.setItem(this.storageKey, JSON.stringify(existing));
                return true;
            }
            return false; // Already exists
        } catch (error) {
            console.error('Error saving product:', error);
            return false;
        }
    }

    /**
     * Remove a product name from local storage
     */
    removeProduct(productName) {
        if (!productName) return false;

        const trimmed = productName.trim().toUpperCase();
        
        // Don't allow removal of default products
        if (this.defaultProducts.includes(trimmed)) {
            return false;
        }

        try {
            const stored = localStorage.getItem(this.storageKey);
            if (stored) {
                const products = JSON.parse(stored);
                const filtered = products.filter(p => p !== trimmed);
                localStorage.setItem(this.storageKey, JSON.stringify(filtered));
                return true;
            }
            return false;
        } catch (error) {
            console.error('Error removing product:', error);
            return false;
        }
    }

    /**
     * Check if a product requires additional fields
     */
    requiresAdditionalFields(productName) {
        if (!productName) return false;
        
        const trimmed = productName.trim().toUpperCase();
        return trimmed.includes('HEALTH') || 
               trimmed.includes('FACTORY') ||
               trimmed.includes('BHARAT GRIHA RAKSHA') ||
               trimmed.includes('BHARAT SOOKSHMA UDYAM SURAKSHA') ||
               trimmed.includes('BHARAT LAGHU UDYAM SURAKSHA');
    }

    /**
     * Get the type of additional fields required
     */
    getAdditionalFieldsType(productName) {
        if (!productName) return null;
        
        const trimmed = productName.trim().toUpperCase();
        if (trimmed.includes('HEALTH')) {
            return 'health';
        } else if (trimmed.includes('FACTORY') || 
                   trimmed.includes('BHARAT GRIHA RAKSHA') ||
                   trimmed.includes('BHARAT SOOKSHMA UDYAM SURAKSHA') ||
                   trimmed.includes('BHARAT LAGHU UDYAM SURAKSHA')) {
            return 'factory';
        }
        return null;
    }

    /**
     * Populate a select element with product options
     */
    populateSelect(selectElement, selectedValue = '') {
        if (!selectElement) return;

        const products = this.getProducts();
        
        // Clear existing options except placeholder
        selectElement.innerHTML = '<option value="">Select product type...</option>';
        
        // Add products
        products.forEach(product => {
            const option = document.createElement('option');
            option.value = product;
            option.textContent = product;
            if (product === selectedValue) {
                option.selected = true;
            }
            selectElement.appendChild(option);
        });

        // Add "Add New" option
        const addNewOption = document.createElement('option');
        addNewOption.value = '__ADD_NEW__';
        addNewOption.textContent = '+ Add New Product Type';
        addNewOption.style.fontStyle = 'italic';
        addNewOption.style.color = '#666';
        selectElement.appendChild(addNewOption);
    }

    /**
     * Handle "Add New" selection in dropdown
     */
    handleAddNewSelection(selectElement, callback) {
        if (!selectElement) return;

        selectElement.addEventListener('change', (e) => {
            if (e.target.value === '__ADD_NEW__') {
                const newProduct = prompt('Enter new product type:');
                if (newProduct) {
                    const added = this.addProduct(newProduct);
                    if (added) {
                        // Repopulate the select with new product selected
                        this.populateSelect(selectElement, newProduct.trim().toUpperCase());
                        if (callback) callback(newProduct.trim().toUpperCase());
                    } else {
                        alert('Product already exists or invalid name');
                        selectElement.value = ''; // Reset selection
                    }
                } else {
                    selectElement.value = ''; // Reset selection if cancelled
                }
            } else if (callback) {
                callback(e.target.value);
            }
        });
    }
}

// Create global instance
window.productManager = new ProductManager();

/**
 * Initialize product dropdown for a form
 */
function initializeProductDropdown(selectId, onChangeCallback) {
    const selectElement = document.getElementById(selectId);
    if (!selectElement) {
        console.error(`Product select element with ID '${selectId}' not found`);
        return;
    }

    // Convert input to select if needed
    if (selectElement.tagName.toLowerCase() === 'input') {
        const newSelect = document.createElement('select');
        newSelect.id = selectElement.id;
        newSelect.name = selectElement.name;
        newSelect.className = selectElement.className;
        newSelect.required = selectElement.required;
        
        // Copy attributes
        Array.from(selectElement.attributes).forEach(attr => {
            if (!['type', 'placeholder'].includes(attr.name)) {
                newSelect.setAttribute(attr.name, attr.value);
            }
        });
        
        selectElement.parentNode.replaceChild(newSelect, selectElement);
        selectElement = newSelect;
    }

    // Populate and setup event handlers
    window.productManager.populateSelect(selectElement);
    window.productManager.handleAddNewSelection(selectElement, onChangeCallback);
    
    return selectElement;
}



================================================
FILE: static/styles.css
================================================
/* Insta Insurance Professional UI Framework */

:root {
    /* Primary Colors - Blue and White Theme */
    --primary-blue: #1e40af;
    --primary-blue-light: #3b82f6;
    --primary-blue-dark: #1e3a8a;
    --secondary-blue: #dbeafe;
    --accent-blue: #60a5fa;
    
    /* Neutral Colors */
    --white: #ffffff;
    --gray-50: #f9fafb;
    --gray-100: #f3f4f6;
    --gray-200: #e5e7eb;
    --gray-300: #d1d5db;
    --gray-400: #9ca3af;
    --gray-500: #6b7280;
    --gray-600: #4b5563;
    --gray-700: #374151;
    --gray-800: #1f2937;
    --gray-900: #111827;
    
    /* Status Colors */
    --success: #10b981;
    --success-light: #d1fae5;
    --warning: #f59e0b;
    --warning-light: #fef3c7;
    --danger: #ef4444;
    --danger-light: #fee2e2;
    --info: #3b82f6;
    --info-light: #dbeafe;
    
    /* Typography */
    --font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    --font-size-xs: 0.75rem;
    --font-size-sm: 0.875rem;
    --font-size-base: 1rem;
    --font-size-lg: 1.125rem;
    --font-size-xl: 1.25rem;
    --font-size-2xl: 1.5rem;
    --font-size-3xl: 1.875rem;
    
    /* Spacing */
    --spacing-1: 0.25rem;
    --spacing-2: 0.5rem;
    --spacing-3: 0.75rem;
    --spacing-4: 1rem;
    --spacing-5: 1.25rem;
    --spacing-6: 1.5rem;
    --spacing-8: 2rem;
    --spacing-10: 2.5rem;
    --spacing-12: 3rem;
    --spacing-16: 4rem;
    
    /* Border Radius */
    --radius-sm: 0.375rem;
    --radius-md: 0.5rem;
    --radius-lg: 0.75rem;
    --radius-xl: 1rem;
    
    /* Shadows */
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

/* Base Styles */
* {
    box-sizing: border-box;
}

body {
    font-family: var(--font-family);
    background-color: var(--gray-50);
    color: var(--gray-800);
    line-height: 1.6;
    margin: 0;
    padding: 0;
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
    font-weight: 600;
    color: var(--gray-900);
    margin: 0 0 var(--spacing-4) 0;
}

h1 { font-size: var(--font-size-3xl); }
h2 { font-size: var(--font-size-2xl); }
h3 { font-size: var(--font-size-xl); }
h4 { font-size: var(--font-size-lg); }
h5 { font-size: var(--font-size-base); }
h6 { font-size: var(--font-size-sm); }

p {
    margin: 0 0 var(--spacing-4) 0;
    color: var(--gray-600);
}

/* Navigation */
.navbar {
    background: var(--white) !important;
    box-shadow: var(--shadow-sm);
    padding: var(--spacing-4) 0;
    border-bottom: 1px solid var(--gray-200);
}

.navbar-brand {
    color: var(--primary-blue) !important;
    font-weight: 700;
    font-size: var(--font-size-xl);
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: var(--spacing-3);
}

.navbar-brand img {
    height: 40px;
    width: auto;
}

.navbar-nav {
    gap: var(--spacing-2);
}

/* Buttons */
.btn {
    font-weight: 500;
    border-radius: var(--radius-md);
    padding: var(--spacing-3) var(--spacing-6);
    border: none;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-2);
    transition: all 0.2s ease;
    font-size: var(--font-size-sm);
}

.btn-primary {
    background: var(--primary-blue);
    color: var(--white);
}

.btn-primary:hover {
    background: var(--primary-blue-dark);
    color: var(--white);
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
}

.btn-secondary {
    background: var(--gray-100);
    color: var(--gray-700);
    border: 1px solid var(--gray-300);
}

.btn-secondary:hover {
    background: var(--gray-200);
    color: var(--gray-800);
}

.btn-outline {
    background: var(--white);
    color: var(--gray-600);
    border: 1px solid var(--gray-300);
}

.btn-outline:hover {
    background: var(--gray-50);
    color: var(--gray-700);
    border-color: var(--gray-400);
}

.btn-success {
    background: var(--success);
    color: var(--white);
}

.btn-success:hover {
    background: #059669;
    color: var(--white);
}

.btn-warning {
    background: var(--warning);
    color: var(--white);
}

.btn-warning:hover {
    background: #d97706;
    color: var(--white);
}

.btn-danger {
    background: var(--danger);
    color: var(--white);
}

.btn-danger:hover {
    background: #dc2626;
    color: var(--white);
}

.btn-sm {
    padding: var(--spacing-2) var(--spacing-4);
    font-size: var(--font-size-xs);
}

.btn-lg {
    padding: var(--spacing-4) var(--spacing-8);
    font-size: var(--font-size-lg);
}

/* Cards */
.card {
    background: var(--white);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--gray-200);
    overflow: hidden;
}

.card-header {
    background: var(--gray-50);
    padding: var(--spacing-6);
    border-bottom: 1px solid var(--gray-200);
}

.card-body {
    padding: var(--spacing-6);
}

.card-footer {
    background: var(--gray-50);
    padding: var(--spacing-4) var(--spacing-6);
    border-top: 1px solid var(--gray-200);
}

/* Content Sections */
.content-header {
    background: var(--white);
    padding: var(--spacing-8);
    border-radius: var(--radius-lg);
    margin-bottom: var(--spacing-6);
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--gray-200);
}

.content-header h1,
.content-header h2,
.content-header h3,
.content-header h4 {
    margin: 0;
    color: var(--gray-900);
}

.page-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: var(--spacing-6);
}

/* Forms */
.form-container {
    max-width: 800px;
    margin: var(--spacing-10) auto;
    background: var(--white);
    border-radius: var(--radius-lg);
    padding: var(--spacing-10);
    box-shadow: var(--shadow-md);
    border: 1px solid var(--gray-200);
}

.form-label {
    font-weight: 500;
    color: var(--gray-700);
    margin-bottom: var(--spacing-2);
    font-size: var(--font-size-sm);
}

.form-control,
.form-select {
    border: 1px solid var(--gray-300);
    border-radius: var(--radius-md);
    padding: var(--spacing-3) var(--spacing-4);
    font-size: var(--font-size-base);
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
    background: var(--white);
}

.form-control:focus,
.form-select:focus {
    outline: none;
    border-color: var(--primary-blue);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.form-control::placeholder {
    color: var(--gray-400);
}

/* Tables */
.table-container {
    background: var(--white);
    border-radius: var(--radius-lg);
    padding: var(--spacing-6);
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--gray-200);
    overflow: hidden;
}

.table {
    margin: 0;
    font-size: var(--font-size-sm);
}

.table thead th {
    background: var(--gray-50);
    color: var(--gray-600);
    font-weight: 600;
    font-size: var(--font-size-xs);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    border: none;
    padding: var(--spacing-4);
    white-space: nowrap;
}

.table tbody td {
    padding: var(--spacing-4);
    vertical-align: middle;
    border-color: var(--gray-200);
    color: var(--gray-700);
}

.table tbody tr:hover {
    background-color: var(--gray-50);
}

.table tbody tr:last-child td {
    border-bottom: none;
}

/* Badges */
.badge {
    padding: var(--spacing-1) var(--spacing-3);
    border-radius: var(--radius-sm);
    font-weight: 500;
    font-size: var(--font-size-xs);
    text-transform: uppercase;
    letter-spacing: 0.025em;
}

.badge-success {
    background: var(--success-light);
    color: #065f46;
}

.badge-warning {
    background: var(--warning-light);
    color: #92400e;
}

.badge-danger {
    background: var(--danger-light);
    color: #991b1b;
}

.badge-info {
    background: var(--info-light);
    color: #1e40af;
}

.badge-primary {
    background: var(--secondary-blue);
    color: var(--primary-blue);
}

/* Alerts */
.alert {
    border-radius: var(--radius-md);
    border: none;
    padding: var(--spacing-4);
    margin-bottom: var(--spacing-4);
}

.alert-success {
    background: var(--success-light);
    color: #065f46;
    border-left: 4px solid var(--success);
}

.alert-warning {
    background: var(--warning-light);
    color: #92400e;
    border-left: 4px solid var(--warning);
}

.alert-danger {
    background: var(--danger-light);
    color: #991b1b;
    border-left: 4px solid var(--danger);
}

.alert-info {
    background: var(--info-light);
    color: #1e40af;
    border-left: 4px solid var(--info);
}

/* Modals */
.modal-content {
    border-radius: var(--radius-lg);
    border: none;
    box-shadow: var(--shadow-xl);
}

.modal-header {
    border-bottom: 1px solid var(--gray-200);
    padding: var(--spacing-6);
    background: var(--gray-50);
}

.modal-body {
    padding: var(--spacing-6);
}

.modal-footer {
    border-top: 1px solid var(--gray-200);
    padding: var(--spacing-4) var(--spacing-6);
    background: var(--gray-50);
}

/* Special Components */
.whatsapp-btn {
    background: #25D366;
    color: var(--white);
    border: none;
    padding: var(--spacing-2) var(--spacing-3);
    border-radius: var(--radius-sm);
    font-size: var(--font-size-xs);
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-1);
    text-decoration: none;
    transition: background-color 0.2s ease;
}

.whatsapp-btn:hover {
    background: #128C7E;
    color: var(--white);
}

.paid-btn {
    background: var(--success);
    color: var(--white);
    border: none;
    padding: var(--spacing-2) var(--spacing-3);
    border-radius: var(--radius-sm);
    font-size: var(--font-size-xs);
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-1);
    text-decoration: none;
    transition: background-color 0.2s ease;
}

.paid-btn:hover {
    background: #059669;
    color: var(--white);
}

/* Empty States */
.empty-state {
    text-align: center;
    padding: var(--spacing-16) var(--spacing-8);
    color: var(--gray-500);
}

.empty-state svg {
    width: 64px;
    height: 64px;
    margin-bottom: var(--spacing-4);
    opacity: 0.4;
    color: var(--gray-400);
}

/* Loading States */
.loading {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-2);
}

.spinner {
    width: 16px;
    height: 16px;
    border: 2px solid var(--gray-300);
    border-top: 2px solid var(--primary-blue);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Responsive Design */
@media (max-width: 768px) {
    .page-container {
        padding: var(--spacing-4);
    }
    
    .form-container {
        margin: var(--spacing-6) auto;
        padding: var(--spacing-6);
    }
    
    .content-header {
        padding: var(--spacing-6);
    }
    
    .table-container {
        padding: var(--spacing-4);
        overflow-x: auto;
    }
    
    .navbar-nav {
        flex-direction: column;
        gap: var(--spacing-1);
    }
    
    .btn {
        width: 100%;
        justify-content: center;
    }
}

/* Utility Classes */
.text-center { text-align: center; }
.text-left { text-align: left; }
.text-right { text-align: right; }

.d-flex { display: flex; }
.d-block { display: block; }
.d-none { display: none; }

.justify-content-between { justify-content: space-between; }
.justify-content-center { justify-content: center; }
.align-items-center { align-items: center; }

.gap-2 { gap: var(--spacing-2); }
.gap-3 { gap: var(--spacing-3); }
.gap-4 { gap: var(--spacing-4); }

.mb-0 { margin-bottom: 0; }
.mb-2 { margin-bottom: var(--spacing-2); }
.mb-3 { margin-bottom: var(--spacing-3); }
.mb-4 { margin-bottom: var(--spacing-4); }
.mb-6 { margin-bottom: var(--spacing-6); }

.mt-0 { margin-top: 0; }
.mt-2 { margin-top: var(--spacing-2); }
.mt-3 { margin-top: var(--spacing-3); }
.mt-4 { margin-top: var(--spacing-4); }
.mt-6 { margin-top: var(--spacing-6); }

.w-100 { width: 100%; }
.h-100 { height: 100%; }

/* Professional Enhancements */
.professional-shadow {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

.hover-lift {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.hover-lift:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

.border-gradient {
    border: 1px solid transparent;
    background: linear-gradient(var(--white), var(--white)) padding-box,
                linear-gradient(135deg, var(--primary-blue), var(--accent-blue)) border-box;
}

/* Status Indicators */
.status-indicator {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-2);
    padding: var(--spacing-1) var(--spacing-3);
    border-radius: var(--radius-sm);
    font-size: var(--font-size-xs);
    font-weight: 500;
}

.status-active {
    background: var(--success-light);
    color: #065f46;
}

.status-pending {
    background: var(--warning-light);
    color: #92400e;
}

.status-expired {
    background: var(--danger-light);
    color: #991b1b;
}

/* Action Buttons Container */
.action-buttons {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
}

@media (min-width: 768px) {
    .action-buttons {
        flex-direction: row;
        gap: var(--spacing-2);
    }
}



================================================
FILE: static/js/performance.js
================================================
/**
 * Performance Optimization Script for Insurance Portal
 * Optimized for multi-user concurrent access
 */

// Performance monitoring
const performanceMonitor = {
    startTime: performance.now(),
    metrics: {},
    
    // Track page load performance
    trackPageLoad() {
        window.addEventListener('load', () => {
            const loadTime = performance.now() - this.startTime;
            this.metrics.pageLoadTime = loadTime;
            console.log(`Page loaded in ${loadTime.toFixed(2)}ms`);
            
            // Send to server if needed (optional)
            if (loadTime > 3000) {
                console.warn('Slow page load detected:', loadTime);
            }
        });
    },
    
    // Track AJAX request performance
    trackAjaxPerformance() {
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
            const startTime = performance.now();
            return originalFetch.apply(this, args).then(response => {
                const endTime = performance.now();
                const duration = endTime - startTime;
                console.log(`API call to ${args[0]} took ${duration.toFixed(2)}ms`);
                return response;
            });
        };
    }
};

// Request queue for handling concurrent requests
const requestQueue = {
    activeRequests: new Map(),
    maxConcurrentRequests: 5,
    
    // Add request to queue with deduplication
    async enqueue(url, options = {}) {
        const requestKey = `${options.method || 'GET'}_${url}`;
        
        // If same request is already in progress, return that promise
        if (this.activeRequests.has(requestKey)) {
            console.log('Deduplicating request:', requestKey);
            return this.activeRequests.get(requestKey);
        }
        
        // Wait if too many concurrent requests
        while (this.activeRequests.size >= this.maxConcurrentRequests) {
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        // Create and track the request
        const requestPromise = fetch(url, options)
            .finally(() => {
                this.activeRequests.delete(requestKey);
            });
        
        this.activeRequests.set(requestKey, requestPromise);
        return requestPromise;
    }
};

// Optimized form submission
function optimizedFormSubmit(formElement, options = {}) {
    const formData = new FormData(formElement);
    const submitButton = formElement.querySelector('button[type="submit"]');
    
    // Disable button to prevent double submission
    if (submitButton) {
        submitButton.disabled = true;
        const originalText = submitButton.textContent;
        submitButton.textContent = options.loadingText || 'Processing...';
        
        // Re-enable after timeout as fallback
        setTimeout(() => {
            submitButton.disabled = false;
            submitButton.textContent = originalText;
        }, 30000); // 30 second timeout
    }
    
    // Use request queue for submission
    return requestQueue.enqueue(formElement.action, {
        method: formElement.method || 'POST',
        body: formData,
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    }).then(response => {
        // Re-enable button on completion
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = originalText;
        }
        return response;
    }).catch(error => {
        // Re-enable button on error
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = originalText;
        }
        throw error;
    });
}

// Debounced search function
function createDebouncedSearch(searchFunction, delay = 300) {
    let timeoutId;
    return function(...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => searchFunction.apply(this, args), delay);
    };
}

// Lazy loading for images and content
const lazyLoader = {
    observer: null,
    
    init() {
        if ('IntersectionObserver' in window) {
            this.observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        this.loadElement(entry.target);
                        this.observer.unobserve(entry.target);
                    }
                });
            }, {
                rootMargin: '50px'
            });
            
            // Observe all lazy elements
            document.querySelectorAll('[data-lazy]').forEach(el => {
                this.observer.observe(el);
            });
        }
    },
    
    loadElement(element) {
        if (element.dataset.src) {
            element.src = element.dataset.src;
            element.removeAttribute('data-src');
        }
        if (element.dataset.lazy === 'content') {
            // Load content via AJAX if needed
            const url = element.dataset.url;
            if (url) {
                requestQueue.enqueue(url)
                    .then(response => response.text())
                    .then(html => {
                        element.innerHTML = html;
                    });
            }
        }
    }
};

// Cache management for API responses
const apiCache = {
    cache: new Map(),
    maxAge: 5 * 60 * 1000, // 5 minutes
    
    get(key) {
        const item = this.cache.get(key);
        if (item && Date.now() - item.timestamp < this.maxAge) {
            return item.data;
        }
        this.cache.delete(key);
        return null;
    },
    
    set(key, data) {
        this.cache.set(key, {
            data: data,
            timestamp: Date.now()
        });
        
        // Clean old entries
        if (this.cache.size > 100) {
            const oldestKey = this.cache.keys().next().value;
            this.cache.delete(oldestKey);
        }
    }
};

// Optimized API call function
async function cachedApiCall(url, options = {}) {
    const cacheKey = `${options.method || 'GET'}_${url}`;
    
    // Return cached data for GET requests
    if (!options.method || options.method === 'GET') {
        const cached = apiCache.get(cacheKey);
        if (cached) {
            console.log('Returning cached data for:', url);
            return cached;
        }
    }
    
    try {
        const response = await requestQueue.enqueue(url, options);
        const data = await response.json();
        
        // Cache successful GET responses
        if (response.ok && (!options.method || options.method === 'GET')) {
            apiCache.set(cacheKey, data);
        }
        
        return data;
    } catch (error) {
        console.error('API call failed:', url, error);
        throw error;
    }
}

// Initialize performance optimizations
document.addEventListener('DOMContentLoaded', function() {
    // Start performance monitoring
    performanceMonitor.trackPageLoad();
    performanceMonitor.trackAjaxPerformance();
    
    // Initialize lazy loading
    lazyLoader.init();
    
    // Optimize all forms
    document.querySelectorAll('form').forEach(form => {
        form.addEventListener('submit', function(e) {
            if (form.dataset.optimized !== 'true') {
                e.preventDefault();
                optimizedFormSubmit(form)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Handle success
                            if (data.redirect) {
                                window.location.href = data.redirect;
                            } else if (data.message) {
                                showAlert(data.message, 'success');
                            }
                        } else {
                            showAlert(data.message || 'An error occurred', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Form submission error:', error);
                        showAlert('Network error. Please try again.', 'error');
                    });
            }
        });
        form.dataset.optimized = 'true';
    });
    
    // Add loading states to buttons
    document.querySelectorAll('button[type="submit"]').forEach(button => {
        button.addEventListener('click', function() {
            if (!button.disabled) {
                button.classList.add('loading');
            }
        });
    });
});

// Export functions for global use
window.performanceOptimizations = {
    cachedApiCall,
    optimizedFormSubmit,
    createDebouncedSearch,
    requestQueue,
    apiCache
};



================================================
FILE: templates/add_claim.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Claim - Insta Insurance Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <a href="{{ url_for('claims.index') }}" class="btn btn-outline">Back to Claims</a>
        </div>
    </nav>

    <div class="form-container">
        <div class="form-header text-center">
            <h1>Add New Claim</h1>
            <p class="text-muted">Submit a new insurance claim on behalf of a client.</p>
        </div>

        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                <div class="alert alert-{{ 'danger' if category == 'error' else 'info' }} alert-dismissible fade show" role="alert">
                    {% if 'Claim Number:' in message %}
                        <strong><i class="fas fa-check-circle"></i> {{ message.split('Claim Number:')[0] }}</strong>
                        <br><span class="fs-5 fw-bold text-primary">Claim Number: {{ message.split('Claim Number:')[1] }}</span>
                    {% else %}
                        {{ message }}
                    {% endif %}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <form method="POST" enctype="multipart/form-data" id="addClaimForm">
            <!-- Policy Lookup Section -->
            <div class="form-section">
                <h5>1. Find Policy</h5>
                <div class="mb-3">
                    <label for="policy_number" class="form-label">Policy Number <span class="text-danger">*</span></label>
                    <div class="input-group">
                        <input type="text" id="policy_number" name="policy_number" class="form-control" placeholder="Enter policy number to begin" required>
                        <button class="btn btn-outline-primary" type="button" id="lookupPolicyBtn">Find</button>
                    </div>
                    <div class="form-text">This will automatically fetch client and member details.</div>
                </div>

                <div id="policyDetails" style="display:none;" class="alert alert-success">
                    <strong>Client Found:</strong> <span id="clientName"></span>
                </div>

                <div class="mb-3" id="memberSelection" style="display:none;">
                    <label for="member_name" class="form-label">Select Member <span class="text-danger">*</span></label>
                    <select id="member_name" name="member_name" class="form-select" required></select>
                </div>
            </div>

            <!-- Claim Details Section -->
            <div class="form-section" id="claimDetailsSection" style="display:none;">
                <h5>2. Claim Details</h5>
                <div class="mb-3">
                    <label for="claim_number" class="form-label">Claim Number <span class="text-danger">*</span></label>
                    <input type="text" id="claim_number" name="claim_number" class="form-control" placeholder="Enter claim number from insurance company" required>
                    <div class="form-text">Enter the claim number provided by the insurance company.</div>
                </div>
                <div class="mb-3">
                    <label for="claim_type" class="form-label">Type of Claim <span class="text-danger">*</span></label>
                    <select id="claim_type" name="claim_type" class="form-select" required>
                        <option value="CASHLESS">Cashless</option>
                        <option value="REIMBURSEMENT">Reimbursement</option>
                        <option value="PRE-POST">Pre-Post</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="diagnosis" class="form-label">Diagnosis</label>
                    <input type="text" id="diagnosis" name="diagnosis" class="form-control" placeholder="e.g., Viral Fever, Surgery">
                </div>
                <div class="mb-3">
                    <label for="hospital_name" class="form-label">Name of Hospital</label>
                    <input type="text" id="hospital_name" name="hospital_name" class="form-control">
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="admission_date" class="form-label">Date of Admission</label>
                        <input type="text" id="admission_date" name="admission_date" class="form-control date-picker" placeholder="DD/MM/YYYY">
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="discharge_date" class="form-label">Date of Discharge</label>
                        <input type="text" id="discharge_date" name="discharge_date" class="form-control date-picker" placeholder="DD/MM/YYYY">
                    </div>
                </div>
                <div class="mb-3">
                    <label for="claimed_amount" class="form-label">Claimed Amount</label>
                    <div class="input-group">
                        <span class="input-group-text">₹</span>
                        <input type="number" step="0.01" id="claimed_amount" name="claimed_amount" class="form-control" placeholder="0.00">
                    </div>
                </div>
            </div>
            
            <!-- Document Uploads Section -->
            <div class="form-section" id="documentsSection" style="display:none;">
                <h5>3. Upload Documents</h5>
                <div id="documentsContainer">
                    <div class="document-item mb-3 border p-3 rounded">
                        <div class="row g-3 align-items-end">
                            <div class="col-md-5">
                                <label class="form-label">Document Type</label>
                                <div class="input-group">
                                    <select name="document_types[]" class="form-select document-type-select">
                                        {% for doc_type in document_types %}
                                        <option value="{{ doc_type }}">{{ doc_type.replace('_', ' ').title() }}</option>
                                        {% endfor %}
                                        <option value="OTHER">Other (Custom)</option>
                                    </select>
                                    <button class="btn btn-outline-secondary" type="button" onclick="addCustomDocType(this)" title="Add Custom Type">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>
                                    </button>
                                </div>
                                <input type="text" class="form-control mt-2 custom-doc-type" name="custom_document_types[]" placeholder="Enter custom document type" style="display:none;">
                            </div>
                            <div class="col-md-7">
                                <label class="form-label">File</label>
                                <input type="file" name="claim_documents[]" class="form-control">
                            </div>
                        </div>
                    </div>
                </div>
                <button type="button" id="addDocumentBtn" class="btn btn-sm btn-secondary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-1"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>
                    Add Another Document
                </button>
            </div>
            
            <div class="d-flex gap-2 mt-4">
                <button type="submit" id="submitBtn" class="btn btn-primary" disabled>Submit Claim</button>
                <a href="{{ url_for('claims.index') }}" class="btn btn-outline">Cancel</a>
            </div>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            flatpickr('.date-picker', {
                dateFormat: 'd/m/Y',
                allowInput: true,  // Allow manual typing
                clickOpens: true,  // Still allow clicking to open calendar
                altInput: false,   // Don't use alternative input
                parseDate: function(datestr, format) {
                    // Custom date parsing for DD/MM/YYYY format
                    if (datestr.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/)) {
                        const parts = datestr.split('/');
                        return new Date(parts[2], parts[1] - 1, parts[0]);
                    }
                    return null;
                }
            });

            const lookupBtn = document.getElementById('lookupPolicyBtn');
            const policyNumberInput = document.getElementById('policy_number');
            const policyDetailsDiv = document.getElementById('policyDetails');
            const clientNameSpan = document.getElementById('clientName');
            const memberSelectionDiv = document.getElementById('memberSelection');
            const memberSelect = document.getElementById('member_name');
            const claimDetailsSection = document.getElementById('claimDetailsSection');
            const documentsSection = document.getElementById('documentsSection');
            const submitBtn = document.getElementById('submitBtn');

            async function findPolicy() {
                const policyNumber = policyNumberInput.value.trim();
                if (!policyNumber) {
                    alert('Please enter a policy number.');
                    return;
                }
                
                lookupBtn.disabled = true;
                lookupBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Finding...';
                
                try {
                    const response = await fetch(`/claims/api/policy-lookup?policy_number=${encodeURIComponent(policyNumber)}`);
                    const data = await response.json();

                    if (response.ok) {
                        clientNameSpan.textContent = data.client_name;
                        policyDetailsDiv.style.display = 'block';

                        memberSelect.innerHTML = ''; // Clear previous options
                        if (data.members && data.members.length > 0) {
                            data.members.forEach(member => {
                                const option = document.createElement('option');
                                option.value = member;
                                option.textContent = member;
                                memberSelect.appendChild(option);
                            });
                        } else {
                            const option = document.createElement('option');
                            option.textContent = 'No members found for this policy';
                            memberSelect.appendChild(option);
                            memberSelect.disabled = true;
                        }
                        
                        memberSelectionDiv.style.display = 'block';
                        claimDetailsSection.style.display = 'block';
                        documentsSection.style.display = 'block';
                        submitBtn.disabled = false;
                        
                    } else {
                        alert('Error: ' + data.error);
                        policyDetailsDiv.style.display = 'none';
                        memberSelectionDiv.style.display = 'none';
                        claimDetailsSection.style.display = 'none';
                        documentsSection.style.display = 'none';
                        submitBtn.disabled = true;
                    }
                } catch (error) {
                    console.error('Lookup failed:', error);
                    alert('An error occurred while looking up the policy.');
                } finally {
                    lookupBtn.disabled = false;
                    lookupBtn.textContent = 'Find';
                }
            }
            
            lookupBtn.addEventListener('click', findPolicy);
            policyNumberInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    findPolicy();
                }
            });

            document.getElementById('addDocumentBtn').addEventListener('click', function() {
                const container = document.getElementById('documentsContainer');
                const newItem = container.querySelector('.document-item').cloneNode(true);
                newItem.querySelector('input[type="file"]').value = '';
                newItem.querySelector('.custom-doc-type').style.display = 'none';
                newItem.querySelector('.custom-doc-type').value = '';
                newItem.querySelector('.document-type-select').value = newItem.querySelector('.document-type-select').options[0].value;
                
                // Add a remove button to the new item
                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.className = 'btn btn-sm btn-outline-danger mt-2';
                removeBtn.textContent = 'Remove';
                removeBtn.onclick = function() {
                    newItem.remove();
                };
                newItem.querySelector('.align-items-end').appendChild(removeBtn);
                
                container.appendChild(newItem);
            });

            // Handle document type selection changes
            document.addEventListener('change', function(e) {
                if (e.target.classList.contains('document-type-select')) {
                    const customInput = e.target.closest('.document-item').querySelector('.custom-doc-type');
                    if (e.target.value === 'OTHER') {
                        customInput.style.display = 'block';
                        customInput.required = true;
                    } else {
                        customInput.style.display = 'none';
                        customInput.required = false;
                        customInput.value = '';
                    }
                }
            });
        });

        // Function to add custom document type
        async function addCustomDocType(button) {
            const docItem = button.closest('.document-item');
            const customInput = docItem.querySelector('.custom-doc-type');
            const select = docItem.querySelector('.document-type-select');
            
            if (customInput.style.display === 'none') {
                // Show custom input
                customInput.style.display = 'block';
                customInput.focus();
                select.value = 'OTHER';
                return;
            }
            
            const customType = customInput.value.trim().toUpperCase();
            if (!customType) {
                alert('Please enter a custom document type name.');
                return;
            }
            
            try {
                const response = await fetch('/claims/api/add-document-type', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ type_name: customType })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    // Add to all dropdowns
                    const allSelects = document.querySelectorAll('.document-type-select');
                    allSelects.forEach(selectEl => {
                        const newOption = document.createElement('option');
                        newOption.value = customType;
                        newOption.textContent = customType.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase());
                        
                        // Insert before "Other (Custom)" option
                        const otherOption = selectEl.querySelector('option[value="OTHER"]');
                        selectEl.insertBefore(newOption, otherOption);
                    });
                    
                    // Select the new type and hide custom input
                    select.value = customType;
                    customInput.style.display = 'none';
                    customInput.value = '';
                    
                    alert('Custom document type added successfully!');
                } else {
                    alert('Error: ' + data.error);
                }
            } catch (error) {
                console.error('Error adding custom document type:', error);
                alert('Failed to add custom document type.');
            }
        }
    </script>
</body>
</html>


================================================
FILE: templates/add_pending_policy.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Pending Policy - {{ config.PORTAL_TITLE }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="{{ url_for('static', filename='product_manager.js') }}?v=2.0"></script>
    <script src="{{ url_for('static', filename='dropdown_manager.js') }}?v=2.0"></script>
    <style>
        body {
            background-color: #f8f9fa;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }
        .navbar {
            background: white !important;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 16px 0;
        }
        .navbar-brand {
            color: #1a202c !important;
            font-weight: 600;
            font-size: 20px;
        }
        .btn-outline {
            background: white;
            border: 1px solid #e2e8f0;
            color: #4a5568;
            padding: 10px 24px;
            font-weight: 500;
            border-radius: 8px;
        }
        .form-container {
            max-width: 700px;
            margin: 40px auto;
            background: white;
            border-radius: 12px;
            padding: 40px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        }
        .form-container h4 {
            margin-bottom: 32px;
            font-size: 24px;
            font-weight: 600;
            color: #1a202c;
        }
        .form-label {
            font-weight: 500;
            color: #4a5568;
            margin-bottom: 8px;
            font-size: 14px;
        }
        .form-control, .form-select {
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 12px 16px;
            font-size: 15px;
        }
        .btn-primary {
            background: #667eea;
            border: none;
            padding: 12px 32px;
            font-weight: 500;
            border-radius: 8px;
        }
        .customer-type-selector {
            display: flex;
            gap: 12px;
            margin-bottom: 24px;
        }
        .customer-type-btn {
            flex: 1;
            padding: 16px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            background: white;
            cursor: pointer;
            transition: all 0.2s;
            text-align: center;
        }
        .customer-type-btn.active {
            border-color: #667eea;
            background: #f0f4ff;
        }
        #existingCustomerSection, #newCustomerSection {
            display: none;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <a href="{{ url_for('pending_policies.list_pending') }}" class="btn btn-outline">Back</a>
        </div>
    </nav>

    <div class="form-container">
        <div class="form-header">
            <h1>Add Pending Policy</h1>
            <p>Track a new pending policy application</p>
        </div>

        {% with messages = get_flashed_messages() %}
            {% if messages %}
                {% for message in messages %}
                <div class="alert alert-info">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <div class="customer-type-selector">
            <div class="customer-type-btn" id="newCustomerBtn">
                <input type="radio" name="customerType" id="newCustomer" value="new">
                <label for="newCustomer">New Customer</label>
            </div>
            <div class="customer-type-btn" id="existingCustomerBtn">
                <input type="radio" name="customerType" id="existingCustomer" value="existing">
                <label for="existingCustomer">Existing Customer</label>
            </div>
        </div>

        <form action="{{ url_for('pending_policies.add_pending') }}" method="POST" onsubmit="console.log('Form submitted!'); return validatePendingForm()">
            <input type="hidden" name="customer_type" id="customerTypeInput">
            <input type="hidden" name="existing_client_id" id="existing_client_id">
            <input type="hidden" name="existing_member_id" id="existing_member_id">

            <div id="existingCustomerSection">
                <div class="mb-3">
                    <label for="existing_client_select" class="form-label">Select Client</label>
                    <select id="existing_client_select" class="form-select">
                        <option value="">Choose a client...</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="existing_member_select" class="form-label">Select Member (optional)</label>
                    <select id="existing_member_select" class="form-select">
                        <option value="">Choose a member...</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="new_member_name" class="form-label">Or add new member</label>
                    <input type="text" id="new_member_name" name="new_member_name" class="form-control" placeholder="Enter new member name">
                </div>
            </div>

            <div id="newCustomerSection">
                <div class="mb-3">
                    <label for="customer_name" class="form-label">Customer Name</label>
                    <input type="text" name="customer_name" id="customer_name" class="form-control">
                </div>
                <div class="mb-3">
                    <label for="client_prefix" class="form-label">Client Prefix</label>
                    <input type="text" name="client_prefix" id="client_prefix" class="form-control" placeholder="e.g., DS" maxlength="10" style="text-transform: uppercase;">
                    <small class="text-muted">2-3 letter code for auto-generating client ID (e.g., DS01)</small>
                </div>
                <div class="mb-3">
                    <label for="member_name" class="form-label">Member Name (optional)</label>
                    <input type="text" name="member_name" id="member_name" class="form-control" placeholder="If different from client name">
                </div>
                <div class="mb-3">
                    <label for="customer_email" class="form-label">Customer Email</label>
                    <input type="email" name="customer_email" id="customer_email" class="form-control">
                </div>
                <div class="mb-3">
                    <label for="customer_phone" class="form-label">Customer Phone</label>
                    <input type="tel" name="customer_phone" id="customer_phone" class="form-control">
                </div>
            </div>

            <div class="mb-3">
                <label for="insurance_company" class="form-label">Insurance Company</label>
                <select name="insurance_company" id="insurance_company" class="form-select" required>
                    <option value="">Select insurance company...</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="agent_name" class="form-label">Agent Name (optional)</label>
                <select name="agent_name" id="agent_name" class="form-select">
                    <option value="">Select agent name...</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="product_name" class="form-label">Product</label>
                <select name="product_name" id="product_name" class="form-select" required>
                    <option value="">Select product type...</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="remarks" class="form-label">Remarks (Optional)</label>
                <input type="text" name="remarks" id="remarks" class="form-control" placeholder="e.g., Factory Insurance, Skoda MH02GJ2149">
                <small class="text-muted">Add specific details or identifiers</small>
            </div>

            <div class="row g-3">
                <div class="col-md-6">
                    <label for="policy_from" class="form-label">Policy From (Optional)</label>
                    <input type="text" name="policy_from" id="policy_from" class="form-control date-picker" placeholder="DD/MM/YYYY">
                </div>
                <div class="col-md-6">
                    <label for="policy_to" class="form-label">Policy To (Optional)</label>
                    <input type="text" name="policy_to" id="policy_to" class="form-control date-picker" placeholder="DD/MM/YYYY">
                </div>
            </div>

            <div class="mb-3">
                <label for="payment_date" class="form-label">Payment Date (Optional)</label>
                <input type="text" name="payment_date" id="payment_date" class="form-control date-picker" placeholder="DD/MM/YYYY">
            </div>

            <div class="mb-3">
                <label for="payment_details" class="form-label">Payment Details</label>
                <input type="text" name="payment_details" id="payment_details" class="form-control" placeholder="UPI/RTGS ref, payment method, etc.">
            </div>

            <div class="row g-3">
                <div class="col-md-3">
                    <label for="net_premium" class="form-label">Net Premium/OD</label>
                    <input type="number" name="net_premium" id="net_premium" class="form-control" step="0.01" onchange="calculateGrossPremium()">
                </div>
                <div class="col-md-3">
                    <label for="addon_premium" class="form-label">Addon Premium</label>
                    <input type="number" name="addon_premium" id="addon_premium" class="form-control" step="0.01" onchange="calculateGrossPremium()">
                </div>
                <div class="col-md-3">
                    <label for="tp_tr_premium" class="form-label">TP/TR Premium</label>
                    <input type="number" name="tp_tr_premium" id="tp_tr_premium" class="form-control" step="0.01" onchange="calculateGrossPremium()">
                    <small class="text-muted">Third Party/Transit Premium</small>
                </div>
                <div class="col-md-3">
                    <label for="gst_percentage" class="form-label">GST %</label>
                    <input type="number" name="gst_percentage" id="gst_percentage" class="form-control" step="0.01" value="18" onchange="calculateGrossPremium()">
                </div>
                <div class="col-md-4">
                    <label for="gross_premium" class="form-label">Gross Premium (Auto-calculated)</label>
                    <input type="number" name="gross_premium" id="gross_premium" class="form-control" step="0.01" readonly style="background-color: #f8f9fa;">
                    <small class="text-muted">Net + Addon + TP/TR + GST</small>
                </div>
                <div class="col-md-4">
                    <label for="commission_percentage" class="form-label">Commission %</label>
                    <input type="number" name="commission_percentage" id="commission_percentage" class="form-control" step="0.01" onchange="calculateCommission()">
                </div>
                <div class="col-md-4">
                    <label for="commission_amount" class="form-label">Commission Amount (Auto-calculated)</label>
                    <input type="number" name="commission_amount" id="commission_amount" class="form-control" step="0.01" readonly style="background-color: #f8f9fa;">
                    <small class="text-muted">(Net + Addon) × Commission %</small>
                </div>
            </div>

            <div class="mb-3">
                <label for="sum_insured" class="form-label">Sum Insured</label>
                <input type="number" step="0.01" name="sum_insured" id="sum_insured" class="form-control" placeholder="Total coverage amount">
                <small class="text-muted">General sum insured for non-health policies</small>
            </div>

            <div class="row g-3 mt-1">
                <div class="col-md-6">
                    <div class="form-check" style="margin-top: 10px;">
                        <input type="checkbox" class="form-check-input" id="one_time_insurance" name="one_time_insurance">
                        <label class="form-check-label" for="one_time_insurance">One-time Insurance</label>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-check" style="margin-top: 10px;">
                        <input type="checkbox" class="form-check-input" id="commission_received" name="commission_received">
                        <label class="form-check-label" for="commission_received">Commission Received</label>
                    </div>
                </div>
            </div>

            <div class="row g-3 mt-1">
                <div class="col-md-4">
                    <label for="business_type" class="form-label">Business Type</label>
                    <select name="business_type" id="business_type" class="form-select">
                        <option value="">Select...</option>
                        <option value="NEW">NEW</option>
                        <option value="RENEWAL">RENEWAL</option>
                        <option value="ROLL OVER">ROLL OVER</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="group_name" class="form-label">Group</label>
                    <input type="text" name="group_name" id="group_name" class="form-control" placeholder="e.g., SAMEER SHAH">
                </div>
                <div class="col-md-4">
                    <label for="subgroup_name" class="form-label">Subgroup</label>
                    <input type="text" name="subgroup_name" id="subgroup_name" class="form-control">
                </div>
            </div>

            <!-- Health Insurance Details Section -->
            <div class="form-section" id="healthInsuranceSection" style="display: none; background: #f8f9fa; border-radius: 8px; padding: 20px; margin: 20px 0; border: 1px solid #e2e8f0;">
                <h5 style="color: #1a202c; margin-bottom: 16px; font-weight: 600;">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 8px; color: #667eea;">
                        <path d="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z"/>
                    </svg>
                    Health Insurance Details
                </h5>

                <div class="mb-4">
                    <label class="form-label">Plan Type <span style="color: #e53e3e;">*</span></label>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="health_plan_type" id="floater_plan" value="FLOATER">
                                <label class="form-check-label" for="floater_plan">
                                    <strong>Floater Plan</strong><br>
                                    <small class="text-muted">Family floater with single sum insured and bonus for all members</small>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="health_plan_type" id="individual_plan" value="INDIVIDUAL">
                                <label class="form-check-label" for="individual_plan">
                                    <strong>Individual Plan</strong><br>
                                    <small class="text-muted">Individual coverage with separate sum insured per member</small>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="health_plan_type" id="topup_floater_plan" value="TOPUP_FLOATER">
                                <label class="form-check-label" for="topup_floater_plan">
                                    <strong>Topup Floater Plan</strong><br>
                                    <small class="text-muted">Family floater topup with single sum insured, bonus and deductible</small>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="health_plan_type" id="topup_individual_plan" value="TOPUP_INDIVIDUAL">
                                <label class="form-check-label" for="topup_individual_plan">
                                    <strong>Topup Individual Plan</strong><br>
                                    <small class="text-muted">Individual topup with separate sum insured, bonus and deductible per member</small>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Floater-specific fields -->
                <div id="floaterFieldsContainer" style="display: none;">
                    <div class="row g-3 mb-3">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="floater_sum_insured" class="form-label">Floater Sum Insured <span class="required-indicator">*</span></label>
                                <input type="number" step="0.01" name="floater_sum_insured" id="floater_sum_insured" class="form-control" placeholder="Total sum insured for all members">
                                <small class="text-muted">This amount applies to all members in the floater policy</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="floater_bonus" class="form-label">Floater Bonus</label>
                                <input type="number" step="0.01" name="floater_bonus" id="floater_bonus" class="form-control" placeholder="Total bonus for all members">
                                <small class="text-muted">This bonus applies to all members in the floater policy</small>
                            </div>
                        </div>
                        <div class="col-md-4" id="floaterDeductibleContainer" style="display: none;">
                            <div class="mb-3">
                                <label for="floater_deductible" class="form-label">Floater Deductible <span class="required-indicator">*</span></label>
                                <input type="number" step="0.01" name="floater_deductible" id="floater_deductible" class="form-control" placeholder="Total deductible for all members">
                                <small class="text-muted">This deductible applies to all members in the floater topup policy</small>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="healthMembersContainer">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <label class="form-label mb-0">Insured Members <span style="color: #e53e3e;">*</span></label>
                        <button type="button" class="btn btn-sm btn-outline-primary" id="addHealthMemberBtn">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                            </svg>
                            Add Member
                        </button>
                    </div>
                    <div id="healthMembersList">
                        <!-- Health members will be added here dynamically -->
                    </div>
                </div>
            </div>

            <!-- Factory Insurance Details Section -->
            <div class="form-section" id="factoryInsuranceSection" style="display: none; background: #f8f9fa; border-radius: 8px; padding: 20px; margin: 20px 0; border: 1px solid #e2e8f0;">
                <h5 style="color: #1a202c; margin-bottom: 16px; font-weight: 600;">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" style="margin-right: 8px; color: #667eea;">
                        <path d="M12,3L2,12H5V20H19V12H22L12,3M12,8.75A1.25,1.25 0 0,1 13.25,10A1.25,1.25 0 0,1 12,11.25A1.25,1.25 0 0,1 10.75,10A1.25,1.25 0 0,1 12,8.75M12,6.5A3.5,3.5 0 0,0 8.5,10A3.5,3.5 0 0,0 12,13.5A3.5,3.5 0 0,0 15.5,10A3.5,3.5 0 0,0 12,6.5Z"/>
                    </svg>
                    Factory Insurance Coverage Details
                </h5>

                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="factory_building" class="form-label">Building</label>
                            <input type="number" step="0.01" name="factory_building" id="factory_building" class="form-control" placeholder="Building coverage amount">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="factory_plant_machinery" class="form-label">Plant & Machinery</label>
                            <input type="number" step="0.01" name="factory_plant_machinery" id="factory_plant_machinery" class="form-control" placeholder="P&M coverage amount">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="factory_furniture_fittings" class="form-label">Furniture, Fittings & Fixtures</label>
                            <input type="number" step="0.01" name="factory_furniture_fittings" id="factory_furniture_fittings" class="form-control" placeholder="FFF coverage amount">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="factory_stocks" class="form-label">Stocks</label>
                            <input type="number" step="0.01" name="factory_stocks" id="factory_stocks" class="form-control" placeholder="Stock coverage amount">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="factory_electrical_installations" class="form-label">Electrical Installations</label>
                            <input type="number" step="0.01" name="factory_electrical_installations" id="factory_electrical_installations" class="form-control" placeholder="E.I. coverage amount">
                        </div>
                    </div>
                </div>
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary">Add Pending Policy</button>
                <a href="{{ url_for('pending_policies.list_pending') }}" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>

    <script>
        const newCustomerBtn = document.getElementById('newCustomerBtn');
        const existingCustomerBtn = document.getElementById('existingCustomerBtn');
        const newCustomerSection = document.getElementById('newCustomerSection');
        const existingCustomerSection = document.getElementById('existingCustomerSection');
        const customerTypeInput = document.getElementById('customerTypeInput');

        function activateNewCustomer() {
            document.getElementById('newCustomer').checked = true;
            newCustomerBtn.classList.add('active');
            existingCustomerBtn.classList.remove('active');
            newCustomerSection.style.display = 'block';
            existingCustomerSection.style.display = 'none';
            customerTypeInput.value = 'new';
            document.getElementById('customer_name').required = true;
            document.getElementById('client_prefix').required = true;
            document.getElementById('existing_client_select').required = false;
            document.getElementById('existing_member_select').required = false;
        }

        function activateExistingCustomer() {
            document.getElementById('existingCustomer').checked = true;
            existingCustomerBtn.classList.add('active');
            newCustomerBtn.classList.remove('active');
            existingCustomerSection.style.display = 'block';
            newCustomerSection.style.display = 'none';
            customerTypeInput.value = 'existing';
            document.getElementById('existing_client_select').required = true;
            document.getElementById('customer_name').required = false;
            document.getElementById('client_prefix').required = false;
            loadClients();
        }

        newCustomerBtn.addEventListener('click', activateNewCustomer);
        existingCustomerBtn.addEventListener('click', activateExistingCustomer);

        let clientsLoaded = false;
        
        function loadClients() {
            const select = document.getElementById('existing_client_select');
            
            // Prevent duplicate loading
            if (clientsLoaded) return;
            clientsLoaded = true;

            fetch('/get_clients')
                .then(response => response.json())
                .then(clients => {
                    // Clear existing options except the first placeholder
                    select.innerHTML = '<option value="">Choose a client...</option>';
                    
                    clients.forEach(client => {
                        const option = document.createElement('option');
                        option.value = client.client_id;
                        option.textContent = `${client.name}${client.email ? ' - ' + client.email : ''}`;
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error:', error);
                    clientsLoaded = false; // Reset on error so user can retry
                });
        }

        // load members when client changes and sync hidden inputs
        const clientSelectEl = document.getElementById('existing_client_select');
        const memberSelectEl = document.getElementById('existing_member_select');
        clientSelectEl.addEventListener('change', () => {
            document.getElementById('existing_client_id').value = clientSelectEl.value;
            memberSelectEl.innerHTML = '<option value="">Choose a member...</option>';
            if (!clientSelectEl.value) return;
            fetch('/get_members?client_id=' + encodeURIComponent(clientSelectEl.value))
                .then(r => r.json())
                .then(members => {
                    members.forEach(m => {
                        const opt = document.createElement('option');
                        opt.value = m.member_id;
                        opt.textContent = m.member_name;
                        memberSelectEl.appendChild(opt);
                    });
                })
                .catch(err => console.error('Error loading members', err));
        });

        memberSelectEl.addEventListener('change', () => {
            document.getElementById('existing_member_id').value = memberSelectEl.value;
        });

        // Initialize product dropdown and conditional fields
        let healthMemberCount = 0;
        
        // Consolidated DOMContentLoaded event listener
        document.addEventListener('DOMContentLoaded', function() {
            // Default to New Customer on load so name fields show
            activateNewCustomer();
            
            // Initialize product dropdown
            initializeProductDropdown('product_name', handleProductChange);
            
            // Initialize insurance company dropdown
            initializeInsuranceCompanyDropdown('insurance_company');
            
            // Initialize agent name dropdown
            initializeAgentNameDropdown('agent_name');
            
            // Setup health member management
            document.getElementById('addHealthMemberBtn').addEventListener('click', addHealthMember);
            
            // Add initial health member (but don't make it required initially since health section is hidden)
            addHealthMember();
            
            // Initialize health plan type change handlers
            initializeHealthPlanTypeHandlers();
            
            // Ensure health fields start as not required since section is initially hidden
            updateHealthFieldsRequired(false);
            
            // Initialize date pickers with DD/MM/YYYY format
            flatpickr('.date-picker', {
                dateFormat: 'd/m/Y',
                altInput: false,
                allowInput: true,
                locale: {
                    firstDayOfWeek: 1
                }
            });
        });
        
        function initializeHealthPlanTypeHandlers() {
            const floaterPlan = document.getElementById('floater_plan');
            const individualPlan = document.getElementById('individual_plan');
            const topupFloaterPlan = document.getElementById('topup_floater_plan');
            const topupIndividualPlan = document.getElementById('topup_individual_plan');
            
            if (floaterPlan && individualPlan) {
                floaterPlan.addEventListener('change', handleHealthPlanTypeChange);
                individualPlan.addEventListener('change', handleHealthPlanTypeChange);
            }
            
            if (topupFloaterPlan && topupIndividualPlan) {
                topupFloaterPlan.addEventListener('change', handleHealthPlanTypeChange);
                topupIndividualPlan.addEventListener('change', handleHealthPlanTypeChange);
            }
        }
        
        function handleHealthPlanTypeChange() {
            const selectedPlan = document.querySelector('input[name="health_plan_type"]:checked');
            const floaterFieldsContainer = document.getElementById('floaterFieldsContainer');
            const floaterDeductibleContainer = document.getElementById('floaterDeductibleContainer');
            const healthMembersContainer = document.getElementById('healthMembersContainer');
            const floaterSumInsured = document.getElementById('floater_sum_insured');
            const floaterBonus = document.getElementById('floater_bonus');
            const floaterDeductible = document.getElementById('floater_deductible');
            
            if (!selectedPlan) return;
            
            const planType = selectedPlan.value;
            const isFloaterPlan = planType === 'FLOATER' || planType === 'TOPUP_FLOATER';
            const isTopupPlan = planType === 'TOPUP_FLOATER' || planType === 'TOPUP_INDIVIDUAL';
            
            if (isFloaterPlan) {
                // Show floater fields, hide individual member fields
                floaterFieldsContainer.style.display = 'block';
                floaterSumInsured.setAttribute('required', 'required');
                
                // Show/hide floater deductible based on topup plan
                if (planType === 'TOPUP_FLOATER') {
                    floaterDeductibleContainer.style.display = 'block';
                    floaterDeductible.setAttribute('required', 'required');
                } else {
                    floaterDeductibleContainer.style.display = 'none';
                    floaterDeductible.removeAttribute('required');
                }
                
                // Hide sum_insured, bonus, and deductible fields for individual members
                const memberSumInsuredFields = document.querySelectorAll('input[name="health_member_sum_insured[]"]');
                const memberBonusFields = document.querySelectorAll('input[name="health_member_bonus[]"]');
                const memberDeductibleFields = document.querySelectorAll('input[name="health_member_deductible[]"]');
                
                memberSumInsuredFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) colDiv.style.display = 'none';
                    field.removeAttribute('required');
                });
                
                memberBonusFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) colDiv.style.display = 'none';
                });
                
                memberDeductibleFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) colDiv.style.display = 'none';
                });
                
            } else {
                // Hide floater fields, show individual member fields
                floaterFieldsContainer.style.display = 'none';
                floaterDeductibleContainer.style.display = 'none';
                floaterSumInsured.removeAttribute('required');
                floaterDeductible.removeAttribute('required');
                
                // Show sum_insured and bonus fields for individual members
                const memberSumInsuredFields = document.querySelectorAll('input[name="health_member_sum_insured[]"]');
                const memberBonusFields = document.querySelectorAll('input[name="health_member_bonus[]"]');
                const memberDeductibleFields = document.querySelectorAll('input[name="health_member_deductible[]"]');
                
                memberSumInsuredFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) colDiv.style.display = 'block';
                    field.setAttribute('required', 'required');
                });
                
                memberBonusFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) colDiv.style.display = 'block';
                });
                
                // Show/hide deductible fields based on topup plan
                memberDeductibleFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) {
                        if (planType === 'TOPUP_INDIVIDUAL') {
                            colDiv.style.display = 'block';
                        } else {
                            colDiv.style.display = 'none';
                        }
                    }
                });
            }
            
            // Update existing member fields visibility
            updateExistingMemberFields();
        }
        
        function updateExistingMemberFields() {
            const selectedPlan = document.querySelector('input[name="health_plan_type"]:checked');
            if (!selectedPlan) return;
            
            const planType = selectedPlan.value;
            const isFloaterPlan = planType === 'FLOATER' || planType === 'TOPUP_FLOATER';
            const isTopupPlan = planType === 'TOPUP_FLOATER' || planType === 'TOPUP_INDIVIDUAL';
            
            // Update all existing member items
            const existingMembers = document.querySelectorAll('.health-member-item');
            existingMembers.forEach(memberItem => {
                const sumInsuredDiv = memberItem.querySelector('input[name="health_member_sum_insured[]"]')?.closest('.col-md-3');
                const bonusDiv = memberItem.querySelector('input[name="health_member_bonus[]"]')?.closest('.col-md-3');
                const deductibleDiv = memberItem.querySelector('input[name="health_member_deductible[]"]')?.closest('.col-md-3');
                
                if (sumInsuredDiv) {
                    sumInsuredDiv.style.display = isFloaterPlan ? 'none' : 'block';
                }
                if (bonusDiv) {
                    bonusDiv.style.display = isFloaterPlan ? 'none' : 'block';
                }
                if (deductibleDiv) {
                    deductibleDiv.style.display = (isTopupPlan && !isFloaterPlan) ? 'block' : 'none';
                }
            });
        }
        
        function handleProductChange(productName) {
            const healthSection = document.getElementById('healthInsuranceSection');
            const factorySection = document.getElementById('factoryInsuranceSection');
            const sumInsuredField = document.getElementById('sum_insured');
            
            // Hide all conditional sections first
            healthSection.style.display = 'none';
            factorySection.style.display = 'none';
            
            // Remove required attributes from health fields when hiding
            updateHealthFieldsRequired(false);
            
            if (!productName) return;
            
            const productType = window.productManager.getAdditionalFieldsType(productName);
            
            if (productType === 'health') {
                healthSection.style.display = 'block';
                sumInsuredField.parentElement.style.display = 'none'; // Hide general sum insured for health
                // Make health plan type required
                const selectedPlan = document.querySelector('input[name="health_plan_type"]:checked');
                if (!selectedPlan) {
                    document.getElementById('floater_plan').click();
                }
                // Trigger health plan type change to show/hide appropriate fields
                setTimeout(handleHealthPlanTypeChange, 100);
                // Add required attributes to health fields when showing
                updateHealthFieldsRequired(true);
            } else if (productType === 'factory') {
                factorySection.style.display = 'block';
                sumInsuredField.parentElement.style.display = 'block';
            } else {
                sumInsuredField.parentElement.style.display = 'block';
            }
        }
        
        function addHealthMember() {
            healthMemberCount++;
            const membersList = document.getElementById('healthMembersList');
            
            const memberDiv = document.createElement('div');
            memberDiv.className = 'health-member-item border rounded p-3 mb-3';
            
            // Check if health section is visible to determine if fields should be required
            const healthSection = document.getElementById('healthInsuranceSection');
            const isHealthVisible = healthSection.style.display !== 'none';
            const requiredAttr = isHealthVisible ? 'required' : '';
            
            // Check current plan type to determine field visibility
            const selectedPlan = document.querySelector('input[name="health_plan_type"]:checked');
            const isFloaterPlan = selectedPlan && (selectedPlan.value === 'FLOATER' || selectedPlan.value === 'TOPUP_FLOATER');
            const isTopupPlan = selectedPlan && (selectedPlan.value === 'TOPUP_FLOATER' || selectedPlan.value === 'TOPUP_INDIVIDUAL');
            const sumInsuredDisplay = isFloaterPlan ? 'none' : 'block';
            const bonusDisplay = isFloaterPlan ? 'none' : 'block';
            const deductibleDisplay = isTopupPlan && !isFloaterPlan ? 'block' : 'none';
            
            memberDiv.innerHTML = `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0">Member ${healthMemberCount}</h6>
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeHealthMember(this)">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                        </svg>
                        Remove
                    </button>
                </div>
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Member Name <span style="color: #e53e3e;">*</span></label>
                        <input type="text" name="health_member_name[]" class="form-control health-member-field" placeholder="Member name" ${requiredAttr}>
                    </div>
                    <div class="col-md-3" style="display: ${sumInsuredDisplay}">
                        <label class="form-label">Sum Insured</label>
                        <input type="number" step="0.01" name="health_member_sum_insured[]" class="form-control" placeholder="Coverage amount">
                    </div>
                    <div class="col-md-3" style="display: ${bonusDisplay}">
                        <label class="form-label">Bonus</label>
                        <input type="number" step="0.01" name="health_member_bonus[]" class="form-control" placeholder="Bonus amount">
                    </div>
                    <div class="col-md-3" style="display: ${deductibleDisplay}">
                        <label class="form-label">Deductible</label>
                        <input type="number" step="0.01" name="health_member_deductible[]" class="form-control" placeholder="Deductible amount">
                    </div>
                </div>
            `;
            
            membersList.appendChild(memberDiv);
        }
        
        function removeHealthMember(button) {
            const memberItem = button.closest('.health-member-item');
            if (document.querySelectorAll('.health-member-item').length > 1) {
                memberItem.remove();
            } else {
                alert('At least one member is required for health insurance.');
            }
        }
        
        function updateHealthFieldsRequired(isRequired) {
            // Update required attribute for health member name fields
            const healthMemberFields = document.querySelectorAll('input[name="health_member_name[]"]');
            const healthPlanTypeFields = document.querySelectorAll('input[name="health_plan_type"]');
            
            healthMemberFields.forEach(field => {
                if (isRequired) {
                    field.setAttribute('required', 'required');
                } else {
                    field.removeAttribute('required');
                }
            });
            
            // Also handle health plan type radio buttons
            healthPlanTypeFields.forEach(field => {
                if (isRequired) {
                    field.setAttribute('required', 'required');
                } else {
                    field.removeAttribute('required');
                }
            });
        }
        
        function validatePendingForm() {
            console.log('🔍 Pending policy form validation started...');
            
            // Check if form elements exist
            const form = document.querySelector('form');
            if (!form) {
                console.error('❌ Form element not found!');
                return false;
            }
            
            // Debug: Log all form data
            const formData = new FormData(form);
            console.log('📋 Form data:');
            for (let [key, value] of formData.entries()) {
                console.log(`  ${key}: ${value}`);
            }
            
            // Check customer type is selected
            const customerType = document.getElementById('customerTypeInput').value;
            console.log('👤 Customer type:', customerType);
            
            if (!customerType) {
                alert('Please select customer type (New or Existing)');
                return false;
            }
            
            // Validate based on customer type
            if (customerType === 'new') {
                const customerName = document.getElementById('customer_name').value.trim();
                const clientPrefix = document.getElementById('client_prefix').value.trim();
                
                if (!customerName) {
                    alert('Customer name is required for new customers');
                    document.getElementById('customer_name').focus();
                    return false;
                }
                
                if (!clientPrefix) {
                    alert('Client prefix is required for new customers');
                    document.getElementById('client_prefix').focus();
                    return false;
                }
            } else if (customerType === 'existing') {
                const clientId = document.getElementById('existing_client_id').value;
                
                if (!clientId) {
                    alert('Please select an existing client');
                    document.getElementById('existing_client_select').focus();
                    return false;
                }
            }
            
            // Check required fields
            const insuranceCompany = document.getElementById('insurance_company').value.trim();
            const productName = document.getElementById('product_name').value;
            
            if (!insuranceCompany) {
                alert('Insurance company is required');
                document.getElementById('insurance_company').focus();
                return false;
            }
            
            if (!productName) {
                alert('Product type is required');
                document.getElementById('product_name').focus();
                return false;
            }
            
            // Validate health insurance specific fields
            try {
                if (productName && window.productManager && window.productManager.getAdditionalFieldsType(productName) === 'health') {
                    const healthSection = document.getElementById('healthInsuranceSection');
                    if (healthSection.style.display !== 'none') {
                        const planType = document.querySelector('input[name="health_plan_type"]:checked');
                        if (!planType) {
                            alert('Please select a health plan type');
                            return false;
                        }
                        
                        const memberNames = document.querySelectorAll('input[name="health_member_name[]"]');
                        let hasValidMember = false;
                        memberNames.forEach(input => {
                            if (input.value.trim()) {
                                hasValidMember = true;
                            }
                        });
                        
                        if (!hasValidMember) {
                            alert('At least one health insurance member name is required');
                            return false;
                        }
                    }
                }
            } catch (e) {
                console.warn('Product manager error:', e);
                // Continue validation even if product manager fails
            }
            
            console.log('Form validation passed');
            return true;
        }

        // Calculate gross premium automatically
        function calculateGrossPremium() {
            const netPremium = parseFloat(document.getElementById('net_premium').value) || 0;
            const addonPremium = parseFloat(document.getElementById('addon_premium').value) || 0;
            const tpTrPremium = parseFloat(document.getElementById('tp_tr_premium').value) || 0;
            const gstPercentage = parseFloat(document.getElementById('gst_percentage').value) || 0;
            
            // Calculate base amount (net + addon + tp/tr)
            const baseAmount = netPremium + addonPremium + tpTrPremium;
            
            // Calculate GST amount
            const gstAmount = (baseAmount * gstPercentage) / 100;
            
            // Calculate gross premium
            const grossPremium = baseAmount + gstAmount;
            
            // Round to whole number (no decimals)
            const roundedGrossPremium = Math.round(grossPremium);
            
            // Update the gross premium field
            document.getElementById('gross_premium').value = roundedGrossPremium;
            
            // Also recalculate commission if percentage is set
            calculateCommission();
        }

        // Calculate commission amount automatically
        function calculateCommission() {
            const netPremium = parseFloat(document.getElementById('net_premium').value) || 0;
            const addonPremium = parseFloat(document.getElementById('addon_premium').value) || 0;
            const commissionPercentage = parseFloat(document.getElementById('commission_percentage').value) || 0;
            
            // Commission is calculated on (Net + Addon) only
            const commissionBase = netPremium + addonPremium;
            const commissionAmount = (commissionBase * commissionPercentage) / 100;
            
            // Round to whole number (no decimals)
            const roundedCommissionAmount = Math.round(commissionAmount);
            
            // Update the commission amount field
            document.getElementById('commission_amount').value = roundedCommissionAmount;
        }
    </script>
    
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
</body>
</html>


================================================
FILE: templates/add_policy.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Policy - {{ config.PORTAL_TITLE }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="{{ url_for('static', filename='product_manager.js') }}?v=2.0"></script>
    <script src="{{ url_for('static', filename='dropdown_manager.js') }}?v=2.0"></script>
    <style>
        .form-header {
            text-align: center;
            margin-bottom: var(--spacing-8);
        }
        
        .form-header h1 {
            color: var(--gray-900);
            margin-bottom: var(--spacing-2);
        }
        
        .form-header p {
            color: var(--gray-600);
            font-size: var(--font-size-lg);
        }
        
        .customer-type-selector {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: var(--spacing-4);
            margin-bottom: var(--spacing-8);
        }
        
        .customer-type-btn {
            padding: var(--spacing-6);
            border: 2px solid var(--gray-300);
            border-radius: var(--radius-lg);
            background: var(--white);
            cursor: pointer;
            transition: all 0.2s ease;
            text-align: center;
            position: relative;
        }
        
        .customer-type-btn:hover {
            border-color: var(--primary-blue);
            background: var(--secondary-blue);
        }
        
        .customer-type-btn.active {
            border-color: var(--primary-blue);
            background: var(--secondary-blue);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        
        .customer-type-btn input[type="radio"] {
            position: absolute;
            opacity: 0;
            pointer-events: none;
        }
        
        .customer-type-btn label {
            font-weight: 600;
            color: var(--gray-700);
            cursor: pointer;
            margin: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: var(--spacing-2);
        }
        
        .customer-type-icon {
            width: 32px;
            height: 32px;
            background: var(--gray-100);
            border-radius: var(--radius-md);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray-600);
        }
        
        .customer-type-btn.active .customer-type-icon {
            background: var(--primary-blue);
            color: var(--white);
        }
        
        .form-section {
            background: var(--gray-50);
            border-radius: var(--radius-lg);
            padding: var(--spacing-6);
            margin-bottom: var(--spacing-6);
            border: 1px solid var(--gray-200);
        }
        
        .form-section h5 {
            color: var(--gray-900);
            margin-bottom: var(--spacing-4);
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: var(--spacing-2);
        }
        
        .section-icon {
            width: 20px;
            height: 20px;
            color: var(--primary-blue);
        }
        
        .whatsapp-section {
            background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
            border: 2px solid #86efac;
            border-radius: var(--radius-lg);
            padding: var(--spacing-6);
            margin: var(--spacing-6) 0;
        }
        
        .whatsapp-checkbox {
            display: flex;
            align-items: center;
            gap: var(--spacing-3);
        }
        
        .whatsapp-checkbox input[type="checkbox"] {
            width: 20px;
            height: 20px;
            cursor: pointer;
            accent-color: #25D366;
        }
        
        .whatsapp-checkbox label {
            font-weight: 600;
            color: #166534;
            cursor: pointer;
            margin: 0;
            display: flex;
            align-items: center;
            gap: var(--spacing-2);
        }
        
        .whatsapp-icon {
            width: 20px;
            height: 20px;
            color: #25D366;
        }
        
        .form-actions {
            display: flex;
            gap: var(--spacing-4);
            justify-content: center;
            margin-top: var(--spacing-8);
        }
        
        .required-indicator {
            color: var(--danger);
        }
        
        .form-help {
            font-size: var(--font-size-sm);
            color: var(--gray-500);
            margin-top: var(--spacing-1);
        }
        
        @media (max-width: 768px) {
            .customer-type-selector {
                grid-template-columns: 1fr;
            }
            
            .form-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <a href="{{ url_for('dashboard.index') }}" class="btn btn-outline">Back to Dashboard</a>
        </div>
    </nav>

    <div class="form-container">
        <div class="form-header">
            <h1>Add New Policy</h1>
            <p>Register a new insurance policy for your customer</p>
        </div>

        {% with messages = get_flashed_messages() %}
            {% if messages %}
                {% for message in messages %}
                <div class="alert alert-info">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <div class="customer-type-selector">
            <div class="customer-type-btn" id="newCustomerBtn">
                <input type="radio" name="customerType" id="newCustomer" value="new">
                <label for="newCustomer">
                    <div class="customer-type-icon">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        </svg>
                    </div>
                    New Customer
                </label>
            </div>
            <div class="customer-type-btn" id="existingCustomerBtn">
                <input type="radio" name="customerType" id="existingCustomer" value="existing">
                <label for="existingCustomer">
                    <div class="customer-type-icon">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M16 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm4 18v-6h2.5l-2.54-7.63A1.5 1.5 0 0 0 18.54 8H17c-.8 0-1.54.37-2.01.99L14 10.5c-.47-.62-1.21-.99-2.01-.99H9.46c-.8 0-1.54.37-2.01.99L6 10.5c-.47-.62-1.21-.99-2.01-.99H2.46c-.8 0-1.54.37-2.01.99L0 10.5v9.5h2v6h2v-6h2v6h2v-6h2v6h2v-6h2v6h2v-6h2v6h2z"/>
                        </svg>
                    </div>
                    Existing Customer
                </label>
            </div>
        </div>

        <form action="{{ url_for('policies.add_policy') }}" method="POST" enctype="multipart/form-data" onsubmit="console.log('Form submit event triggered'); return validateForm()">
            <input type="hidden" name="customer_type" id="customerTypeInput">
            <input type="hidden" name="existing_client_id" id="existing_client_id">
            <input type="hidden" name="existing_member_id" id="existing_member_id">

            <!-- Customer Information Section -->
            <div class="form-section">
                <h5>
                    <svg class="section-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                    </svg>
                    Client Information
                </h5>

                <!-- Existing Customer Section -->
                <div id="existingCustomerSection">
                    <div class="mb-4">
                        <label for="existing_client_select" class="form-label">Select Client <span class="required-indicator">*</span></label>
                        <select id="existing_client_select" class="form-select">
                            <option value="">Choose a client...</option>
                        </select>
                        <div class="form-help">Select from existing clients in the system</div>
                    </div>
                    <div class="mb-4">
                        <label for="existing_member_select" class="form-label">Select Member (optional)</label>
                        <select id="existing_member_select" class="form-select">
                            <option value="">Choose a member...</option>
                        </select>
                        <div class="form-help">Leave empty to auto-create a member using client name</div>
                    </div>
                    <div class="mb-4">
                        <label for="new_member_name" class="form-label">Or add new member</label>
                        <input type="text" id="new_member_name" name="new_member_name" class="form-control" placeholder="Enter new member name">
                    </div>
                </div>

                <!-- New Customer Section -->
                <div id="newCustomerSection">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="customer_name" class="form-label">Client Name <span class="required-indicator">*</span></label>
                                <input type="text" name="customer_name" id="customer_name" class="form-control" placeholder="Enter client name">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="client_prefix" class="form-label">Client Prefix <span class="required-indicator">*</span></label>
                                <input type="text" name="client_prefix" id="client_prefix" class="form-control" placeholder="e.g., DS" maxlength="10" style="text-transform: uppercase;">
                                <div class="form-help">2-3 letter code for auto-generating client ID (e.g., DS01)</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="member_name" class="form-label">Member Name</label>
                                <input type="text" name="member_name" id="member_name" class="form-control" placeholder="If different from client name">
                                <div class="form-help">Leave empty to use client name</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="customer_email" class="form-label">Client Email</label>
                                <input type="email" name="customer_email" id="customer_email" class="form-control" placeholder="client@example.com">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="customer_phone" class="form-label">Client Phone</label>
                                <input type="tel" name="customer_phone" id="customer_phone" class="form-control" placeholder="+91 98765 43210">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Policy Details Section -->
            <div class="form-section">
                <h5>
                    <svg class="section-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                    </svg>
                    Policy Details
                </h5>

                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="insurance_company" class="form-label">Insurance Company <span class="required-indicator">*</span></label>
                            <select name="insurance_company" id="insurance_company" class="form-select" required>
                                <option value="">Select insurance company...</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="product_name" class="form-label">Product <span class="required-indicator">*</span></label>
                            <select name="product_name" id="product_name" class="form-select" required>
                                <option value="">Select product type...</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="policy_number" class="form-label">Policy Number <span class="required-indicator">*</span></label>
                            <input type="text" name="policy_number" id="policy_number" class="form-control" placeholder="Enter policy number" required>
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="policy_to" class="form-label">Policy To (Expiry) <span class="required-indicator">*</span></label>
                            <input type="text" name="policy_to" id="policy_to" class="form-control date-picker" placeholder="DD/MM/YYYY" required>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="policy_from" class="form-label">Policy From</label>
                            <input type="text" name="policy_from" id="policy_from" class="form-control date-picker" placeholder="DD/MM/YYYY">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="payment_date" class="form-label">Payment Date</label>
                            <input type="text" name="payment_date" id="payment_date" class="form-control date-picker" placeholder="DD/MM/YYYY">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="agent_name" class="form-label">Agent Name</label>
                            <select name="agent_name" id="agent_name" class="form-select">
                                <option value="">Select agent name...</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check" style="margin-top: 34px;">
                            <input type="checkbox" class="form-check-input" id="one_time_insurance" name="one_time_insurance">
                            <label class="form-check-label" for="one_time_insurance">One-time insurance</label>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="mb-3">
                            <label for="payment_details" class="form-label">Payment Details</label>
                            <input type="text" name="payment_details" id="payment_details" class="form-control" placeholder="UPI/RTGS ref, etc.">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label for="net_premium" class="form-label">Net Premium/OD</label>
                            <input type="number" step="0.01" name="net_premium" id="net_premium" class="form-control" onchange="calculateGrossPremium()">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label for="addon_premium" class="form-label">Addon Premium</label>
                            <input type="number" step="0.01" name="addon_premium" id="addon_premium" class="form-control" onchange="calculateGrossPremium()">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label for="tp_tr_premium" class="form-label">TP/TR Premium</label>
                            <input type="number" step="0.01" name="tp_tr_premium" id="tp_tr_premium" class="form-control" onchange="calculateGrossPremium()">
                            <div class="form-help">Third Party/Transit Premium</div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="mb-3">
                            <label for="gst_percentage" class="form-label">GST %</label>
                            <input type="number" step="0.01" name="gst_percentage" id="gst_percentage" class="form-control" value="18" onchange="calculateGrossPremium()">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="gross_premium" class="form-label">Gross Premium (Auto-calculated)</label>
                            <input type="number" step="0.01" name="gross_premium" id="gross_premium" class="form-control" readonly style="background-color: #f8f9fa;">
                            <div class="form-help">Net + Addon + TP/TR + GST</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="commission_percentage" class="form-label">Commission %</label>
                            <input type="number" step="0.01" name="commission_percentage" id="commission_percentage" class="form-control" onchange="calculateCommission()">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="commission_amount" class="form-label">Commission Amount (Auto-calculated)</label>
                            <input type="number" step="0.01" name="commission_amount" id="commission_amount" class="form-control" readonly style="background-color: #f8f9fa;">
                            <div class="form-help">(Net + Addon) × Commission %</div>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="mb-3">
                            <label for="sum_insured" class="form-label">Sum Insured</label>
                            <input type="number" step="0.01" name="sum_insured" id="sum_insured" class="form-control" placeholder="Total coverage amount">
                            <div class="form-help">General sum insured for non-health policies</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check" style="margin-top: 34px;">
                            <input type="checkbox" class="form-check-input" id="commission_received" name="commission_received">
                            <label class="form-check-label" for="commission_received">Commission received</label>
                        </div>
                    </div>
                    <div class="col-md-6"></div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="business_type" class="form-label">Business Type</label>
                            <select name="business_type" id="business_type" class="form-select">
                                <option value="">Select...</option>
                                <option value="NEW">NEW</option>
                                <option value="RENEWAL">RENEWAL</option>
                                <option value="ROLL OVER">ROLL OVER</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="group_name" class="form-label">Group</label>
                            <input type="text" name="group_name" id="group_name" class="form-control" placeholder="e.g., SAMEER SHAH">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="subgroup_name" class="form-label">Subgroup</label>
                            <input type="text" name="subgroup_name" id="subgroup_name" class="form-control">
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="mb-3">
                            <label for="remarks" class="form-label">Remarks</label>
                            <input type="text" name="remarks" id="remarks" class="form-control" placeholder="e.g., Factory Insurance, Skoda MH02GJ2149">
                            <div class="form-help">Add specific details or identifiers for this policy</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Health Insurance Details Section -->
            <div class="form-section" id="healthInsuranceSection" style="display: none;">
                <h5>
                    <svg class="section-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M12,6A6,6 0 0,0 6,12A6,6 0 0,0 12,18A6,6 0 0,0 18,12A6,6 0 0,0 12,6M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8Z"/>
                    </svg>
                    Health Insurance Details
                </h5>

                <div class="mb-4">
                    <label class="form-label">Plan Type <span class="required-indicator">*</span></label>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="health_plan_type" id="floater_plan" value="FLOATER">
                                <label class="form-check-label" for="floater_plan">
                                    <strong>Floater Plan</strong><br>
                                    <small class="text-muted">Family floater with single sum insured and bonus for all members</small>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="health_plan_type" id="individual_plan" value="INDIVIDUAL">
                                <label class="form-check-label" for="individual_plan">
                                    <strong>Individual Plan</strong><br>
                                    <small class="text-muted">Individual coverage with separate sum insured per member</small>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="health_plan_type" id="topup_floater_plan" value="TOPUP_FLOATER">
                                <label class="form-check-label" for="topup_floater_plan">
                                    <strong>Topup Floater Plan</strong><br>
                                    <small class="text-muted">Family floater topup with single sum insured, bonus and deductible</small>
                                </label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="health_plan_type" id="topup_individual_plan" value="TOPUP_INDIVIDUAL">
                                <label class="form-check-label" for="topup_individual_plan">
                                    <strong>Topup Individual Plan</strong><br>
                                    <small class="text-muted">Individual topup with separate sum insured, bonus and deductible per member</small>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Floater-specific fields -->
                <div id="floaterFieldsContainer" style="display: none;">
                    <div class="row g-3 mb-3">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="floater_sum_insured" class="form-label">Floater Sum Insured <span class="required-indicator">*</span></label>
                                <input type="number" step="0.01" name="floater_sum_insured" id="floater_sum_insured" class="form-control" placeholder="Total sum insured for all members">
                                <small class="text-muted">This amount applies to all members in the floater policy</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="floater_bonus" class="form-label">Floater Bonus</label>
                                <input type="number" step="0.01" name="floater_bonus" id="floater_bonus" class="form-control" placeholder="Total bonus for all members">
                                <small class="text-muted">This bonus applies to all members in the floater policy</small>
                            </div>
                        </div>
                        <div class="col-md-4" id="floaterDeductibleContainer" style="display: none;">
                            <div class="mb-3">
                                <label for="floater_deductible" class="form-label">Floater Deductible <span class="required-indicator">*</span></label>
                                <input type="number" step="0.01" name="floater_deductible" id="floater_deductible" class="form-control" placeholder="Total deductible for all members">
                                <small class="text-muted">This deductible applies to all members in the floater topup policy</small>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="healthMembersContainer">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <label class="form-label mb-0">Insured Members <span class="required-indicator">*</span></label>
                        <button type="button" class="btn btn-sm btn-outline-primary" id="addHealthMemberBtn">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                            </svg>
                            Add Member
                        </button>
                    </div>
                    <div id="healthMembersList">
                        <!-- Health members will be added here dynamically -->
                    </div>
                </div>
            </div>

            <!-- Factory Insurance Details Section -->
            <div class="form-section" id="factoryInsuranceSection" style="display: none;">
                <h5>
                    <svg class="section-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12,3L2,12H5V20H19V12H22L12,3M12,8.75A1.25,1.25 0 0,1 13.25,10A1.25,1.25 0 0,1 12,11.25A1.25,1.25 0 0,1 10.75,10A1.25,1.25 0 0,1 12,8.75M12,6.5A3.5,3.5 0 0,0 8.5,10A3.5,3.5 0 0,0 12,13.5A3.5,3.5 0 0,0 15.5,10A3.5,3.5 0 0,0 12,6.5Z"/>
                    </svg>
                    Factory Insurance Coverage Details
                </h5>

                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="factory_building" class="form-label">Building</label>
                            <input type="number" step="0.01" name="factory_building" id="factory_building" class="form-control" placeholder="Building coverage amount">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="factory_plant_machinery" class="form-label">Plant & Machinery</label>
                            <input type="number" step="0.01" name="factory_plant_machinery" id="factory_plant_machinery" class="form-control" placeholder="P&M coverage amount">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="factory_furniture_fittings" class="form-label">Furniture, Fittings & Fixtures</label>
                            <input type="number" step="0.01" name="factory_furniture_fittings" id="factory_furniture_fittings" class="form-control" placeholder="FFF coverage amount">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="factory_stocks" class="form-label">Stocks</label>
                            <input type="number" step="0.01" name="factory_stocks" id="factory_stocks" class="form-control" placeholder="Stock coverage amount">
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="factory_electrical_installations" class="form-label">Electrical Installations</label>
                            <input type="number" step="0.01" name="factory_electrical_installations" id="factory_electrical_installations" class="form-control" placeholder="E.I. coverage amount">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Document Upload Section -->
            <div class="form-section">
                <h5>
                    <svg class="section-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                    </svg>
                    Document Upload
                </h5>

                <div class="mb-4">
                    <label for="policy_file" class="form-label">Upload Policy Document <span class="required-indicator">*</span></label>
                    <input type="file" name="policy_file" id="policy_file" class="form-control" accept=".pdf,.doc,.docx" required>
                    <div class="form-help">Accepted formats: PDF, DOC, DOCX (Maximum file size: 10MB)</div>
                </div>
            </div>

            <!-- WhatsApp Notification Section -->
            <div class="whatsapp-section">
                <div class="whatsapp-checkbox">
                    <input type="checkbox" name="send_via_whatsapp" id="send_via_whatsapp" value="yes">
                    <label for="send_via_whatsapp">
                        <svg class="whatsapp-icon" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
                        </svg>
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" style="margin-left: 8px;">
                            <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
                        </svg>
                        Send policy document to customer via WhatsApp & Email
                    </label>
                </div>
                <div class="form-help">Will send via WhatsApp (if phone available) and Email (if email available)</div>
            </div>

            <!-- Error Display Area -->
            <div id="errorDisplay" class="alert alert-danger" style="display: none;">
                <strong>Please fix the following errors:</strong>
                <ul id="errorList"></ul>
            </div>
            
            <div class="form-actions">
                <button type="submit" class="btn btn-primary btn-lg" id="submitBtn">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" class="me-2">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                    </svg>
                    Add Policy
                </button>
                <a href="{{ url_for('dashboard.index') }}" class="btn btn-secondary btn-lg">Cancel</a>
            </div>
        </form>
    </div>

    <script>
        const newCustomerBtn = document.getElementById('newCustomerBtn');
        const existingCustomerBtn = document.getElementById('existingCustomerBtn');
        const newCustomerSection = document.getElementById('newCustomerSection');
        const existingCustomerSection = document.getElementById('existingCustomerSection');
        const customerTypeInput = document.getElementById('customerTypeInput');

        function activateNewCustomer() {
            document.getElementById('newCustomer').checked = true;
            newCustomerBtn.classList.add('active');
            existingCustomerBtn.classList.remove('active');
            newCustomerSection.style.display = 'block';
            existingCustomerSection.style.display = 'none';
            customerTypeInput.value = 'new';
            document.getElementById('customer_name').required = true;
            document.getElementById('client_prefix').required = true;
            document.getElementById('existing_client_select').required = false;
            document.getElementById('existing_member_select').required = false;
        }

        function activateExistingCustomer() {
            document.getElementById('existingCustomer').checked = true;
            existingCustomerBtn.classList.add('active');
            newCustomerBtn.classList.remove('active');
            existingCustomerSection.style.display = 'block';
            newCustomerSection.style.display = 'none';
            customerTypeInput.value = 'existing';
            document.getElementById('existing_client_select').required = true;
            document.getElementById('customer_name').required = false;
            document.getElementById('client_prefix').required = false;
            loadClients();
        }

        newCustomerBtn.addEventListener('click', activateNewCustomer);
        existingCustomerBtn.addEventListener('click', activateExistingCustomer);

        let clientsLoaded = false;
        
        function loadClients() {
            const clientSelect = document.getElementById('existing_client_select');
            
            // Prevent duplicate loading
            if (clientsLoaded) return;
            clientsLoaded = true;

            fetch('/get_clients')
                .then(response => response.json())
                .then(clients => {
                    // Clear existing options except the first placeholder
                    clientSelect.innerHTML = '<option value="">Choose a client...</option>';
                    
                    clients.forEach(client => {
                        const option = document.createElement('option');
                        option.value = client.client_id;
                        option.textContent = `${client.name}${client.email ? ' - ' + client.email : ''}`;
                        clientSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading clients:', error);
                    clientsLoaded = false; // Reset on error so user can retry
                });
        }

        const clientSelectEl = document.getElementById('existing_client_select');
        const memberSelectEl = document.getElementById('existing_member_select');
        clientSelectEl.addEventListener('change', () => {
            document.getElementById('existing_client_id').value = clientSelectEl.value;
            // load members for selected client
            const memberSelect = document.getElementById('existing_member_select');
            memberSelect.innerHTML = '<option value="">Choose a member...</option>';
            if (!clientSelectEl.value) return;
            fetch('/get_members?client_id=' + encodeURIComponent(clientSelectEl.value))
                .then(r => r.json())
                .then(members => {
                    members.forEach(m => {
                        const opt = document.createElement('option');
                        opt.value = m.member_id;
                        opt.textContent = m.member_name;
                        memberSelect.appendChild(opt);
                    });
                })
                .catch(err => console.error('Error loading members', err));
        });
        memberSelectEl.addEventListener('change', () => {
            document.getElementById('existing_member_id').value = memberSelectEl.value;
        });

        // Default to New Customer on load so form starts visible
        document.addEventListener('DOMContentLoaded', activateNewCustomer);

        // Initialize product dropdown and conditional fields
        let healthMemberCount = 0;
        
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize product dropdown
            initializeProductDropdown('product_name', handleProductChange);
            
            // Initialize insurance company dropdown
            initializeInsuranceCompanyDropdown('insurance_company');
            
            // Initialize health plan type change handlers
            initializeHealthPlanTypeHandlers();
            
            // Initialize agent name dropdown
            initializeAgentNameDropdown('agent_name');
            
            // Setup health member management
            document.getElementById('addHealthMemberBtn').addEventListener('click', addHealthMember);
            
            // Add initial health member (but don't make it required initially since health section is hidden)
            addHealthMember();
            
            // Ensure health fields start as not required since section is initially hidden
            updateHealthFieldsRequired(false);
        });
        
        function initializeHealthPlanTypeHandlers() {
            const floaterPlan = document.getElementById('floater_plan');
            const individualPlan = document.getElementById('individual_plan');
            const topupFloaterPlan = document.getElementById('topup_floater_plan');
            const topupIndividualPlan = document.getElementById('topup_individual_plan');
            
            if (floaterPlan && individualPlan) {
                floaterPlan.addEventListener('change', handleHealthPlanTypeChange);
                individualPlan.addEventListener('change', handleHealthPlanTypeChange);
            }
            
            if (topupFloaterPlan && topupIndividualPlan) {
                topupFloaterPlan.addEventListener('change', handleHealthPlanTypeChange);
                topupIndividualPlan.addEventListener('change', handleHealthPlanTypeChange);
            }
        }
        
        function handleHealthPlanTypeChange() {
            const selectedPlan = document.querySelector('input[name="health_plan_type"]:checked');
            const floaterFieldsContainer = document.getElementById('floaterFieldsContainer');
            const floaterDeductibleContainer = document.getElementById('floaterDeductibleContainer');
            const healthMembersContainer = document.getElementById('healthMembersContainer');
            const floaterSumInsured = document.getElementById('floater_sum_insured');
            const floaterBonus = document.getElementById('floater_bonus');
            const floaterDeductible = document.getElementById('floater_deductible');
            
            if (!selectedPlan) return;
            
            const planType = selectedPlan.value;
            const isFloaterPlan = planType === 'FLOATER' || planType === 'TOPUP_FLOATER';
            const isTopupPlan = planType === 'TOPUP_FLOATER' || planType === 'TOPUP_INDIVIDUAL';
            
            if (isFloaterPlan) {
                // Show floater fields, hide individual member sum_insured/bonus/deductible fields
                floaterFieldsContainer.style.display = 'block';
                floaterSumInsured.setAttribute('required', 'required');
                
                // Show/hide floater deductible based on topup plan
                if (planType === 'TOPUP_FLOATER') {
                    floaterDeductibleContainer.style.display = 'block';
                    floaterDeductible.setAttribute('required', 'required');
                } else {
                    floaterDeductibleContainer.style.display = 'none';
                    floaterDeductible.removeAttribute('required');
                }
                
                // Hide sum_insured, bonus, and deductible fields for individual members
                const memberSumInsuredFields = document.querySelectorAll('input[name="health_member_sum_insured[]"]');
                const memberBonusFields = document.querySelectorAll('input[name="health_member_bonus[]"]');
                const memberDeductibleFields = document.querySelectorAll('input[name="health_member_deductible[]"]');
                
                memberSumInsuredFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) colDiv.style.display = 'none';
                    field.removeAttribute('required');
                });
                
                memberBonusFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) colDiv.style.display = 'none';
                });
                
                memberDeductibleFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) colDiv.style.display = 'none';
                });
                
            } else {
                // Hide floater fields, show individual member fields
                floaterFieldsContainer.style.display = 'none';
                floaterDeductibleContainer.style.display = 'none';
                floaterSumInsured.removeAttribute('required');
                floaterDeductible.removeAttribute('required');
                
                // Show sum_insured and bonus fields for individual members
                const memberSumInsuredFields = document.querySelectorAll('input[name="health_member_sum_insured[]"]');
                const memberBonusFields = document.querySelectorAll('input[name="health_member_bonus[]"]');
                const memberDeductibleFields = document.querySelectorAll('input[name="health_member_deductible[]"]');
                
                memberSumInsuredFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) colDiv.style.display = 'block';
                    field.setAttribute('required', 'required');
                });
                
                memberBonusFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) colDiv.style.display = 'block';
                });
                
                // Show/hide deductible fields based on topup plan
                memberDeductibleFields.forEach(field => {
                    const colDiv = field.closest('.col-md-3');
                    if (colDiv) {
                        if (planType === 'TOPUP_INDIVIDUAL') {
                            colDiv.style.display = 'block';
                        } else {
                            colDiv.style.display = 'none';
                        }
                    }
                });
            }
            
            // Update existing member fields visibility
            updateExistingMemberFields();
        }
        
        function updateExistingMemberFields() {
            const selectedPlan = document.querySelector('input[name="health_plan_type"]:checked');
            if (!selectedPlan) return;
            
            const planType = selectedPlan.value;
            const isFloaterPlan = planType === 'FLOATER' || planType === 'TOPUP_FLOATER';
            const isTopupPlan = planType === 'TOPUP_FLOATER' || planType === 'TOPUP_INDIVIDUAL';
            
            // Update all existing member items
            const existingMembers = document.querySelectorAll('.health-member-item');
            existingMembers.forEach(memberItem => {
                const sumInsuredDiv = memberItem.querySelector('input[name="health_member_sum_insured[]"]')?.closest('.col-md-3');
                const bonusDiv = memberItem.querySelector('input[name="health_member_bonus[]"]')?.closest('.col-md-3');
                const deductibleDiv = memberItem.querySelector('input[name="health_member_deductible[]"]')?.closest('.col-md-3');
                
                if (sumInsuredDiv) {
                    sumInsuredDiv.style.display = isFloaterPlan ? 'none' : 'block';
                }
                if (bonusDiv) {
                    bonusDiv.style.display = isFloaterPlan ? 'none' : 'block';
                }
                if (deductibleDiv) {
                    deductibleDiv.style.display = (isTopupPlan && !isFloaterPlan) ? 'block' : 'none';
                }
            });
        }
        
        function handleProductChange(productName) {
            const healthSection = document.getElementById('healthInsuranceSection');
            const factorySection = document.getElementById('factoryInsuranceSection');
            const sumInsuredField = document.getElementById('sum_insured');
            
            // Hide all conditional sections first
            healthSection.style.display = 'none';
            factorySection.style.display = 'none';
            
            // Remove required attributes from health fields when hiding
            updateHealthFieldsRequired(false);
            
            if (!productName) return;
            
            const productType = window.productManager.getAdditionalFieldsType(productName);
            
            if (productType === 'health') {
                healthSection.style.display = 'block';
                sumInsuredField.parentElement.style.display = 'none'; // Hide general sum insured for health
                // Make health plan type required
                const selectedPlan = document.querySelector('input[name="health_plan_type"]:checked');
                if (!selectedPlan) {
                    document.getElementById('floater_plan').click();
                }
                // Trigger health plan type change to show/hide appropriate fields
                setTimeout(handleHealthPlanTypeChange, 100);
                // Add required attributes to health fields when showing
                updateHealthFieldsRequired(true);
            } else if (productType === 'factory') {
                factorySection.style.display = 'block';
                sumInsuredField.parentElement.style.display = 'block';
            } else {
                sumInsuredField.parentElement.style.display = 'block';
            }
        }
        
        function addHealthMember() {
            healthMemberCount++;
            const membersList = document.getElementById('healthMembersList');
            
            const memberDiv = document.createElement('div');
            memberDiv.className = 'health-member-item border rounded p-3 mb-3';
            
            // Check if health section is visible to determine if fields should be required
            const healthSection = document.getElementById('healthInsuranceSection');
            const isHealthVisible = healthSection.style.display !== 'none';
            const requiredAttr = isHealthVisible ? 'required' : '';
            
            // Check current plan type to determine field visibility
            const selectedPlan = document.querySelector('input[name="health_plan_type"]:checked');
            const isFloaterPlan = selectedPlan && (selectedPlan.value === 'FLOATER' || selectedPlan.value === 'TOPUP_FLOATER');
            const isTopupPlan = selectedPlan && (selectedPlan.value === 'TOPUP_FLOATER' || selectedPlan.value === 'TOPUP_INDIVIDUAL');
            const sumInsuredDisplay = isFloaterPlan ? 'none' : 'block';
            const bonusDisplay = isFloaterPlan ? 'none' : 'block';
            const deductibleDisplay = isTopupPlan && !isFloaterPlan ? 'block' : 'none';
            
            memberDiv.innerHTML = `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0">Member ${healthMemberCount}</h6>
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeHealthMember(this)">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                        </svg>
                        Remove
                    </button>
                </div>
                <div class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">Member Name <span class="required-indicator">*</span></label>
                        <input type="text" name="health_member_name[]" class="form-control health-member-field" placeholder="Member name" ${requiredAttr}>
                    </div>
                    <div class="col-md-3" style="display: ${sumInsuredDisplay}">
                        <label class="form-label">Sum Insured</label>
                        <input type="number" step="0.01" name="health_member_sum_insured[]" class="form-control" placeholder="Coverage amount">
                    </div>
                    <div class="col-md-3" style="display: ${bonusDisplay}">
                        <label class="form-label">Bonus</label>
                        <input type="number" step="0.01" name="health_member_bonus[]" class="form-control" placeholder="Bonus amount">
                    </div>
                    <div class="col-md-3" style="display: ${deductibleDisplay}">
                        <label class="form-label">Deductible</label>
                        <input type="number" step="0.01" name="health_member_deductible[]" class="form-control" placeholder="Deductible amount">
                    </div>
                </div>
            `;
            
            membersList.appendChild(memberDiv);
        }
        
        function removeHealthMember(button) {
            const memberItem = button.closest('.health-member-item');
            if (document.querySelectorAll('.health-member-item').length > 1) {
                memberItem.remove();
            } else {
                alert('At least one member is required for health insurance.');
            }
        }
        
        function updateHealthFieldsRequired(isRequired) {
            // Update required attribute for health member name fields
            const healthMemberFields = document.querySelectorAll('input[name="health_member_name[]"]');
            const healthPlanTypeFields = document.querySelectorAll('input[name="health_plan_type"]');
            
            healthMemberFields.forEach(field => {
                if (isRequired) {
                    field.setAttribute('required', 'required');
                } else {
                    field.removeAttribute('required');
                }
            });
            
            // Also handle health plan type radio buttons
            healthPlanTypeFields.forEach(field => {
                if (isRequired) {
                    field.setAttribute('required', 'required');
                } else {
                    field.removeAttribute('required');
                }
            });
        }
        
        function showErrors(errors) {
            const errorDisplay = document.getElementById('errorDisplay');
            const errorList = document.getElementById('errorList');
            
            if (errors.length > 0) {
                errorList.innerHTML = errors.map(error => `<li>${error}</li>`).join('');
                errorDisplay.style.display = 'block';
                errorDisplay.scrollIntoView({ behavior: 'smooth', block: 'center' });
            } else {
                errorDisplay.style.display = 'none';
            }
        }
        
        function validateForm() {
            console.log('🔍 Form validation started');
            const errors = [];
            
            // Check if form elements exist
            const form = document.querySelector('form');
            if (!form) {
                console.error('❌ Form element not found!');
                return false;
            }
            
            // Debug: Log all form data
            const formData = new FormData(form);
            console.log('📋 Form data:');
            for (let [key, value] of formData.entries()) {
                console.log(`  ${key}: ${value}`);
            }
            
            // Check if required elements exist
            const requiredElements = [
                'customerTypeInput', 'policy_file', 'policy_number', 
                'insurance_company', 'product_name'
            ];
            
            for (let elementId of requiredElements) {
                const element = document.getElementById(elementId);
                if (!element) {
                    console.error(`❌ Required element missing: ${elementId}`);
                    errors.push(`Form element ${elementId} not found`);
                }
            }
            
            // Check if customer type is selected
            const customerType = document.getElementById('customerTypeInput').value;
            console.log(`👤 Customer type: '${customerType}'`);
            if (!customerType) {
                errors.push('Please select customer type (New or Existing Customer)');
            }
            
            // Check required fields based on customer type
            if (customerType === 'new') {
                const customerName = document.getElementById('customer_name').value;
                const clientPrefix = document.getElementById('client_prefix').value;
                console.log(`📝 New customer - Name: '${customerName}', Prefix: '${clientPrefix}'`);
                if (!customerName) errors.push('Customer name is required for new customer');
                if (!clientPrefix) errors.push('Client prefix is required for new customer');
            } else if (customerType === 'existing') {
                const existingClient = document.getElementById('existing_client_select').value;
                const existingMember = document.getElementById('existing_member_select').value;
                const newMemberName = document.getElementById('new_member_name').value;
                console.log(`👥 Existing customer - Client: '${existingClient}', Member: '${existingMember}', New Member: '${newMemberName}'`);
                if (!existingClient) errors.push('Please select an existing client');
                // Either select existing member OR provide new member name
                if (!existingMember && !newMemberName.trim()) {
                    errors.push('Please select an existing member or provide a new member name');
                }
            }
            
            // Check policy file
            const policyFile = document.getElementById('policy_file');
            console.log(`📄 Policy file:`, policyFile ? policyFile.files[0] : 'No file input found');
            if (!policyFile || !policyFile.files[0]) {
                errors.push('Please upload a policy PDF file');
            }
            
            // Check policy number
            const policyNumber = document.getElementById('policy_number').value;
            console.log(`🔢 Policy number: '${policyNumber}'`);
            if (!policyNumber) {
                errors.push('Policy number is required');
            }
            
            // Check insurance company
            const insuranceCompany = document.getElementById('insurance_company').value;
            console.log(`🏢 Insurance company: '${insuranceCompany}'`);
            if (!insuranceCompany) {
                errors.push('Insurance company is required');
            }
            
            // Check product name
            const productName = document.getElementById('product_name').value;
            console.log(`📦 Product name: '${productName}'`);
            if (!productName) {
                errors.push('Product/Policy type is required');
            }
            
            // Check health insurance specific fields if health product is selected
            try {
                if (productName && window.productManager && window.productManager.getAdditionalFieldsType(productName) === 'health') {
                    const healthSection = document.getElementById('healthInsuranceSection');
                    if (healthSection.style.display !== 'none') {
                        // Check if health plan type is selected
                        const healthPlanType = document.querySelector('input[name="health_plan_type"]:checked');
                        if (!healthPlanType) {
                            errors.push('Please select a health plan type (Floater or Individual)');
                        } else {
                            // Validate based on plan type
                            if (healthPlanType.value === 'FLOATER') {
                                // For floater plans, check floater sum insured
                                const floaterSumInsured = document.getElementById('floater_sum_insured').value;
                                if (!floaterSumInsured) {
                                    errors.push('Floater sum insured is required for floater plans');
                                }
                            } else if (healthPlanType.value === 'INDIVIDUAL') {
                                // For individual plans, check that each member has sum insured
                                const memberNames = document.querySelectorAll('input[name="health_member_name[]"]');
                                const memberSumInsureds = document.querySelectorAll('input[name="health_member_sum_insured[]"]');
                                
                                for (let i = 0; i < memberNames.length; i++) {
                                    if (memberNames[i].value.trim() && (!memberSumInsureds[i] || !memberSumInsureds[i].value.trim())) {
                                        errors.push(`Sum insured is required for member: ${memberNames[i].value}`);
                                    }
                                }
                            }
                        }
                        
                        // Check if at least one health member is provided
                        const healthMemberNames = document.querySelectorAll('input[name="health_member_name[]"]');
                        let hasValidMember = false;
                        healthMemberNames.forEach(field => {
                            if (field.value.trim()) {
                                hasValidMember = true;
                            }
                        });
                        if (!hasValidMember) {
                            errors.push('Please provide at least one health insurance member name');
                        }
                    }
                }
            } catch (e) {
                console.warn('Product manager error:', e);
                // Continue validation even if product manager fails
            }
            
            // Show errors in UI
            showErrors(errors);
            
            if (errors.length > 0) {
                console.log('❌ Form validation failed with errors:', errors);
                return false;
            }
            
            console.log('✅ Form validation passed - submitting form');
            
            // Show loading state
            const submitBtn = document.getElementById('submitBtn');
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Adding Policy...';
            
            return true;
        }

        // Calculate gross premium automatically
        function calculateGrossPremium() {
            const netPremium = parseFloat(document.getElementById('net_premium').value) || 0;
            const addonPremium = parseFloat(document.getElementById('addon_premium').value) || 0;
            const tpTrPremium = parseFloat(document.getElementById('tp_tr_premium').value) || 0;
            const gstPercentage = parseFloat(document.getElementById('gst_percentage').value) || 0;
            
            // Calculate base amount (net + addon + tp/tr)
            const baseAmount = netPremium + addonPremium + tpTrPremium;
            
            // Calculate GST amount
            const gstAmount = (baseAmount * gstPercentage) / 100;
            
            // Calculate gross premium
            const grossPremium = baseAmount + gstAmount;
            
            // Round to whole number (no decimals)
            const roundedGrossPremium = Math.round(grossPremium);
            
            // Update the gross premium field
            document.getElementById('gross_premium').value = roundedGrossPremium;
            
            // Also recalculate commission if percentage is set
            calculateCommission();
        }

        // Calculate commission amount automatically
        function calculateCommission() {
            const netPremium = parseFloat(document.getElementById('net_premium').value) || 0;
            const addonPremium = parseFloat(document.getElementById('addon_premium').value) || 0;
            const commissionPercentage = parseFloat(document.getElementById('commission_percentage').value) || 0;
            
            // Commission is calculated on (Net + Addon) only
            const commissionBase = netPremium + addonPremium;
            const commissionAmount = (commissionBase * commissionPercentage) / 100;
            
            // Round to whole number (no decimals)
            const roundedCommissionAmount = Math.round(commissionAmount);
            
            // Update the commission amount field
            document.getElementById('commission_amount').value = roundedCommissionAmount;
        }
        
    </script>
    
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        // Initialize date pickers with DD/MM/YYYY format
        document.addEventListener('DOMContentLoaded', function() {
            flatpickr('.date-picker', {
                dateFormat: 'd/m/Y',
                altInput: false,
                allowInput: true,
                locale: {
                    firstDayOfWeek: 1
                }
            });
        });
    </script>
</body>
</html>


================================================
FILE: templates/base.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}{{ config.PORTAL_TITLE }}{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    {% block extra_css %}{% endblock %}
    <style>
        /* Hamburger Menu Styles */
        .hamburger-menu {
            display: flex;
            flex-direction: column;
            cursor: pointer;
            padding: 8px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .hamburger-menu:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .hamburger-line {
            width: 20px;
            height: 2px;
            background-color: #374151;
            margin: 2px 0;
            transition: 0.3s;
        }

        .hamburger-menu.active .hamburger-line:nth-child(1) {
            transform: rotate(-45deg) translate(-4px, 4px);
        }

        .hamburger-menu.active .hamburger-line:nth-child(2) {
            opacity: 0;
        }

        .hamburger-menu.active .hamburger-line:nth-child(3) {
            transform: rotate(45deg) translate(-4px, -4px);
        }

        /* Sidebar Styles */
        .sidebar {
            position: fixed;
            top: 0;
            left: -300px;
            width: 300px;
            height: 100vh;
            background: white;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            transition: left 0.3s ease;
            z-index: 1050;
            overflow-y: auto;
        }

        .sidebar.active {
            left: 0;
        }

        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1040;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .sidebar-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .sidebar-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #6b7280;
        }

        .sidebar-nav {
            padding: 20px 0;
        }

        .sidebar-nav-item {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: #374151;
            text-decoration: none;
            transition: background-color 0.2s;
        }

        .sidebar-nav-item:hover {
            background-color: #f3f4f6;
            color: #374151;
            text-decoration: none;
        }

        .sidebar-nav-item svg {
            width: 20px;
            height: 20px;
            margin-right: 12px;
            color: #6b7280;
        }

        .sidebar-nav-section {
            padding: 8px 20px;
            font-size: 12px;
            font-weight: 600;
            color: #9ca3af;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-top: 20px;
        }

        .sidebar-nav-section:first-child {
            margin-top: 0;
        }

        /* User Profile Styles */
        .user-profile {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
            transition: background-color 0.2s;
        }

        .user-profile:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 14px;
        }

        .user-name {
            color: white;
            font-size: 14px;
            font-weight: 500;
        }

        /* Simplified Navigation */
        .main-nav {
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .main-nav .btn {
            font-size: 14px;
            padding: 8px 16px;
        }

        @media (max-width: 768px) {
            .main-nav {
                display: none;
            }

            .user-name {
                display: none;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar Overlay -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <div class="d-flex align-items-center">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" width="24" height="24" class="me-2">
                <span class="fw-bold">{{ config.COMPANY_NAME }}</span>
            </div>
            <button class="sidebar-close" id="sidebarClose">&times;</button>
        </div>
        <nav class="sidebar-nav">
            <div class="sidebar-nav-section">Main Actions</div>
            <a href="{{ url_for('policies.add_policy') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                </svg>
                Add Policy
            </a>
            <a href="{{ url_for('pending_policies.add_pending') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                </svg>
                Add Pending Policy
            </a>
            <a href="{{ url_for('dashboard.view_all_policies') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                </svg>
                View All Policies
            </a>
            <a href="{{ url_for('claims.index') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                </svg>
                Claims
            </a>

            <div class="sidebar-nav-section">Management</div>
            <a href="{{ url_for('pending_policies.list_pending') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                </svg>
                Pending Policies
            </a>
            <a href="{{ url_for('existing_policies.list_all') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                </svg>
                All Clients
            </a>
            <a href="{{ url_for('whatsapp_logs.whatsapp_logs') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
                </svg>
                WhatsApp Logs
            </a>

            <div class="sidebar-nav-section">Data & Reports</div>
            <a href="/excel" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/>
                    <polyline points="14,2 14,8 20,8"/>
                    <path d="M12 18v-6"/>
                    <path d="m9 15 3 3 3-3"/>
                </svg>
                Excel Data
            </a>
            <a href="{{ url_for('renewal.renewal_export_page') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6z"/>
                    <polyline points="14,2 14,8 20,8"/>
                    <path d="M16 13a4 4 0 1 1 0 8 4 4 0 0 1 0-8z"/>
                    <path d="m14 15 2 2 4-4"/>
                </svg>
                Renewal Export
            </a>

            <div class="sidebar-nav-section">Account</div>
            <a href="{{ url_for('auth.logout') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.59L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z"/>
                </svg>
                Logout
            </a>
        </nav>
    </div>

    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <div class="d-flex align-items-center">
                <div class="hamburger-menu" id="hamburgerMenu">
                    <div class="hamburger-line"></div>
                    <div class="hamburger-line"></div>
                    <div class="hamburger-line"></div>
                </div>
                <a class="navbar-brand ms-3" href="{{ url_for('dashboard.index') }}">
                    <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                    {{ config.PORTAL_NAME }}
                </a>
            </div>
            <div class="d-flex align-items-center gap-3">
                <div class="main-nav">
                    <a href="{{ url_for('policies.add_policy') }}" class="btn btn-outline">Add Policy</a>
                    <a href="{{ url_for('pending_policies.add_pending') }}" class="btn btn-outline">Add Pending</a>
                    <a href="{{ url_for('dashboard.view_all_policies') }}" class="btn btn-outline">View All Policies</a>
                    <a href="{{ url_for('claims.index') }}" class="btn btn-primary">Claims</a>
                </div>
                <div class="user-profile" onclick="toggleUserMenu()">
                    <div class="user-avatar">{{ current_user.name[0].upper() if current_user and current_user.name else 'U' }}</div>
                    <span class="user-name d-none d-md-inline">{{ current_user.name if current_user and current_user.name else 'User' }}</span>
                </div>
            </div>
        </div>
    </nav>

    <div class="page-container">
        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    {% block extra_js %}{% endblock %}
    <script>
        // Sidebar functionality
        document.addEventListener('DOMContentLoaded', function() {
            initializeSidebar();
        });

        function initializeSidebar() {
            const hamburgerMenu = document.getElementById('hamburgerMenu');
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');
            const sidebarClose = document.getElementById('sidebarClose');

            // Toggle sidebar
            function toggleSidebar() {
                hamburgerMenu.classList.toggle('active');
                sidebar.classList.toggle('active');
                sidebarOverlay.classList.toggle('active');
                document.body.style.overflow = sidebar.classList.contains('active') ? 'hidden' : '';
            }

            // Close sidebar
            function closeSidebar() {
                hamburgerMenu.classList.remove('active');
                sidebar.classList.remove('active');
                sidebarOverlay.classList.remove('active');
                document.body.style.overflow = '';
            }

            // Event listeners
            hamburgerMenu.addEventListener('click', toggleSidebar);
            sidebarClose.addEventListener('click', closeSidebar);
            sidebarOverlay.addEventListener('click', closeSidebar);

            // Close sidebar when clicking on nav items (mobile)
            const sidebarNavItems = document.querySelectorAll('.sidebar-nav-item');
            sidebarNavItems.forEach(item => {
                item.addEventListener('click', () => {
                    if (window.innerWidth <= 768) {
                        closeSidebar();
                    }
                });
            });

            // Close sidebar on window resize if open
            window.addEventListener('resize', () => {
                if (window.innerWidth > 768 && sidebar.classList.contains('active')) {
                    closeSidebar();
                }
            });
        }

        // User menu functionality
        function toggleUserMenu() {
            // For now, just show a simple menu - you can expand this later
            const userOptions = [
                { label: 'Profile', action: () => alert('Profile functionality coming soon') },
                { label: 'Settings', action: () => alert('Settings functionality coming soon') },
                { label: 'Logout', action: () => window.location.href = '{{ url_for("auth.logout") }}' }
            ];

            // Create a simple dropdown menu
            const existingMenu = document.querySelector('.user-dropdown');
            if (existingMenu) {
                existingMenu.remove();
                return;
            }

            const dropdown = document.createElement('div');
            dropdown.className = 'user-dropdown';
            dropdown.style.cssText = `
                position: absolute;
                top: 100%;
                right: 0;
                background: white;
                border: 1px solid #e5e7eb;
                border-radius: 8px;
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
                z-index: 1000;
                min-width: 150px;
                margin-top: 8px;
            `;

            userOptions.forEach((option, index) => {
                const item = document.createElement('div');
                item.textContent = option.label;
                item.style.cssText = `
                    padding: 12px 16px;
                    cursor: pointer;
                    transition: background-color 0.2s;
                    ${index === userOptions.length - 1 ? '' : 'border-bottom: 1px solid #f3f4f6;'}
                `;
                item.addEventListener('mouseenter', () => item.style.backgroundColor = '#f3f4f6');
                item.addEventListener('mouseleave', () => item.style.backgroundColor = 'white');
                item.addEventListener('click', () => {
                    option.action();
                    dropdown.remove();
                });
                dropdown.appendChild(item);
            });

            const userProfile = document.querySelector('.user-profile');
            userProfile.style.position = 'relative';
            userProfile.appendChild(dropdown);

            // Close dropdown when clicking outside
            setTimeout(() => {
                document.addEventListener('click', function closeDropdown(e) {
                    if (!userProfile.contains(e.target)) {
                        dropdown.remove();
                        document.removeEventListener('click', closeDropdown);
                    }
                });
            }, 100);
        }
    </script>
</body>
</html>



================================================
FILE: templates/claims.html
================================================
{% extends "base.html" %}

{% block title %}Claims - Insta Insurances Portal{% endblock %}

{% block extra_css %}
<style>
    .search-container {
        background: var(--white);
        border-radius: var(--radius-lg);
        padding: var(--spacing-6);
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--gray-200);
        margin-bottom: var(--spacing-6);
    }

    .search-form {
        display: flex;
        gap: var(--spacing-3);
        align-items: center;
        flex-wrap: wrap;
    }

    .search-input {
        flex: 1;
        min-width: 200px;
    }

    .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: var(--spacing-4);
        margin-bottom: var(--spacing-6);
    }

    .stat-card {
        background: var(--white);
        border-radius: var(--radius-lg);
        padding: var(--spacing-4);
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--gray-200);
        text-align: center;
    }

    .stat-number {
        font-size: var(--font-size-2xl);
        font-weight: 700;
        color: var(--primary-blue);
    }

    .stat-label {
        color: var(--gray-600);
        font-size: var(--font-size-sm);
        margin-top: var(--spacing-1);
    }

    .table-container {
        background: var(--white);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--gray-200);
        overflow: hidden;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .table {
        margin-bottom: 0;
        min-width: 800px;
    }

    .table th {
        background: var(--gray-50);
        border-bottom: 2px solid var(--gray-200);
        font-weight: 600;
        color: var(--gray-900);
        padding: var(--spacing-4);
    }

    .table td {
        padding: var(--spacing-4);
        border-bottom: 1px solid var(--gray-100);
        vertical-align: middle;
    }

    .table tbody tr:hover {
        background: var(--gray-25);
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: var(--spacing-1) var(--spacing-2);
        border-radius: var(--radius-sm);
        font-size: var(--font-size-xs);
        font-weight: 500;
    }

    .status-badge.pending {
        background: var(--warning-light);
        color: #92400e;
    }

    .status-badge.processing {
        background: var(--info-light);
        color: #1e40af;
    }

    .status-badge.approved {
        background: var(--success-light);
        color: #065f46;
    }

    .status-badge.rejected {
        background: #fee2e2;
        color: #dc2626;
    }

    .status-badge.settled {
        background: #d1fae5;
        color: #065f46;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--spacing-6);
    }

    .page-title {
        font-size: var(--font-size-2xl);
        font-weight: 700;
        color: var(--gray-900);
        margin: 0;
    }

    @media (max-width: 768px) {
        .search-form {
            flex-direction: column;
            align-items: stretch;
        }

        .search-input {
            min-width: auto;
        }

        .page-header {
            flex-direction: column;
            align-items: flex-start;
            gap: var(--spacing-4);
        }

        .stats-container {
            grid-template-columns: 1fr;
        }
    }
</style>
{% endblock %}

{% block content %}
<div class="page-header">
    <h1 class="page-title">Claims Management</h1>
    <a href="{{ url_for('claims.add_claim') }}" class="btn btn-primary">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-2">
            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
        </svg>
        Add New Claim
    </a>
</div>

<!-- Search and Filter -->
<div class="search-container">
    <form method="GET" class="search-form">
        <input type="text" name="search" class="form-control search-input" 
               placeholder="Search by claim number, member name, or policy number..." 
               value="{{ current_search }}">
        <input type="text" name="client_id" class="form-control" 
               placeholder="Client ID" value="{{ current_client_id or '' }}" style="max-width: 150px;">
        <input type="text" name="policy_number" class="form-control" 
               placeholder="Policy Number" value="{{ current_policy_number or '' }}" style="max-width: 150px;">
        <button type="submit" class="btn btn-primary">Search</button>
        <a href="{{ url_for('claims.index') }}" class="btn btn-outline">Clear</a>
    </form>
</div>

<!-- Statistics -->
{% if stats %}
<div class="stats-container">
    <div class="stat-card">
        <div class="stat-number">{{ stats.get('total', 0) }}</div>
        <div class="stat-label">Total Claims</div>
    </div>
    <div class="stat-card">
        <div class="stat-number">{{ stats.get('pending', 0) }}</div>
        <div class="stat-label">Pending</div>
    </div>
    <div class="stat-card">
        <div class="stat-number">{{ stats.get('processing', 0) }}</div>
        <div class="stat-label">Processing</div>
    </div>
    <div class="stat-card">
        <div class="stat-number">{{ stats.get('approved', 0) }}</div>
        <div class="stat-label">Approved</div>
    </div>
    <div class="stat-card">
        <div class="stat-number">{{ stats.get('settled', 0) }}</div>
        <div class="stat-label">Settled</div>
    </div>
</div>
{% endif %}

<!-- Claims Table -->
<div class="table-container">
    {% if claims %}
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Claim #</th>
                    <th>Member Name</th>
                    <th>Policy Number</th>
                    <th>Claim Type</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Created Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for claim in claims %}
                <tr>
                    <td><strong>{{ claim.claim_number }}</strong></td>
                    <td>{{ claim.member_name }}</td>
                    <td>{{ claim.policy_number }}</td>
                    <td>{{ claim.claim_type }}</td>
                    <td>
                        {% if claim.claim_amount %}
                            ₹{{ "{:,.2f}".format(claim.claim_amount) }}
                        {% else %}
                            <span class="text-muted">Not specified</span>
                        {% endif %}
                    </td>
                    <td>
                        <span class="status-badge {{ claim.status.lower() }}">
                            {{ claim.status.title() }}
                        </span>
                    </td>
                    <td>{{ claim.created_at[:10] | indian_date if claim.created_at else 'N/A' }}</td>
                    <td>
                        <a href="{{ url_for('claims.view_claim', claim_id=claim.claim_id) }}" 
                           class="btn btn-sm btn-outline">View</a>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    {% else %}
    <div class="empty-state">
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <h5>No claims found</h5>
        <p>{% if current_search %}No claims match your search criteria.{% else %}No claims have been added yet.{% endif %}</p>
        <a href="{{ url_for('claims.add_claim') }}" class="btn btn-primary mt-3">Add First Claim</a>
    </div>
    {% endif %}
</div>
{% endblock %}



================================================
FILE: templates/claims_backup.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Claims Management - Insta Insurance Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <style>
        .claims-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: var(--spacing-4);
            margin-bottom: var(--spacing-6);
        }
        .stat-card {
            background: var(--white);
            border-radius: var(--radius-lg);
            padding: var(--spacing-4);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
            text-align: center;
        }
        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: var(--spacing-2);
        }
        .stat-label {
            color: var(--gray-600);
            font-size: 0.875rem;
            font-weight: 500;
        }
        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        .status-PENDING { background-color: var(--warning-light); color: #92400e; }
        .status-PROCESSING { background-color: var(--info-light); color: #1e40af; }
        .status-APPROVED { background-color: #cce5ff; color: #004085; }
        .status-SETTLED { background-color: var(--success-light); color: #065f46; }
        .status-REJECTED { background-color: var(--danger-light); color: #991b1b; }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <div class="d-flex gap-2">
                <a href="{{ url_for('dashboard.index') }}" class="btn btn-outline">Dashboard</a>
                <a href="{{ url_for('existing_policies.list_all') }}" class="btn btn-outline">All Clients</a>
                <a href="{{ url_for('auth.logout') }}" class="btn btn-outline">Logout</a>
            </div>
        </div>
    </nav>

    <div class="page-container">
        <div class="content-header">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1>Claims Management</h1>
                    <p class="text-muted">Manage insurance claims and track their status.</p>
                    {% if client_name %}
                        <div class="mt-2">
                            <span class="badge bg-info">Filtered by Client: {{ client_name }}</span>
                            <a href="{{ url_for('claims.index') }}" class="btn btn-sm btn-outline-secondary ms-2">Clear Filter</a>
                        </div>
                    {% endif %}
                </div>
                <a href="{{ url_for('claims.add_claim') }}" class="btn btn-primary">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor" class="me-2"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>
                    Add New Claim
                </a>
            </div>
        </div>

        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else category }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <!-- Search and Filter Section -->
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title mb-3">Search Claims</h5>
                <form method="GET" action="{{ url_for('claims.index') }}">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="search" class="form-label">General Search</label>
                            <input type="text" class="form-control" id="search" name="search" 
                                   placeholder="Search by claim number, member, client, or policy..." 
                                   value="{{ current_search or '' }}">
                        </div>
                        <div class="col-md-3">
                            <label for="clientSearch" class="form-label">Search by Client</label>
                            <div class="position-relative">
                                <input type="text" class="form-control" id="clientSearch" 
                                       placeholder="Type client name..." autocomplete="off">
                                <input type="hidden" id="selectedClientId" name="client_id" value="{{ current_client_id or '' }}">
                                <div id="clientResults" class="position-absolute w-100 bg-white border rounded shadow-sm" style="z-index: 1000; display: none; max-height: 200px; overflow-y: auto;"></div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label for="policySelect" class="form-label">Select Policy</label>
                            <select class="form-select" id="policySelect" name="policy_number" disabled>
                                <option value="">Select a client first</option>
                            </select>
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary me-2">Search</button>
                            <a href="{{ url_for('claims.index') }}" class="btn btn-outline-secondary">Clear</a>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <div class="claims-stats">
            <div class="stat-card"><div class="stat-number text-primary">{{ stats.total }}</div><div class="stat-label">Total Claims</div></div>
            <div class="stat-card"><div class="stat-number" style="color:#f59e0b;">{{ stats.pending }}</div><div class="stat-label">Pending</div></div>
            <div class="stat-card"><div class="stat-number" style="color:#3b82f6;">{{ stats.processing }}</div><div class="stat-label">Processing</div></div>
            <div class="stat-card"><div class="stat-number" style="color:#8b5cf6;">{{ stats.approved }}</div><div class="stat-label">Approved</div></div>
            <div class="stat-card"><div class="stat-number" style="color:#10b981;">{{ stats.settled }}</div><div class="stat-label">Settled</div></div>
            <div class="stat-card"><div class="stat-number" style="color:#ef4444;">{{ stats.rejected }}</div><div class="stat-label">Rejected</div></div>
        </div>

        <div class="table-container">
            {% if claims %}
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Claim Number</th>
                            <th>Policy & Client</th>
                            <th>Member</th>
                            <th>Claim Type</th>
                            <th>Claimed Amount</th>
                            <th>Approved Amount</th>
                            <th>Status</th>
                            <th>Created On</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for claim in claims %}
                        <tr>
                            <td><strong>{{ claim.claim_number or ('#' + claim.claim_id|string) }}</strong></td>
                            <td>
                                <div>{{ claim.policies.policy_number }}</div>
                                <small class="text-muted">{{ claim.policies.clients.name }}</small>
                            </td>
                            <td>{{ claim.member_name }}</td>
                            <td>
                                <span class="badge rounded-pill bg-info text-dark">{{ claim.claim_type }}</span>
                            </td>
                            <td>
                                {% if claim.claimed_amount %}
                                    ₹{{ "{:,.2f}".format(claim.claimed_amount) }}
                                {% else %}
                                    -
                                {% endif %}
                            </td>
                            <td>
                                {% if claim.approved_amount or claim.settled_amount %}
                                    ₹{{ "{:,.2f}".format(claim.approved_amount or claim.settled_amount) }}
                                {% else %}
                                    -
                                {% endif %}
                            </td>
                            <td>
                                <span class="status-badge status-{{ claim.status }}">{{ claim.status }}</span>
                            </td>
                            <td>{{ claim.created_at | indian_date if claim.created_at else '-' }}</td>
                            <td>
                                <a href="{{ url_for('claims.view_claim', claim_id=claim.claim_id) }}" class="btn btn-sm btn-outline-primary">
                                    View Details
                                </a>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            {% else %}
            <div class="empty-state">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" width="64" height="64" class="text-muted mb-3"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
                <h5>No Claims Found</h5>
                <p>Start by adding the first insurance claim for a client.</p>
                <a href="{{ url_for('claims.add_claim') }}" class="btn btn-primary mt-3">Add New Claim</a>
            </div>
            {% endif %}
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const clientSearchInput = document.getElementById('clientSearch');
            const clientResults = document.getElementById('clientResults');
            const selectedClientId = document.getElementById('selectedClientId');
            const policySelect = document.getElementById('policySelect');
            let searchTimeout;

            // Initialize with current client if set
            if (selectedClientId.value) {
                loadClientPolicies(selectedClientId.value);
                // Set the client name in the search input
                const clientName = "{{ client_name|default('') }}";
                if (clientName) {
                    clientSearchInput.value = clientName;
                }
            }

            // Client search functionality
            clientSearchInput.addEventListener('input', function() {
                const searchTerm = this.value.trim();
                
                clearTimeout(searchTimeout);
                
                if (searchTerm.length < 2) {
                    clientResults.style.display = 'none';
                    selectedClientId.value = '';
                    resetPolicySelect();
                    return;
                }

                searchTimeout = setTimeout(() => {
                    fetch(`{{ url_for('claims.search_clients') }}?search=${encodeURIComponent(searchTerm)}`)
                        .then(response => response.json())
                        .then(data => {
                            displayClientResults(data.clients || []);
                        })
                        .catch(error => {
                            console.error('Error searching clients:', error);
                            clientResults.style.display = 'none';
                        });
                }, 300);
            });

            // Hide results when clicking outside
            document.addEventListener('click', function(e) {
                if (!clientSearchInput.contains(e.target) && !clientResults.contains(e.target)) {
                    clientResults.style.display = 'none';
                }
            });

            function displayClientResults(clients) {
                if (clients.length === 0) {
                    clientResults.innerHTML = '<div class="p-2 text-muted">No clients found</div>';
                } else {
                    clientResults.innerHTML = clients.map(client => 
                        `<div class="client-result p-2 border-bottom cursor-pointer" data-client-id="${client.client_id}" data-client-name="${client.name}">
                            <strong>${client.name}</strong>
                            <small class="text-muted d-block">ID: ${client.client_id}</small>
                        </div>`
                    ).join('');
                }
                clientResults.style.display = 'block';

                // Add click handlers to results
                clientResults.querySelectorAll('.client-result').forEach(result => {
                    result.addEventListener('click', function() {
                        const clientId = this.dataset.clientId;
                        const clientName = this.dataset.clientName;
                        
                        clientSearchInput.value = clientName;
                        selectedClientId.value = clientId;
                        clientResults.style.display = 'none';
                        
                        loadClientPolicies(clientId);
                    });
                });
            }

            function loadClientPolicies(clientId) {
                policySelect.disabled = true;
                policySelect.innerHTML = '<option value="">Loading policies...</option>';

                fetch(`{{ url_for('claims.get_client_policies') }}?client_id=${encodeURIComponent(clientId)}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.policies && data.policies.length > 0) {
                            const currentPolicyNumber = "{{ current_policy_number|default('') }}";
                            policySelect.innerHTML = '<option value="">All policies for this client</option>' +
                                data.policies.map(policy => 
                                    `<option value="${policy.policy_number}" ${policy.policy_number === currentPolicyNumber ? 'selected' : ''}>
                                        ${policy.policy_number} - ${policy.product_name}
                                    </option>`
                                ).join('');
                        } else {
                            policySelect.innerHTML = '<option value="">No policies found</option>';
                        }
                        policySelect.disabled = false;
                    })
                    .catch(error => {
                        console.error('Error loading policies:', error);
                        policySelect.innerHTML = '<option value="">Error loading policies</option>';
                        policySelect.disabled = false;
                    });
            }

            function resetPolicySelect() {
                policySelect.innerHTML = '<option value="">Select a client first</option>';
                policySelect.disabled = true;
            }

            // Clear client selection when input is cleared
            clientSearchInput.addEventListener('blur', function() {
                if (!this.value.trim()) {
                    selectedClientId.value = '';
                    resetPolicySelect();
                }
            });
        });
    </script>

    <style>
        .client-result {
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .client-result:hover {
            background-color: #f8f9fa;
        }
        .cursor-pointer {
            cursor: pointer;
        }
    </style>
</body>
</html>


================================================
FILE: templates/complete_pending.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Complete Pending Policy - {{ config.PORTAL_TITLE }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        }
        .navbar {
            background: white !important;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 16px 0;
        }
        .navbar-brand {
            color: #1a202c !important;
            font-weight: 600;
            font-size: 20px;
        }
        .btn-outline {
            background: white;
            border: 1px solid #e2e8f0;
            color: #4a5568;
            padding: 10px 24px;
            font-weight: 500;
            border-radius: 8px;
        }
        .form-container {
            max-width: 700px;
            margin: 40px auto;
            background: white;
            border-radius: 12px;
            padding: 40px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        }
        .form-container h4 {
            margin-bottom: 32px;
            font-size: 24px;
            font-weight: 600;
            color: #1a202c;
        }
        .info-section {
            background: #f7fafc;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 24px;
        }
        .info-section h5 {
            font-size: 16px;
            font-weight: 600;
            color: #1a202c;
            margin-bottom: 16px;
        }
        .info-row {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #e2e8f0;
        }
        .info-row:last-child {
            border-bottom: none;
        }
        .info-label {
            font-weight: 500;
            color: #718096;
            font-size: 14px;
        }
        .info-value {
            color: #1a202c;
            font-size: 14px;
        }
        .form-label {
            font-weight: 500;
            color: #4a5568;
            margin-bottom: 8px;
            font-size: 14px;
        }
        .form-control {
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 12px 16px;
            font-size: 15px;
        }
        .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        .btn-primary {
            background: #10b981;
            border: none;
            padding: 12px 32px;
            font-weight: 500;
            border-radius: 8px;
            font-size: 15px;
        }
        .btn-primary:hover {
            background: #059669;
        }
        .btn-secondary {
            background: white;
            border: 1px solid #e2e8f0;
            color: #4a5568;
            padding: 12px 32px;
            font-weight: 500;
            border-radius: 8px;
            font-size: 15px;
        }
        .alert {
            border-radius: 8px;
            border: none;
        }
        .whatsapp-section {
            background: #f0fdf4;
            border: 2px solid #86efac;
            border-radius: 8px;
            padding: 20px;
            margin: 24px 0;
        }
        .whatsapp-checkbox {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        .whatsapp-checkbox input[type="checkbox"] {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }
        .whatsapp-checkbox label {
            font-weight: 500;
            color: #166534;
            cursor: pointer;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 8px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <a href="{{ url_for('pending_policies.list_pending') }}" class="btn btn-outline">Back to Pending Policies</a>
        </div>
    </nav>

    <div class="form-container">
        <h4>Complete Pending Policy</h4>

        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                <div class="alert alert-{{ 'danger' if category == 'error' else 'success' }}">{{ message }}</div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <div class="info-section">
            <h5>Pending Policy Details</h5>
            <div class="info-row">
                <span class="info-label">Pending ID:</span>
                <span class="info-value">#{{ pending.pending_id }}</span>
            </div>
            <div class="info-row">
                <span class="info-label">Member:</span>
                <span class="info-value">{{ pending.customer_name }}</span>
            </div>
            <div class="info-row">
                <span class="info-label">Email:</span>
                <span class="info-value">{{ pending.customer_email or 'N/A' }}</span>
            </div>
            <div class="info-row">
                <span class="info-label">Phone:</span>
                <span class="info-value">{{ pending.customer_phone or 'N/A' }}</span>
            </div>
            <div class="info-row">
                <span class="info-label">Company:</span>
                <span class="info-value">{{ pending.insurance_company }}</span>
            </div>
            <div class="info-row">
                <span class="info-label">Product:</span>
                <span class="info-value">{{ pending.product_name or 'N/A' }}</span>
            </div>
            <div class="info-row">
                <span class="info-label">Amount Paid:</span>
                <span class="info-value">{{ 'Rs. {:,.2f}'.format(pending.amount_paid) if pending.amount_paid else 'N/A' }}</span>
            </div>
            <div class="info-row">
                <span class="info-label">Payment Date:</span>
                <span class="info-value">{{ pending.date_of_payment | indian_date }}</span>
            </div>
            {% if pending.notes %}
            <div class="info-row">
                <span class="info-label">Notes:</span>
                <span class="info-value">{{ pending.notes }}</span>
            </div>
            {% endif %}
        </div>

        <form action="{{ url_for('pending_policies.complete_pending', pending_id=pending.pending_id) }}" method="POST" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="policy_number" class="form-label">Policy Number (Optional)</label>
                <input type="text" name="policy_number" id="policy_number" class="form-control" placeholder="Enter policy number">
            </div>

            <div class="mb-4">
                <label for="policy_file" class="form-label">Upload Policy Document</label>
                <input type="file" name="policy_file" id="policy_file" class="form-control" accept=".pdf,.doc,.docx" required>
                <small class="text-muted">Accepted formats: PDF, DOC, DOCX (Max 10MB)</small>
            </div>

            <div class="whatsapp-section">
                <div class="whatsapp-checkbox">
                    <input type="checkbox" name="send_to_customer" id="send_to_customer" value="yes"
                           {% if pending.customer_phone or pending.customer_email %}checked{% endif %}>
                    <label for="send_to_customer">
                         Send completed policy to customer via WhatsApp & Email
                    </label>
                </div>
                <small class="text-muted d-block mt-2">
                    {% if pending.customer_phone and pending.customer_email %}
                        Will send via WhatsApp and Email
                    {% elif pending.customer_phone %}
                        Will send via WhatsApp only (no email available)
                    {% elif pending.customer_email %}
                        Will send via Email only (no phone available)
                    {% else %}
                        Customer has no contact information
                    {% endif %}
                </small>
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary">Complete Policy</button>
                <a href="{{ url_for('pending_policies.list_pending') }}" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


================================================
FILE: templates/dashboard.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - {{ config.PORTAL_TITLE }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        .dashboard-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: var(--spacing-6);
            margin-bottom: var(--spacing-8);
        }

        .stat-card {
            background: var(--white);
            border-radius: var(--radius-lg);
            padding: var(--spacing-6);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .stat-icon {
            width: 48px;
            height: 48px;
            border-radius: var(--radius-lg);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: var(--spacing-4);
        }

        .stat-icon.expiring {
            background: var(--warning-light);
            color: var(--warning);
        }

        .stat-icon.pending {
            background: var(--info-light);
            color: var(--info);
        }

        .stat-icon.total {
            background: var(--success-light);
            color: var(--success);
        }
        
        /* New Style for Claims Stat Icon */
        .stat-icon.claims {
            background: #e0e7ff; /* A light indigo */
            color: #4338ca;    /* A darker indigo */
        }

        .stat-number {
            font-size: var(--font-size-3xl);
            font-weight: 700;
            color: var(--gray-900);
            margin: 0;
        }

        .stat-label {
            color: var(--gray-600);
            font-size: var(--font-size-sm);
            font-weight: 500;
            margin: var(--spacing-1) 0 0 0;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: var(--spacing-4);
            margin-bottom: var(--spacing-8);
        }

        .table-responsive {
            overflow-x: auto;
            width: 100%;
        }

        .table {
            width: 100%;
            table-layout: fixed;
            min-width: 1100px; /* Add this line */
        }

        /* Column width constraints */
        /* Replace this section */
        .table th:nth-child(1), .table td:nth-child(1) { width: 7%; } /* Policy ID */
        .table th:nth-child(2), .table td:nth-child(2) { width: 16%; } /* Customer */
        .table th:nth-child(3), .table td:nth-child(3) { width: 18%; } /* Company */
        .table th:nth-child(4), .table td:nth-child(4) { width: 14%; } /* Policy Details */
        .table th:nth-child(5), .table td:nth-child(5) { width: 9%; } /* Expiry Date */
        .table th:nth-child(6), .table td:nth-child(6) { width: 9%; } /* Last Reminder */
        .table th:nth-child(7), .table td:nth-child(7) { width: 7%; } /* Status */
        .table th:nth-child(8), .table td:nth-child(8) { width: 7%; } /* Document */
        .table th:nth-child(9), .table td:nth-child(9) { width: 13%; text-align: right; padding-right: 15px; } /* Actions */

        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: 4px;
            align-items: flex-end;
            width: 70px;
            margin-left: auto;
        }

        .action-buttons .btn {
            white-space: nowrap;
            font-size: 9px;
            padding: 3px 4px;
            min-width: 0;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 2px;
        }

        /* Ensure text doesn't overflow */
        .table td {
            word-wrap: break-word;
            overflow-wrap: break-word;
            max-width: 0;
        }

        /* Customer info styling */
        .customer-info {
            max-width: 100%;
        }

        .customer-name {
            font-size: var(--font-size-sm);
            line-height: 1.3;
        }

        .customer-contact {
            font-size: var(--font-size-xs);
            line-height: 1.2;
        }

        /* Company name styling */
        .table td:nth-child(3) {
            font-size: var(--font-size-sm);
            line-height: 1.3;
        }

        /* Policy details styling */
        .table td:nth-child(4) {
            font-size: var(--font-size-sm);
            line-height: 1.3;
        }

        .quick-action-card {
            background: var(--white);
            border-radius: var(--radius-lg);
            padding: var(--spacing-6);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
            text-align: center;
            transition: all 0.2s ease;
            text-decoration: none;
            color: inherit;
        }

        .quick-action-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
            color: inherit;
            text-decoration: none;
        }

        .quick-action-icon {
            width: 40px;
            height: 40px;
            margin: 0 auto var(--spacing-3) auto;
            background: var(--secondary-blue);
            border-radius: var(--radius-lg);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--primary-blue);
        }

        .quick-action-title {
            font-weight: 600;
            color: var(--gray-900);
            margin: 0 0 var(--spacing-1) 0;
        }

        .quick-action-desc {
            color: var(--gray-600);
            font-size: var(--font-size-sm);
            margin: 0;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--spacing-6);
        }

        .section-title {
            font-size: var(--font-size-xl);
            font-weight: 600;
            color: var(--gray-900);
            margin: 0;
        }

        .whatsapp-icon {
            width: 16px;
            height: 16px;
        }

        .customer-info {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-1);
        }

        .customer-name {
            font-weight: 500;
            color: var(--gray-900);
        }

        .customer-contact {
            font-size: var(--font-size-xs);
            color: var(--gray-500);
        }

        .policy-badge {
            display: inline-flex;
            align-items: center;
            gap: var(--spacing-1);
            padding: var(--spacing-1) var(--spacing-2);
            border-radius: var(--radius-sm);
            font-size: var(--font-size-xs);
            font-weight: 500;
        }

        .policy-badge.paid {
            background: var(--success-light);
            color: #065f46;
        }

        .policy-badge.pending {
            background: var(--warning-light);
            color: #92400e;
        }

        .policy-badge.active {
            background: #d1fae5;
            color: #065f46;
        }

        .policy-badge.expiring-soon {
            background: #fef3c7;
            color: #92400e;
        }

        .policy-badge.expired {
            background: #fee2e2;
            color: #dc2626;
        }

        .policy-badge.unknown {
            background: #f3f4f6;
            color: #6b7280;
        }

        @media (max-width: 1200px) {
            .table th:nth-child(1), .table td:nth-child(1) { width: 10%; } /* Policy ID */
            .table th:nth-child(2), .table td:nth-child(2) { width: 20%; } /* Customer */
            .table th:nth-child(3), .table td:nth-child(3) { width: 22%; } /* Company */
            .table th:nth-child(4), .table td:nth-child(4) { width: 15%; } /* Policy Details */
            .table th:nth-child(5), .table td:nth-child(5) { width: 10%; } /* Expiry Date */
            .table th:nth-child(6), .table td:nth-child(6) { width: 8%; } /* Last Reminder */
            .table th:nth-child(7), .table td:nth-child(7) { width: 8%; } /* Status */
            .table th:nth-child(8), .table td:nth-child(8) { width: 7%; } /* Document */
        }

        /* Hamburger Menu Styles */
        .hamburger-menu {
            display: none;
            flex-direction: column;
            cursor: pointer;
            padding: 8px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .hamburger-menu:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .hamburger-line {
            width: 20px;
            height: 2px;
            background-color: #374151;
            margin: 2px 0;
            transition: 0.3s;
        }

        .hamburger-menu.active .hamburger-line:nth-child(1) {
            transform: rotate(-45deg) translate(-4px, 4px);
        }

        .hamburger-menu.active .hamburger-line:nth-child(2) {
            opacity: 0;
        }

        .hamburger-menu.active .hamburger-line:nth-child(3) {
            transform: rotate(45deg) translate(-4px, -4px);
        }

        /* Sidebar Styles */
        .sidebar {
            position: fixed;
            top: 0;
            left: -300px;
            width: 300px;
            height: 100vh;
            background: white;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            transition: left 0.3s ease;
            z-index: 1050;
            overflow-y: auto;
        }

        .sidebar.active {
            left: 0;
        }

        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1040;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .sidebar-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .sidebar-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #6b7280;
        }

        .sidebar-nav {
            padding: 20px 0;
        }

        .sidebar-nav-item {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: #374151;
            text-decoration: none;
            transition: background-color 0.2s;
        }

        .sidebar-nav-item:hover {
            background-color: #f3f4f6;
            color: #374151;
            text-decoration: none;
        }

        .sidebar-nav-item svg {
            width: 20px;
            height: 20px;
            margin-right: 12px;
            color: #6b7280;
        }

        .sidebar-nav-section {
            padding: 8px 20px;
            font-size: 12px;
            font-weight: 600;
            color: #9ca3af;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-top: 20px;
        }

        .sidebar-nav-section:first-child {
            margin-top: 0;
        }

        /* User Profile Styles */
        .user-profile {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
            transition: background-color 0.2s;
        }

        .user-profile:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 14px;
        }

        .user-name {
            color: white;
            font-size: 14px;
            font-weight: 500;
        }

        /* Simplified Navigation */
        .main-nav {
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .main-nav .btn {
            font-size: 14px;
            padding: 8px 16px;
        }

        /* Always show hamburger menu */
        .hamburger-menu {
            display: flex;
        }

        @media (max-width: 768px) {
            .main-nav {
                display: none;
            }

            .dashboard-stats {
                grid-template-columns: 1fr;
            }

            .quick-actions {
                grid-template-columns: 1fr;
            }

            .section-header {
                flex-direction: column;
                align-items: flex-start;
                gap: var(--spacing-4);
            }

            /* Make table more compact on mobile */
            .table th, .table td {
                padding: var(--spacing-2);
                font-size: var(--font-size-xs);
            }

            .action-buttons .btn {
                font-size: 9px;
                padding: 2px 3px;
            }
            .action-buttons .btn svg {
                width: 8px;
                height: 8px;
            }
            .whatsapp-icon {
                width: 8px;
                height: 8px;
            }

            .customer-name {
                font-size: var(--font-size-xs);
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar Overlay -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <div class="d-flex align-items-center">
                <img src="{{ url_for('static', filename='ico.png') }}" alt="Insta Insurance" width="24" height="24" class="me-2">
                <span class="fw-bold">Insta Insurance</span>
            </div>
            <button class="sidebar-close" id="sidebarClose">&times;</button>
        </div>
        <nav class="sidebar-nav">
            <div class="sidebar-nav-section">Main Actions</div>
            <a href="{{ url_for('policies.add_policy') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                </svg>
                Add Policy
            </a>
            <a href="{{ url_for('pending_policies.add_pending') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                </svg>
                Add Pending Policy
            </a>
            <a href="{{ url_for('dashboard.view_all_policies') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                </svg>
                View All Policies
            </a>
            <a href="{{ url_for('claims.index') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                </svg>
                Claims
            </a>

            <div class="sidebar-nav-section">Management</div>
            <a href="{{ url_for('pending_policies.list_pending') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                </svg>
                Pending Policies
            </a>
            <a href="{{ url_for('existing_policies.list_all') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                </svg>
                All Clients
            </a>
            <a href="{{ url_for('whatsapp_logs.whatsapp_logs') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
                </svg>
                WhatsApp Logs
            </a>

            <div class="sidebar-nav-section">Data & Reports</div>
            <a href="/excel" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/>
                    <polyline points="14,2 14,8 20,8"/>
                    <path d="M12 18v-6"/>
                    <path d="m9 15 3 3 3-3"/>
                </svg>
                Excel Data
            </a>
            <a href="{{ url_for('renewal.renewal_export_page') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6z"/>
                    <polyline points="14,2 14,8 20,8"/>
                    <path d="M16 13a4 4 0 1 1 0 8 4 4 0 0 1 0-8z"/>
                    <path d="m14 15 2 2 4-4"/>
                </svg>
                Renewal Export
            </a>

            <div class="sidebar-nav-section">Account</div>
            {% if current_user.is_admin %}
            <a href="{{ url_for('settings.index') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 15.5A3.5 3.5 0 0 1 8.5 12A3.5 3.5 0 0 1 12 8.5a3.5 3.5 0 0 1 3.5 3.5 3.5 3.5 0 0 1-3.5 3.5m7.43-2.53c.04-.32.07-.64.07-.97 0-.33-.03-.66-.07-1l2.11-1.63c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.31-.61-.22l-2.49 1c-.52-.39-1.06-.73-1.69-.98l-.37-2.65A.506.506 0 0 0 14 2h-4c-.25 0-.46.18-.5.42l-.37 2.65c-.63.25-1.17.59-1.69.98l-2.49-1c-.22-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64L4.57 11c-.04.34-.07.67-.07 1 0 .33.03.65.07.97l-2.11 1.66c-.19.15-.25.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1.01c.52.4 1.06.74 1.69.99l.37 2.65c.04.24.25.42.5.42h4c.25 0 .46-.18.5-.42l.37-2.65c.63-.26 1.17-.59 1.69-.99l2.49 1.01c.22.08.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.66Z"/>
                </svg>
                Settings
            </a>
            {% endif %}
            <a href="{{ url_for('auth.logout') }}" class="sidebar-nav-item">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.59L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z"/>
                </svg>
                Logout
            </a>
        </nav>
    </div>

    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <div class="d-flex align-items-center">
                <div class="hamburger-menu" id="hamburgerMenu">
                    <div class="hamburger-line"></div>
                    <div class="hamburger-line"></div>
                    <div class="hamburger-line"></div>
                </div>
                <a class="navbar-brand ms-3" href="{{ url_for('dashboard.index') }}">
                    <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
                </a>
            </div>
            <div class="d-flex align-items-center gap-3">
                <div class="main-nav">
                    <a href="{{ url_for('policies.add_policy') }}" class="btn btn-outline">Add Policy</a>
                    <a href="{{ url_for('pending_policies.add_pending') }}" class="btn btn-outline">Add Pending</a>
                    <a href="{{ url_for('dashboard.view_all_policies') }}" class="btn btn-outline">View All Policies</a>
                    <a href="{{ url_for('claims.index') }}" class="btn btn-primary">Claims</a>
                </div>
                <div class="user-profile" onclick="toggleUserMenu()">
                    <div class="user-avatar">{{ current_user.name[0].upper() if current_user and current_user.name else 'U' }}</div>
                    <span class="user-name d-none d-md-inline">{{ current_user.name if current_user and current_user.name else 'User' }}</span>
                </div>
            </div>
        </div>
    </nav>

    <div class="page-container">
        <!-- Dashboard Stats -->
        <div class="dashboard-stats">
            <div class="stat-card">
                <div class="stat-icon expiring">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                </div>
                <h3 class="stat-number">{{ policies|length if policies else 0 }}</h3>
                <p class="stat-label">Policies Expiring Soon</p>
            </div>
            <div class="stat-card">
                <div class="stat-icon pending">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                    </svg>
                </div>
                <h3 class="stat-number">{{ total_pending_policies if total_pending_policies else 0 }}</h3>
                <p class="stat-label">Pending Policies</p>
            </div>
            <!-- *** ADDITION 2: CLAIMS STATS CARD *** -->
            <div class="stat-card">
                <div class="stat-icon claims">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                    </svg>
                </div>
                <h3 class="stat-number">{{ total_claims if total_claims else 0 }}</h3>
                <p class="stat-label">Total Claims</p>
            </div>
            <div class="stat-card">
                <div class="stat-icon total">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                    </svg>
                </div>
                <h3 class="stat-number">{{ total_active_policies if total_active_policies else 0 }}</h3>
                <p class="stat-label">Total Active Policies</p>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions">
            <a href="{{ url_for('policies.add_policy') }}" class="quick-action-card">
                <div class="quick-action-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                    </svg>
                </div>
                <h4 class="quick-action-title">Add New Policy</h4>
                <p class="quick-action-desc">Register a new insurance policy</p>
            </a>
            <a href="{{ url_for('pending_policies.add_pending') }}" class="quick-action-card">
                <div class="quick-action-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                    </svg>
                </div>
                <h4 class="quick-action-title">Add Pending Policy</h4>
                <p class="quick-action-desc">Track pending policy applications</p>
            </a>
            <a href="{{ url_for('dashboard.view_all_policies') }}" class="quick-action-card">
                <div class="quick-action-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                    </svg>
                </div>
                <h4 class="quick-action-title">View All Policies</h4>
                <p class="quick-action-desc">Browse all policies with search and pagination</p>
            </a>
            <a href="{{ url_for('existing_policies.list_all') }}" class="quick-action-card">
                <div class="quick-action-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                    </svg>
                </div>
                <h4 class="quick-action-title">View All Clients</h4>
                <p class="quick-action-desc">Browse clients, members, and their policies</p>
            </a>
            <!-- *** ADDITION 3: CLAIMS QUICK ACTION CARD *** -->
            <a href="{{ url_for('claims.index') }}" class="quick-action-card">
                <div class="quick-action-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                    </svg>
                </div>
                <h4 class="quick-action-title">Manage Claims</h4>
                <p class="quick-action-desc">View and process all claims</p>
            </a>
            <a href="{{ url_for('pending_policies.list_pending') }}" class="quick-action-card">
                <div class="quick-action-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                    </svg>
                </div>
                <h4 class="quick-action-title">Pending Policies</h4>
                <p class="quick-action-desc">Review pending applications</p>
            </a>
            <a href="/excel" class="quick-action-card">
                <div class="quick-action-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/>
                        <polyline points="14,2 14,8 20,8"/>
                        <path d="M12 18v-6"/>
                        <path d="m9 15 3 3 3-3"/>
                    </svg>
                </div>
                <h4 class="quick-action-title">Excel Data</h4>
                <p class="quick-action-desc">View and manage data in Excel format</p>
            </a>
            <a href="{{ url_for('renewal.renewal_export_page') }}" class="quick-action-card">
                <div class="quick-action-icon">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8l-6-6z"/>
                        <polyline points="14,2 14,8 20,8"/>
                        <path d="M16 13a4 4 0 1 1 0 8 4 4 0 0 1 0-8z"/>
                        <path d="m14 15 2 2 4-4"/>
                    </svg>
                </div>
                <h4 class="quick-action-title">Renewal Export</h4>
                <p class="quick-action-desc">Export policies expiring by month</p>
            </a>
        </div>

        <!-- Policies Expiring Soon Section -->
        <div class="section-header">
            <h2 class="section-title">Policies Expiring Soon</h2>
            <div class="d-flex gap-2">
                <a href="{{ url_for('dashboard.view_all_policies') }}" class="btn btn-outline">View All Policies</a>
                <a href="{{ url_for('existing_policies.list_all') }}" class="btn btn-outline">View All Clients</a>
                <a href="{{ url_for('policies.add_policy') }}" class="btn btn-primary">Add Policy</a>
            </div>
        </div>

        <div class="table-container">
            {% if policies %}
            <div class="mb-4">
                <span class="text-muted">Showing {{ policies|length }} policies requiring attention (expiring within 30 days)</span>
            </div>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Policy ID</th>
                            <th>Member</th>
                            <th>Company</th>
                            <th>Policy Details</th>
                            <th>Expiry Date</th>
                            <th>Last Reminder</th>
                            <th>Status</th>
                            <th>Document</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for policy in policies %}
                        <tr>
                            <td><strong>#{{ policy.policy_id }}</strong></td>
                            <td>
                                <div class="customer-info">
                                    <div class="customer-name">{{ policy.member_name }}</div>
                                {% if policy.customer_phone %}
                                    <div class="customer-contact">{{ policy.customer_phone }}</div>
                                {% endif %}
                                </div>
                            </td>
                            <td>{{ policy.insurance_company }}</td>
                            <td>
                                {% if policy.remarks %}
                                    {{ policy.remarks }}
                                {% else %}
                                    <span class="text-muted">{{ policy.product_name }}</span>
                                {% endif %}
                            </td>
                            <td>{{ policy.policy_to | indian_date }}</td>
                            <td>
                                {% if policy.last_reminder_sent %}
                                    <small class="text-muted">{{ policy.last_reminder_sent[:10] | indian_date }}</small>
                                {% else %}
                                    <small class="text-muted">Never</small>
                                {% endif %}
                            </td>
                            <td>
                                {% set status_info = policy | policy_status %}
                                <span class="policy-badge {{ status_info.class }}">{{ status_info.label }}</span>
                            </td>
                            <td>
                                {% if policy.drive_url %}
                                <a href="{{ policy.drive_url }}" target="_blank" class="btn btn-sm btn-outline">
                                    <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                                        <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                                    </svg>
                                    View
                                </a>
                                {% else %}
                                <span class="text-muted">-</span>
                                {% endif %}
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <button class="btn whatsapp-btn btn-sm renewal-btn"
                                            data-policy-id="{{ policy.policy_id }}"
                                            data-customer-name="{{ policy.member_name }}"
                                            data-insurance-company="{{ policy.insurance_company }}"
                                            data-product-name="{{ policy.product_name }}"
                                            data-customer-phone="{{ policy.customer_phone }}"
                                            data-customer-email="{{ policy.customer_email }}"
                                            title="Send renewal reminder via WhatsApp & Email">
                                        <svg class="whatsapp-icon" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
                                        </svg>
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor" style="margin-left: 2px;">
                                            <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
                                        </svg>
                                    </button>
                                    <button class="btn paid-btn btn-sm policy-paid-btn"
                                            data-policy-id="{{ policy.policy_id }}"
                                            data-customer-name="{{ policy.member_name }}"
                                            data-insurance-company="{{ policy.insurance_company }}"
                                            data-product-name="{{ policy.product_name }}"
                                            data-customer-phone="{{ policy.customer_phone }}"
                                            data-customer-email="{{ policy.customer_email }}"
                                            title="Mark policy as paid">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                        </svg>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            {% else %}
            <div class="empty-state">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <h5>No policies expiring soon</h5>
                <p>All policies are up to date. Great job!</p>
                <a href="{{ url_for('policies.add_policy') }}" class="btn btn-primary mt-3">Add New Policy</a>
            </div>
            {% endif %}
        </div>
    </div>

    <!-- Renewal Reminder Modal -->
    <div class="modal fade" id="renewalModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Send Renewal Reminder</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <strong>Member:</strong> <span id="modalCustomerName"></span><br>
                        <strong>Phone:</strong> <span id="modalPhone"></span><br>
                        <strong>Email:</strong> <span id="modalEmail"></span><br>
                        <strong>Policy:</strong> <span id="modalPolicyDetails"></span>
                    </div>

                    <form id="renewalForm" enctype="multipart/form-data">
                        <input type="hidden" id="modalPolicyId" name="policy_id">

                        <div class="mb-3">
                            <label for="paymentLink" class="form-label">Payment Link (Optional)</label>
                            <input type="url" class="form-control" id="paymentLink" name="payment_link"
                                   placeholder="https://payment-link.com">
                        </div>

                        <div class="mb-3">
                            <label for="renewalFile" class="form-label">Renewal Document (Optional)</label>
                            <input type="file" class="form-control" id="renewalFile" name="renewal_file"
                                   accept=".pdf">
                        </div>

                        <div class="alert alert-info">
                            <small><strong></strong> Reminder will be sent via WhatsApp and Email (if contact info available)</small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-outline" id="editDetailsBtn" onclick="goToRenewalPage()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                        </svg>
                        Edit Details & Renew
                    </button>
                    <button type="button" class="btn btn-send-reminder" onclick="sendRenewalReminder()">Send Reminder</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Policy Paid Modal -->
    <div class="modal fade" id="policyPaidModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">Policy Payment Received</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <strong>Member:</strong> <span id="paidModalCustomerName"></span><br>
                        <strong>Phone:</strong> <span id="paidModalPhone"></span><br>
                        <strong>Email:</strong> <span id="paidModalEmail"></span><br>
                        <strong>Policy:</strong> <span id="paidModalPolicyDetails"></span>
                    </div>

                    <form id="policyPaidForm" enctype="multipart/form-data">
                        <input type="hidden" id="paidModalPolicyId" name="policy_id">

                        <div class="mb-3">
                            <label for="paidFile" class="form-label">New Policy PDF <span class="text-danger">*</span></label>
                            <input type="file" class="form-control" id="paidFile" name="paid_file" accept=".pdf" required>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md-6">
                                <label for="newExpiryDate" class="form-label">New Expiry Date</label>
                                <input type="text" class="form-control date-picker" id="newExpiryDate" name="new_expiry_date" placeholder="DD/MM/YYYY">
                            </div>
                            <div class="col-md-6">
                                <label for="newPolicyNumber" class="form-label">New Policy Number</label>
                                <input type="text" class="form-control" id="newPolicyNumber" name="new_policy_number">
                            </div>
                        </div>

                        <div class="form-check mb-3">
                            <input class="form-check-input" type="checkbox" id="sendConfirmation">
                            <label class="form-check-label" for="sendConfirmation">
                                <strong>Send payment confirmation to customer</strong>
                            </label>
                        </div>

                        <div class="alert alert-warning">
                            <small><strong>Important:</strong> This will archive the current policy document and upload the new one.</small>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-outline" id="editDetailsPaidBtn" onclick="goToRenewalPageFromPaid()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                        </svg>
                        Edit Details & Renew
                    </button>
                    <button type="button" class="btn btn-success" onclick="processPolicyPayment()">Process Payment</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="{{ url_for('static', filename='js/performance.js') }}?v=2.0"></script>
    <script>
        // Initialize date pickers with DD/MM/YYYY format
        document.addEventListener('DOMContentLoaded', function() {
            flatpickr('.date-picker', {
                dateFormat: 'd/m/Y',
                altInput: false,
                allowInput: true,
                locale: {
                    firstDayOfWeek: 1
                }
            });

            // Initialize sidebar functionality
            initializeSidebar();
        });

        // Sidebar functionality
        function initializeSidebar() {
            const hamburgerMenu = document.getElementById('hamburgerMenu');
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');
            const sidebarClose = document.getElementById('sidebarClose');

            // Toggle sidebar
            function toggleSidebar() {
                hamburgerMenu.classList.toggle('active');
                sidebar.classList.toggle('active');
                sidebarOverlay.classList.toggle('active');
                document.body.style.overflow = sidebar.classList.contains('active') ? 'hidden' : '';
            }

            // Close sidebar
            function closeSidebar() {
                hamburgerMenu.classList.remove('active');
                sidebar.classList.remove('active');
                sidebarOverlay.classList.remove('active');
                document.body.style.overflow = '';
            }

            // Event listeners
            hamburgerMenu.addEventListener('click', toggleSidebar);
            sidebarClose.addEventListener('click', closeSidebar);
            sidebarOverlay.addEventListener('click', closeSidebar);

            // Close sidebar when clicking on nav items (mobile)
            const sidebarNavItems = document.querySelectorAll('.sidebar-nav-item');
            sidebarNavItems.forEach(item => {
                item.addEventListener('click', () => {
                    if (window.innerWidth <= 768) {
                        closeSidebar();
                    }
                });
            });

            // Close sidebar on window resize if open
            window.addEventListener('resize', () => {
                if (window.innerWidth > 768 && sidebar.classList.contains('active')) {
                    closeSidebar();
                }
            });
        }

        // User menu functionality
        function toggleUserMenu() {
            // For now, just show a simple menu - you can expand this later
            const userOptions = [
                { label: 'Profile', action: () => alert('Profile functionality coming soon') },
                {% if current_user.is_admin %}
                { label: 'Settings', action: () => window.location.href = '{{ url_for("settings.index") }}' },
                {% endif %}
                { label: 'Logout', action: () => window.location.href = '{{ url_for("auth.logout") }}' }
            ];

            // Create a simple dropdown menu
            const existingMenu = document.querySelector('.user-dropdown');
            if (existingMenu) {
                existingMenu.remove();
                return;
            }

            const dropdown = document.createElement('div');
            dropdown.className = 'user-dropdown';
            dropdown.style.cssText = `
                position: absolute;
                top: 100%;
                right: 0;
                background: white;
                border: 1px solid #e5e7eb;
                border-radius: 8px;
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
                z-index: 1000;
                min-width: 150px;
                margin-top: 8px;
            `;

            userOptions.forEach((option, index) => {
                const item = document.createElement('div');
                item.textContent = option.label;
                item.style.cssText = `
                    padding: 12px 16px;
                    cursor: pointer;
                    transition: background-color 0.2s;
                    ${index === userOptions.length - 1 ? '' : 'border-bottom: 1px solid #f3f4f6;'}
                `;
                item.addEventListener('mouseenter', () => item.style.backgroundColor = '#f3f4f6');
                item.addEventListener('mouseleave', () => item.style.backgroundColor = 'white');
                item.addEventListener('click', () => {
                    option.action();
                    dropdown.remove();
                });
                dropdown.appendChild(item);
            });

            const userProfile = document.querySelector('.user-profile');
            userProfile.style.position = 'relative';
            userProfile.appendChild(dropdown);

            // Close dropdown when clicking outside
            setTimeout(() => {
                document.addEventListener('click', function closeDropdown(e) {
                    if (!userProfile.contains(e.target)) {
                        dropdown.remove();
                        document.removeEventListener('click', closeDropdown);
                    }
                });
            }, 100);
        }
    </script>
    <script>
        let currentPolicyId = null;
        let currentCustomerData = {};
        const renewalModal = new bootstrap.Modal(document.getElementById('renewalModal'));
        const policyPaidModal = new bootstrap.Modal(document.getElementById('policyPaidModal'));

        function openRenewalModal(policyId, customerName, companyName, policyType, phone, email) {
            currentPolicyId = policyId;
            document.getElementById('modalPolicyId').value = policyId;
            document.getElementById('modalCustomerName').textContent = customerName;
            document.getElementById('modalPhone').textContent = phone || 'No phone';
            document.getElementById('modalEmail').textContent = email || 'No email';
            document.getElementById('modalPolicyDetails').textContent = `${companyName} - ${policyType}`;
            document.getElementById('renewalForm').reset();
            document.getElementById('modalPolicyId').value = policyId;
            renewalModal.show();
        }

        function openPolicyPaidModal(policyId, customerName, companyName, policyType, phone, email) {
            currentPolicyId = policyId;
            currentCustomerData = { phone, email, name: customerName };
            document.getElementById('paidModalPolicyId').value = policyId;
            document.getElementById('paidModalCustomerName').textContent = customerName;
            document.getElementById('paidModalPhone').textContent = phone || 'No phone';
            document.getElementById('paidModalEmail').textContent = email || 'No email';
            document.getElementById('paidModalPolicyDetails').textContent = `${companyName} - ${policyType}`;
            document.getElementById('policyPaidForm').reset();
            document.getElementById('paidModalPolicyId').value = policyId;
            policyPaidModal.show();
        }

        // Event delegation for renewal buttons
        document.addEventListener('click', function(e) {
            if (e.target.closest('.renewal-btn')) {
                const btn = e.target.closest('.renewal-btn');
                const policyId = btn.dataset.policyId;
                const customerName = btn.dataset.customerName;
                const companyName = btn.dataset.insuranceCompany;
                const policyType = btn.dataset.productName;
                const phone = btn.dataset.customerPhone;
                const email = btn.dataset.customerEmail;
                
                openRenewalModal(policyId, customerName, companyName, policyType, phone, email);
            }
            
            if (e.target.closest('.policy-paid-btn')) {
                const btn = e.target.closest('.policy-paid-btn');
                const policyId = btn.dataset.policyId;
                const customerName = btn.dataset.customerName;
                const companyName = btn.dataset.insuranceCompany;
                const policyType = btn.dataset.productName;
                const phone = btn.dataset.customerPhone;
                const email = btn.dataset.customerEmail;
                
                openPolicyPaidModal(policyId, customerName, companyName, policyType, phone, email);
            }
        });
        
        function goToRenewalPage() {
            if (currentPolicyId) {
                // Close the modal and redirect to renewal page
                renewalModal.hide();
                window.location.href = `/renewal_page/${currentPolicyId}`;
            } else {
                alert('No policy selected');
            }
        }
        
        function goToRenewalPageFromPaid() {
            if (currentPolicyId) {
                // Close the modal and redirect to renewal page
                policyPaidModal.hide();
                window.location.href = `/renewal_page/${currentPolicyId}`;
            } else {
                alert('No policy selected');
            }
        }

        async function processPolicyPayment() {
            const paidFile = document.getElementById('paidFile').files[0];
            const newExpiryDate = document.getElementById('newExpiryDate').value;
            const newPolicyNumber = document.getElementById('newPolicyNumber').value;
            const sendConfirmation = document.getElementById('sendConfirmation').checked;

            if (!paidFile) {
                alert('Please select a policy PDF file');
                return;
            }

            if (!confirm('Process this payment? This will archive the current document.')) {
                return;
            }

            const button = event.target;
            const originalText = button.innerHTML;
            button.innerHTML = 'Processing...';
            button.disabled = true;

            try {
                const formData = new FormData();
                formData.append('policy_id', currentPolicyId);
                formData.append('paid_file', paidFile);
                formData.append('send_confirmation', sendConfirmation ? 'yes' : 'no');

                if (newExpiryDate) formData.append('new_expiry_date', newExpiryDate);
                if (newPolicyNumber) formData.append('new_policy_number', newPolicyNumber);

                if (sendConfirmation) {
                    formData.append('customer_phone', currentCustomerData.phone || '');
                    formData.append('customer_email', currentCustomerData.email || '');
                    formData.append('customer_name', currentCustomerData.name || '');
                }

                const response = await fetch('/api/update_policy_payment', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    alert(`Success: ${result.message}`);
                    policyPaidModal.hide();
                    location.reload();
                } else {
                    alert(`Error: ${result.message}`);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error processing payment');
            } finally {
                button.innerHTML = originalText;
                button.disabled = false;
            }
        }

        async function sendRenewalReminder() {
            const formData = new FormData(document.getElementById('renewalForm'));
            const button = event.target;
            const originalText = button.innerHTML;
            button.disabled = true;
            button.innerHTML = 'Sending...';

            try {
                const response = await fetch('/api/send_renewal_reminder', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    alert('Sent: ' + result.message);
                    renewalModal.hide();
                    location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to send reminder');
            } finally {
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }
    </script>
</body>
</html>


================================================
FILE: templates/error.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ error }} - Insurance Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}?v=2.0">
    <link rel="icon" type="image/png" href="{{ url_for('static', filename=config.LOGO_PATH) }}?v=2.0">
</head>
<body class="bg-light">
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card shadow">
                    <div class="card-body text-center p-5">
                        <div class="mb-4">
                            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-danger">
                                <circle cx="12" cy="12" r="10"></circle>
                                <line x1="15" y1="9" x2="9" y2="15"></line>
                                <line x1="9" y1="9" x2="15" y2="15"></line>
                            </svg>
                        </div>
                        
                        <h2 class="text-danger mb-3">{{ error }}</h2>
                        <p class="text-muted mb-4">{{ message }}</p>
                        
                        <div class="d-grid gap-2">
                            <a href="{{ url_for('dashboard.index') }}" class="btn btn-primary">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                                    <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                                    <polyline points="9,22 9,12 15,12 15,22"></polyline>
                                </svg>
                                Go to Dashboard
                            </a>
                            <a href="{{ url_for('auth.login') }}" class="btn btn-outline-secondary">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                                    <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path>
                                    <polyline points="10,17 15,12 10,7"></polyline>
                                    <line x1="15" y1="12" x2="3" y2="12"></line>
                                </svg>
                                Login Page
                            </a>
                        </div>
                    </div>
                </div>
                
                <div class="text-center mt-3">
                    <small class="text-muted">
                        If this problem persists, please contact the system administrator.
                    </small>
                </div>
            </div>
        </div>
    </div>
</body>
</html>



================================================
FILE: templates/excel_dashboard.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Excel Data Management - Insurance Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}?v=2.0">
    <link rel="icon" type="image/png" href="{{ url_for('static', filename=config.LOGO_PATH) }}?v=2.0">
</head>
<body class="bg-light">
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="Logo" width="30" height="30" class="me-2">
                Insurance Portal
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="{{ url_for('dashboard.index') }}">Dashboard</a>
                <a class="nav-link" href="{{ url_for('auth.logout') }}">Logout</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h2 class="mb-1">Excel Data Management</h2>
                        <p class="text-muted mb-0">View and manage your insurance data in Excel format</p>
                    </div>
                    <a href="{{ url_for('dashboard.index') }}" class="btn btn-outline-primary">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                            <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                            <polyline points="9,22 9,12 15,12 15,22"></polyline>
                        </svg>
                        Back to Dashboard
                    </a>
                </div>
            </div>
        </div>

        <!-- Alert Messages -->
        <div id="alertContainer"></div>

        <!-- Excel File Information -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                                <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path>
                                <polyline points="14,2 14,8 20,8"></polyline>
                                <path d="M12 18v-6"></path>
                                <path d="m9 15 3 3 3-3"></path>
                            </svg>
                            Excel File Status
                        </h5>
                    </div>
                    <div class="card-body">
                        {% if file_info %}
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>File Name:</strong> {{ file_info.name }}</p>
                                <p><strong>Last Modified:</strong> 
                                    <span id="lastModified">{{ file_info.modified_time }}</span>
                                </p>
                                {% if file_info.size %}
                                <p><strong>File Size:</strong> {{ (file_info.size|int / 1024 / 1024)|round(2) }} MB</p>
                                {% endif %}
                            </div>
                            <div class="col-md-6">
                                <p><strong>Access:</strong> Available to all team members</p>
                                <p><strong>Location:</strong> Google Drive Root Folder</p>
                                <p><strong>Status:</strong> <span class="badge bg-success">Active & Shared</span></p>
                            </div>
                        </div>
                        {% else %}
                        <div class="text-center text-muted">
                            <p>Excel file information not available</p>
                        </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>

        <!-- Action Cards -->
        <div class="row">
            <!-- Open Excel File -->
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body text-center">
                        <div class="mb-3">
                            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#28a745" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                                <circle cx="9" cy="9" r="2"></circle>
                                <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21"></path>
                            </svg>
                        </div>
                        <h5 class="card-title">Open Excel File</h5>
                        <p class="card-text text-muted">
                            Open the shared Excel file in Google Sheets or download to edit in Excel
                        </p>
                        <div class="d-grid gap-2">
                            {% if shareable_link %}
                            <a href="{{ shareable_link }}" target="_blank" class="btn btn-success">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                                    <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                                    <polyline points="15,3 21,3 21,9"></polyline>
                                    <line x1="10" y1="14" x2="21" y2="3"></line>
                                </svg>
                                Open in Google Sheets
                            </a>
                            {% else %}
                            <button class="btn btn-success" disabled>Link not available</button>
                            {% endif %}
                            <button id="downloadBtn" class="btn btn-outline-success">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                    <polyline points="7,10 12,15 17,10"></polyline>
                                    <line x1="12" y1="15" x2="12" y2="3"></line>
                                </svg>
                                Download Excel File
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Refresh Data -->
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body text-center">
                        <div class="mb-3">
                            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#007bff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <polyline points="23,4 23,10 17,10"></polyline>
                                <polyline points="1,20 1,14 7,14"></polyline>
                                <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4-4.64 4.36A9 9 0 0 1 3.51 15"></path>
                            </svg>
                        </div>
                        <h5 class="card-title">Refresh Data</h5>
                        <p class="card-text text-muted">
                            Update the Excel file with the latest data from the database
                        </p>
                        <div class="d-grid gap-2">
                            <button id="refreshBtn" class="btn btn-primary">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                                    <polyline points="23,4 23,10 17,10"></polyline>
                                    <polyline points="1,20 1,14 7,14"></polyline>
                                    <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4-4.64 4.36A9 9 0 0 1 3.51 15"></path>
                                </svg>
                                Refresh Excel Data
                            </button>
                            <button id="exportBtn" class="btn btn-outline-primary">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                    <polyline points="14,2 14,8 20,8"></polyline>
                                    <line x1="16" y1="13" x2="8" y2="13"></line>
                                    <line x1="16" y1="17" x2="8" y2="17"></line>
                                    <polyline points="10,9 9,9 8,9"></polyline>
                                </svg>
                                Export to Drive
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Information Section -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                                <circle cx="12" cy="12" r="10"></circle>
                                <path d="l9 12 2 2 4-4"></path>
                            </svg>
                            How to Use Excel Data Management
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Viewing Data:</h6>
                                <ul class="list-unstyled ms-3">
                                    <li>• Click "Open in Google Sheets" to view online</li>
                                    <li>• Download the Excel file to edit offline</li>
                                    <li>• File contains 4 sheets: Clients, Members, Policies, Pending</li>
                                    <li>• All team members have access to the shared file</li>
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h6>Updating Data:</h6>
                                <ul class="list-unstyled ms-3">
                                    <li>• Click "Refresh Excel Data" to get latest database info</li>
                                    <li>• File is automatically updated in Google Drive</li>
                                    <li>• Changes are reflected immediately for all users</li>
                                    <li>• File location: Google Drive Root Folder</li>
                                </ul>
                            </div>
                        </div>
                        <div class="alert alert-warning mt-3">
                            <strong>Important:</strong> This Excel file is for viewing and analysis only. 
                            To make changes to the data, please use the Insurance Portal web interface.
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Modal -->
    <div class="modal fade" id="loadingModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-body text-center p-4">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <h5 id="loadingText">Processing...</h5>
                    <p class="text-muted mb-0">Please wait while we process your request</p>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Show alert function
        function showAlert(message, type = 'info') {
            const alertContainer = document.getElementById('alertContainer');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            alertContainer.appendChild(alertDiv);
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // Show loading modal
        function showLoading(text = 'Processing...') {
            document.getElementById('loadingText').textContent = text;
            new bootstrap.Modal(document.getElementById('loadingModal')).show();
        }

        // Hide loading modal
        function hideLoading() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('loadingModal'));
            if (modal) modal.hide();
        }

        // Refresh Excel data
        document.getElementById('refreshBtn').addEventListener('click', function() {
            showLoading('Refreshing Excel data...');
            
            fetch('/api/excel/refresh', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                hideLoading();
                if (data.success) {
                    showAlert('Excel file refreshed successfully with latest data!', 'success');
                    // Update last modified time if available
                    if (data.file_info && data.file_info.modified_time) {
                        document.getElementById('lastModified').textContent = data.file_info.modified_time;
                    }
                } else {
                    showAlert('Failed to refresh Excel file: ' + data.message, 'danger');
                }
            })
            .catch(error => {
                hideLoading();
                showAlert('Error refreshing Excel file: ' + error.message, 'danger');
            });
        });

        // Export to Drive
        document.getElementById('exportBtn').addEventListener('click', function() {
            showLoading('Exporting to Google Drive...');
            
            fetch('/api/excel/export', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                hideLoading();
                if (data.success) {
                    showAlert('Data exported to Google Drive successfully!', 'success');
                } else {
                    showAlert('Export failed: ' + data.message, 'danger');
                }
            })
            .catch(error => {
                hideLoading();
                showAlert('Export error: ' + error.message, 'danger');
            });
        });

        // Download Excel file
        document.getElementById('downloadBtn').addEventListener('click', function() {
            showLoading('Downloading Excel file...');
            
            fetch('/api/excel/download', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                hideLoading();
                if (data.success) {
                    showAlert('Excel file downloaded successfully!', 'success');
                } else {
                    showAlert('Download failed: ' + data.message, 'danger');
                }
            })
            .catch(error => {
                hideLoading();
                showAlert('Download error: ' + error.message, 'danger');
            });
        });

        // Format date display
        document.addEventListener('DOMContentLoaded', function() {
            const lastModifiedElement = document.getElementById('lastModified');
            if (lastModifiedElement && lastModifiedElement.textContent) {
                try {
                    const date = new Date(lastModifiedElement.textContent);
                    lastModifiedElement.textContent = date.toLocaleString();
                } catch (e) {
                    // Keep original text if parsing fails
                }
            }
        });
    </script>
</body>
</html>



================================================
FILE: templates/excel_setup.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Excel Setup Required - Insurance Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}?v=2.0">
    <link rel="icon" type="image/png" href="{{ url_for('static', filename=config.LOGO_PATH) }}?v=2.0">
</head>
<body class="bg-light">
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="Logo" width="30" height="30" class="me-2">
                Insurance Portal
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="{{ url_for('dashboard.index') }}">Dashboard</a>
                <a class="nav-link" href="{{ url_for('auth.logout') }}">Logout</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h2 class="mb-1">Excel Data Management</h2>
                        <p class="text-muted mb-0">Setup required to enable Excel functionality</p>
                    </div>
                    <a href="{{ url_for('dashboard.index') }}" class="btn btn-outline-primary">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                            <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                            <polyline points="9,22 9,12 15,12 15,22"></polyline>
                        </svg>
                        Back to Dashboard
                    </a>
                </div>
            </div>
        </div>

        <!-- Setup Instructions -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                                <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path>
                                <path d="M12 9v4"></path>
                                <path d="m12 17 .01 0"></path>
                            </svg>
                            Excel Dependencies Required
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info">
                            <h6><strong>Missing Dependencies</strong></h6>
                            <p class="mb-0">The Excel feature requires additional Python packages to be installed. Please follow the setup instructions below.</p>
                        </div>

                        <h6 class="mt-4">Setup Instructions:</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="card-title">Step 1: Stop Application</h6>
                                        <p class="card-text small">In your Command Prompt where the app is running:</p>
                                        <code>Press Ctrl+C</code>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="card-title">Step 2: Install Dependencies</h6>
                                        <p class="card-text small">Run this command:</p>
                                        <code>pip install pandas openpyxl numpy</code>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-md-6">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="card-title">Step 3: Restart Application</h6>
                                        <p class="card-text small">Start the app again:</p>
                                        <code>deploy_windows.bat</code>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="card-title">Step 4: Access Excel Feature</h6>
                                        <p class="card-text small">Return to this page:</p>
                                        <code>Click "Excel Data" on dashboard</code>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="alert alert-success mt-4">
                            <h6><strong>What You'll Get:</strong></h6>
                            <ul class="mb-0">
                                <li><strong>Shared Excel File</strong> - Automatically created in Google Drive root</li>
                                <li><strong>Direct Access</strong> - Open in Google Sheets or download locally</li>
                                <li><strong>Real-time Updates</strong> - Refresh data with latest database info</li>
                                <li><strong>Team Access</strong> - All users can view the same file</li>
                            </ul>
                        </div>

                        <div class="text-center mt-4">
                            <button class="btn btn-primary" onclick="window.location.reload()">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="me-2">
                                    <polyline points="23,4 23,10 17,10"></polyline>
                                    <polyline points="1,20 1,14 7,14"></polyline>
                                    <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4-4.64 4.36A9 9 0 0 1 3.51 15"></path>
                                </svg>
                                Check Again (After Installing Dependencies)
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Command Reference -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-secondary text-white">
                        <h6 class="mb-0">Quick Command Reference</h6>
                    </div>
                    <div class="card-body">
                        <div class="bg-dark text-light p-3 rounded">
                            <div class="mb-2"><span class="text-warning"># Stop the application</span></div>
                            <div class="mb-2">Ctrl+C</div>
                            <div class="mb-2"><span class="text-warning"># Install Excel dependencies</span></div>
                            <div class="mb-2">pip install pandas openpyxl numpy</div>
                            <div class="mb-2"><span class="text-warning"># Restart application</span></div>
                            <div>deploy_windows.bat</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>



================================================
FILE: templates/existing_policies.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Policies - {{ config.PORTAL_TITLE }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <style>
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--spacing-8);
        }
        
        .page-title {
            font-size: var(--font-size-3xl);
            font-weight: 700;
            color: var(--gray-900);
            margin: 0;
        }
        
        .page-subtitle {
            color: var(--gray-600);
            font-size: var(--font-size-lg);
            margin: var(--spacing-1) 0 0 0;
        }
        
        .filters-card {
            background: var(--white);
            border-radius: var(--radius-lg);
            padding: var(--spacing-6);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
            margin-bottom: var(--spacing-6);
        }
        
        .filters-header {
            display: flex;
            align-items: center;
            gap: var(--spacing-2);
            margin-bottom: var(--spacing-4);
        }
        
        .filters-title {
            font-weight: 600;
            color: var(--gray-900);
            margin: 0;
        }
        
        .filter-icon {
            width: 20px;
            height: 20px;
            color: var(--primary-blue);
        }
        
        .search-box {
            position: relative;
        }
        
        .search-icon {
            position: absolute;
            left: var(--spacing-3);
            top: 50%;
            transform: translateY(-50%);
            width: 16px;
            height: 16px;
            color: var(--gray-400);
        }
        
        .search-input {
            padding-left: var(--spacing-10);
        }
        
        .stats-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: var(--spacing-4);
            margin-bottom: var(--spacing-6);
        }
        
        .stat-item {
            background: var(--white);
            border-radius: var(--radius-lg);
            padding: var(--spacing-4);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
            text-align: center;
        }
        
        .stat-number {
            font-size: var(--font-size-2xl);
            font-weight: 700;
            color: var(--primary-blue);
            margin: 0;
        }
        
        .stat-label {
            color: var(--gray-600);
            font-size: var(--font-size-sm);
            font-weight: 500;
            margin: var(--spacing-1) 0 0 0;
        }
        
        .customer-info {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-1);
        }
        
        .customer-name {
            font-weight: 500;
            color: var(--gray-900);
        }
        
        .customer-contact {
            font-size: var(--font-size-xs);
            color: var(--gray-500);
            display: flex;
            align-items: center;
            gap: var(--spacing-1);
        }
        
        .contact-icon {
            width: 12px;
            height: 12px;
        }
        
        .policy-badge {
            display: inline-flex;
            align-items: center;
            gap: var(--spacing-1);
            padding: var(--spacing-1) var(--spacing-2);
            border-radius: var(--radius-sm);
            font-size: var(--font-size-xs);
            font-weight: 500;
        }
        
        .policy-badge.active {
            background: var(--success-light);
            color: #065f46;
        }
        
        .policy-badge.expired {
            background: var(--danger-light);
            color: #991b1b;
        }
        
        .policy-badge.expiring {
            background: var(--warning-light);
            color: #92400e;
        }
        
        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-2);
        }
        
        @media (min-width: 768px) {
            .action-buttons {
                flex-direction: row;
                gap: var(--spacing-2);
            }
        }
        
        @media (max-width: 768px) {
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: var(--spacing-4);
            }
            
            .stats-row {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <div class="d-flex gap-2">
                <a href="{{ url_for('dashboard.index') }}" class="btn btn-outline">Dashboard</a>
                <a href="{{ url_for('pending_policies.list_pending') }}" class="btn btn-outline">Pending Policies</a>
                <a href="{{ url_for('policies.add_policy') }}" class="btn btn-outline">Add Policy</a>
                <a href="{{ url_for('auth.logout') }}" class="btn btn-outline">Logout</a>
            </div>
        </div>
    </nav>

    <div class="page-container">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                <div class="alert alert-{{ 'danger' if category == 'error' else 'success' }} alert-dismissible fade show">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <div class="page-header">
            <div>
                <h1 class="page-title">All Policies</h1>
                <p class="page-subtitle">Manage and view all insurance policies</p>
            </div>
            <div class="d-flex gap-2">
                <a href="{{ url_for('policies.add_policy') }}" class="btn btn-primary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-2">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                    </svg>
                    Add Policy
                </a>
            </div>
        </div>

        <!-- Statistics Row -->
        <div class="stats-row">
            <div class="stat-item">
                <h3 class="stat-number">{{ policies|length if policies else 0 }}</h3>
                <p class="stat-label">Total Policies</p>
            </div>
            <div class="stat-item">
                <h3 class="stat-number">{{ policy_types|length if policy_types else 0 }}</h3>
                <p class="stat-label">Policy Types</p>
            </div>
            <div class="stat-item">
                <h3 class="stat-number">{{ companies|length if companies else 0 }}</h3>
                <p class="stat-label">Insurance Companies</p>
            </div>
        </div>

        <!-- Filters Section -->
        <div class="filters-card">
            <div class="filters-header">
                <svg class="filter-icon" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"/>
                </svg>
                <h5 class="filters-title">Search & Filter</h5>
            </div>
            <form method="GET" action="{{ url_for('existing_policies.list_all') }}">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="search-box">
                            <svg class="search-icon" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                            </svg>
                            <input type="text" name="search" class="form-control search-input" placeholder="Search by customer, company, policy number..." value="{{ current_search }}">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select name="policy_type" class="form-select">
                            <option value="">All Policy Types</option>
                            {% for ptype in policy_types %}
                            <option value="{{ ptype }}" {% if ptype == current_policy_type %}selected{% endif %}>{{ ptype }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select name="company" class="form-select">
                            <option value="">All Companies</option>
                            {% for company in companies %}
                            <option value="{{ company }}" {% if company == current_company %}selected{% endif %}>{{ company }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-primary w-100">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                                <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                            </svg>
                            Filter
                        </button>
                    </div>
                </div>
            </form>
        </div>

        <div class="table-container">
            {% if policies %}
            <div class="mb-4">
                <span class="text-muted">Showing {{ policies|length }} policies</span>
            </div>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Policy ID</th>
                            <th>Customer</th>
                            <th>Company</th>
                            <th>Product</th>
                            <th>Policy Number</th>
                            <th>Expiry Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for policy in policies %}
                        <tr>
                            <td><strong>#{{ policy.policy_id }}</strong></td>
                            <td>
                                <div class="customer-info">
                                    <div class="customer-name">{{ policy.customer_name }}</div>
                                    {% if policy.customer_phone %}
                                    <div class="customer-contact">
                                        <svg class="contact-icon" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
                                        </svg>
                                        {{ policy.customer_phone }}
                                    </div>
                                    {% endif %}
                                    {% if policy.customer_email %}
                                    <div class="customer-contact">
                                        <svg class="contact-icon" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
                                        </svg>
                                        {{ policy.customer_email }}
                                    </div>
                                    {% endif %}
                                </div>
                            </td>
                            <td>{{ policy.insurance_company }}</td>
                            <td>{{ policy.product_name }}</td>
                            <td>{{ policy.policy_number or 'N/A' }}</td>
                            <td>{{ policy.policy_to | indian_date }}</td>
                            <td><span class="policy-badge active">Active</span></td>
                            <td>
                                <div class="action-buttons">
                                    {% if policy.drive_url %}
                                    <a href="{{ policy.drive_url }}" target="_blank" class="btn btn-sm btn-outline">
                                        <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                                            <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                                        </svg>
                                        View Doc
                                    </a>
                                    {% endif %}
                                    <a href="{{ url_for('existing_policies.view_policy', policy_id=policy.policy_id) }}" class="btn btn-sm btn-outline">
                                        <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                                            <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                                        </svg>
                                        Details
                                    </a>
                                </div>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            {% else %}
            <div class="empty-state">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <h5>No policies found</h5>
                <p>Try adjusting your filters or add a new policy</p>
                <a href="{{ url_for('policies.add_policy') }}" class="btn btn-primary mt-3">Add New Policy</a>
            </div>
            {% endif %}
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


================================================
FILE: templates/login.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Insta Insurance Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}?v=2.0">
    <link rel="icon" type="image/png" href="{{ url_for('static', filename=config.LOGO_PATH) }}?v=2.0">
    <style>
        body {
            background: linear-gradient(135deg, #4f6ef7 0%, #3b82f6 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
        }
        
        .login-container {
            background: white;
            border-radius: 16px;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            padding: 48px;
            width: 100%;
            max-width: 400px;
            text-align: center;
        }
        
        .logo-container {
            margin-bottom: 32px;
        }
        
        .logo-container img {
            width: 64px;
            height: 64px;
            margin-bottom: 16px;
        }
        
        .logo-container h1 {
            color: #1f2937;
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 8px;
            margin-top: 0;
        }
        
        .logo-container p {
            color: #6b7280;
            font-size: 14px;
            margin-bottom: 0;
        }
        
        .form-group {
            margin-bottom: 20px;
            text-align: left;
        }
        
        .form-control {
            border: 1px solid #d1d5db;
            border-radius: 8px;
            padding: 12px 16px;
            font-size: 14px;
            width: 100%;
            transition: all 0.2s ease;
            background: white;
        }
        
        .form-control:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            outline: none;
        }
        
        .form-label {
            color: #374151;
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 6px;
            display: block;
        }
        
        .btn-login {
            background: #3b82f6;
            border: none;
            border-radius: 8px;
            padding: 12px 24px;
            font-size: 14px;
            font-weight: 500;
            color: white;
            width: 100%;
            transition: all 0.2s ease;
            cursor: pointer;
        }
        
        .btn-login:hover {
            background: #2563eb;
        }
        
        .btn-login:active {
            background: #1d4ed8;
        }
        
        .alert {
            border-radius: 8px;
            border: none;
            margin-bottom: 20px;
            padding: 12px 16px;
            font-size: 14px;
        }
        
        .alert-danger {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }
        
        .alert-info {
            background: #eff6ff;
            color: #2563eb;
            border: 1px solid #bfdbfe;
        }
        
        .spinner-border-sm {
            width: 16px;
            height: 16px;
        }
        
        .footer-text {
            text-align: center;
            margin-top: 32px;
            color: #9ca3af;
            font-size: 12px;
        }
        
        .security-icon {
            color: #9ca3af;
            font-size: 12px;
            margin-top: 24px;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="logo-container">
            <img src="{{ url_for('static', filename=config.LOGO_PATH) }}?v=2.0" alt="Insta Insurance Consultancy">
            <h1>Insurance Portal</h1>
            <p>Secure access to policy management</p>
        </div>
        
        <!-- Flash Messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else category }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        <form method="POST" id="loginForm">
            <div class="form-group">
                <label for="email" class="form-label">Email Address</label>
                <input type="email" class="form-control" id="email" name="email" placeholder="Enter your email" required>
            </div>
            
            <div class="form-group">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" name="password" placeholder="Enter your password" required>
            </div>
            
            <button type="submit" class="btn btn-login" id="loginBtn">
                <span id="loginText">Sign In</span>
                <span id="loginSpinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
            </button>
        </form>
        
        <div class="footer-text">
            <div class="security-icon">🔒 Admin access only • Encrypted connection</div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://kit.fontawesome.com/your-fontawesome-kit.js" crossorigin="anonymous"></script>
    
    <script>
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            const loginBtn = document.getElementById('loginBtn');
            const loginText = document.getElementById('loginText');
            const loginSpinner = document.getElementById('loginSpinner');
            
            // Show loading state
            loginBtn.disabled = true;
            loginText.classList.add('d-none');
            loginSpinner.classList.remove('d-none');
        });
        
        // Auto-focus on email field
        document.getElementById('email').focus();
        
        // Hide alerts after 5 seconds
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(function(alert) {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
    </script>
</body>
</html>



================================================
FILE: templates/login_clerk_backup.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Insurance Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #e8f1f8 0%, #ffffff 100%);
            min-height: 100vh;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            position: relative;
        }

        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 400px;
            background: linear-gradient(135deg, #1e3a8a 0%, #2563eb 100%);
            z-index: 0;
        }

        .container {
            position: relative;
            z-index: 1;
        }

        .login-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.12);
            max-width: 440px;
            width: 100%;
            border: 1px solid #e5e7eb;
            margin: 0 auto;
        }

        .login-header {
            padding: 48px 48px 24px;
            text-align: center;
            border-bottom: 1px solid #f3f4f6;
        }

        .company-logo {
            width: 200px;
            height: auto;
            margin: 0 auto 20px;
            display: block;
        }

        .login-header h1 {
            font-size: 26px;
            font-weight: 600;
            color: #111827;
            margin-bottom: 8px;
            letter-spacing: -0.5px;
        }

        .login-header p {
            color: #6b7280;
            font-size: 15px;
            margin: 0;
        }

        .login-body {
            padding: 32px 48px 48px;
        }

        .google-login-btn {
            width: 100%;
            padding: 12px 24px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            background: white;
            color: #374151;
            font-size: 16px;
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
        }

        .google-login-btn:hover {
            border-color: #d1d5db;
            background: #f9fafb;
            color: #374151;
            text-decoration: none;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .google-icon {
            width: 20px;
            height: 20px;
        }

        .loading-spinner {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 200px;
        }

        .spinner-border {
            width: 2rem;
            height: 2rem;
        }

        .login-content {
            text-align: center;
        }

        .welcome-text {
            color: #6b7280;
            font-size: 15px;
            margin-bottom: 32px;
            line-height: 1.5;
        }

        /* Style Clerk component to be centered and clean */
        #clerk-signin-container {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        /* Override Clerk's default styles for better centering */
        #clerk-signin-container .cl-rootBox {
            width: 100% !important;
            max-width: none !important;
        }

        #clerk-signin-container .cl-card {
            box-shadow: none !important;
            border: none !important;
            background: transparent !important;
        }

        .security-badge {
            text-align: center;
            margin-top: 24px;
            padding-top: 24px;
            border-top: 1px solid #f3f4f6;
        }

        .security-badge p {
            color: #9ca3af;
            font-size: 13px;
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
        }

        .security-icon {
            width: 16px;
            height: 16px;
            fill: #9ca3af;
        }

        .footer-text {
            text-align: center;
            color: white;
            margin-top: 32px;
            font-size: 14px;
            font-weight: 500;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        .alert {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container d-flex justify-content-center align-items-center min-vh-100">
        <div>
            <div class="login-card">
                <div class="login-header">
                    <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="Company Logo" class="company-logo">
                    <h1>Insurance Portal</h1>
                    <p>Secure access to policy management</p>
                </div>
                <div class="login-body">
                    <div id="error-message" class="alert alert-danger" style="display: none;"></div>

                    <!-- Loading spinner -->
                    <div id="loading" class="loading-spinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>

                    <!-- Clerk Sign-In Component -->
                    <div id="clerk-sign-in" style="display: none;">
                        <div id="clerk-signin-container"></div>
                    </div>

                    <div class="security-badge">
                        <p>
                            <svg class="security-icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"/>
                            </svg>
                            Admin access only • Encrypted connection
                        </p>
                    </div>
                </div>
            </div>
            <p class="footer-text">Protected by enterprise-grade security</p>
        </div>
    </div>

    <!-- Clerk JavaScript SDK -->
    <script
        async
        crossorigin="anonymous"
        data-clerk-publishable-key="{{ config.CLERK_PUBLISHABLE_KEY }}"
        src="https://{{ config.CLERK_FRONTEND_API }}/npm/@clerk/clerk-js@5/dist/clerk.browser.js"
        type="text/javascript"
    ></script>

    <script>
        function showError(message) {
            const errorDiv = document.getElementById('error-message');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
        }

        function hideError() {
            document.getElementById('error-message').style.display = 'none';
        }

        async function authenticateWithBackend(sessionId) {
            console.log('Authenticating with backend...');
            try {
                const response = await fetch('/auth/callback', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        session_token: sessionId
                    })
                });

                const data = await response.json();
                console.log('Backend response:', response.status, data);

                if (response.ok && data.success) {
                    console.log('Authentication successful, redirecting to:', data.redirect);
                    // Force a full page redirect to ensure proper session handling
                    window.location.replace(data.redirect);
                } else {
                    // Handle authorization error
                    if (response.status === 403) {
                        showError('Access denied: This portal is restricted to authorized administrators only');
                        try {
                            await Clerk.signOut();
                        } catch (signOutError) {
                            console.error('Error signing out:', signOutError);
                        }
                    } else {
                        showError(data.error || 'Authentication failed');
                    }
                }
            } catch (error) {
                console.error('Authentication error:', error);
                showError('Network error. Please check your connection and try again.');
            }
        }

        window.addEventListener('load', async function () {
            console.log('Page loaded, initializing Clerk...');
            try {
                // Wait for Clerk to load
                await Clerk.load();
                console.log('Clerk loaded successfully');

                // Hide loading spinner
                document.getElementById('loading').style.display = 'none';

                if (Clerk.user) {
                    console.log('User already signed in:', Clerk.user.id);
                    // User is already signed in, verify session
                    const session = Clerk.session;
                    if (session) {
                        console.log('Active session found, verifying with backend...');
                        await authenticateWithBackend(session.id);
                    } else {
                        console.log('No active session, showing sign-in form');
                        document.getElementById('clerk-sign-in').style.display = 'block';
                        mountSignIn();
                    }
                } else {
                    console.log('User not signed in, showing sign-in form');
                    // User is not signed in, show sign-in component
                    document.getElementById('clerk-sign-in').style.display = 'block';
                    mountSignIn();
                }
            } catch (error) {
                console.error('Clerk initialization error:', error);
                document.getElementById('loading').style.display = 'none';
                showError('Failed to load authentication. Please refresh the page.');
            }
        });

        function mountSignIn() {
            const signInDiv = document.getElementById('clerk-signin-container');
            Clerk.mountSignIn(signInDiv, {
                appearance: {
                    elements: {
                        rootBox: 'w-100',
                        card: 'shadow-none border-0 bg-transparent',
                        headerTitle: 'hidden',
                        headerSubtitle: 'hidden',
                        socialButtonsBlockButton: 'w-100 justify-content-center',
                        formButtonPrimary: 'w-100'
                    },
                    variables: {
                        colorPrimary: '#2563eb'
                    }
                }
            });

            // Listen for successful sign-in with better error handling
            Clerk.addListener(async (event) => {
                console.log('Clerk event received:', event);
                
                // Handle different event types
                if (event.type === 'session' && event.session) {
                    console.log('Session event - Status:', event.session.status, 'ID:', event.session.id);
                    
                    if (event.session.status === 'active') {
                        console.log('Active session detected, authenticating with backend...');
                        hideError();
                        
                        try {
                            await authenticateWithBackend(event.session.id);
                        } catch (error) {
                            console.error('Backend authentication failed:', error);
                            showError('Authentication failed. Please try again.');
                        }
                    }
                } else if (event.session && event.session.status === 'active') {
                    // Fallback for older Clerk versions
                    console.log('Active session (fallback), authenticating with backend...');
                    hideError();
                    
                    try {
                        await authenticateWithBackend(event.session.id);
                    } catch (error) {
                        console.error('Backend authentication failed:', error);
                        showError('Authentication failed. Please try again.');
                    }
                }
            });
        }
    </script>
</body>
</html>


================================================
FILE: templates/login_simple.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Insta Insurance Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}?v=2.0">
    <link rel="icon" type="image/png" href="{{ url_for('static', filename=config.LOGO_PATH) }}?v=2.0">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .login-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 3rem;
            width: 100%;
            max-width: 450px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .logo-container {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .logo-container img {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            margin-bottom: 1rem;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        
        .logo-container h2 {
            color: #333;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .logo-container p {
            color: #666;
            font-size: 0.9rem;
        }
        
        .form-floating {
            margin-bottom: 1.5rem;
        }
        
        .form-control {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 1rem;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
        }
        
        .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            background: rgba(255, 255, 255, 1);
        }
        
        .btn-login {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 12px;
            padding: 1rem;
            font-size: 1.1rem;
            font-weight: 600;
            color: white;
            width: 100%;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .btn-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
            background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
        }
        
        .btn-login:active {
            transform: translateY(0);
        }
        
        .alert {
            border-radius: 12px;
            border: none;
            margin-bottom: 1.5rem;
            padding: 1rem;
        }
        
        .alert-danger {
            background: rgba(220, 53, 69, 0.1);
            color: #dc3545;
            border-left: 4px solid #dc3545;
        }
        
        .alert-info {
            background: rgba(13, 202, 240, 0.1);
            color: #0dcaf0;
            border-left: 4px solid #0dcaf0;
        }
        
        .loading {
            display: none;
            text-align: center;
            margin-top: 1rem;
        }
        
        .spinner-border {
            width: 2rem;
            height: 2rem;
            color: #667eea;
        }
        
        .footer-text {
            text-align: center;
            margin-top: 2rem;
            color: #666;
            font-size: 0.85rem;
        }
        
        .security-note {
            background: rgba(40, 167, 69, 0.1);
            border: 1px solid rgba(40, 167, 69, 0.2);
            border-radius: 8px;
            padding: 0.75rem;
            margin-top: 1rem;
            font-size: 0.85rem;
            color: #28a745;
            text-align: center;
        }
        
        .security-note i {
            margin-right: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="logo-container">
            <img src="{{ url_for('static', filename=config.LOGO_PATH) }}?v=2.0" alt="Insta Insurance Logo">
            <h2>Insurance Portal</h2>
            <p>Admin Access Only</p>
        </div>
        
        <!-- Flash Messages -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else category }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        <form method="POST" id="loginForm">
            <div class="form-floating">
                <input type="email" class="form-control" id="email" name="email" placeholder="name@example.com" required>
                <label for="email">Email Address</label>
            </div>
            
            <div class="form-floating">
                <input type="password" class="form-control" id="password" name="password" placeholder="Password" required>
                <label for="password">Password</label>
            </div>
            
            <button type="submit" class="btn btn-login" id="loginBtn">
                <span id="loginText">Sign In</span>
                <span id="loginSpinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
            </button>
        </form>
        
        <div class="security-note">
            <i class="fas fa-shield-alt"></i>
            Session expires when you close the browser tab
        </div>
        
        <div class="footer-text">
            Insta Insurance Consultancy<br>
            <small>Secure Admin Portal</small>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://kit.fontawesome.com/your-fontawesome-kit.js" crossorigin="anonymous"></script>
    
    <script>
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            const loginBtn = document.getElementById('loginBtn');
            const loginText = document.getElementById('loginText');
            const loginSpinner = document.getElementById('loginSpinner');
            
            // Show loading state
            loginBtn.disabled = true;
            loginText.classList.add('d-none');
            loginSpinner.classList.remove('d-none');
        });
        
        // Auto-focus on email field
        document.getElementById('email').focus();
        
        // Hide alerts after 5 seconds
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(function(alert) {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
    </script>
</body>
</html>



================================================
FILE: templates/pending_policies.html
================================================
{% extends "base.html" %}

{% block title %}Pending Policies - Insta Insurances Portal{% endblock %}

{% block extra_css %}
<style>
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--spacing-6);
    }

    .page-title {
        font-size: var(--font-size-2xl);
        font-weight: 700;
        color: var(--gray-900);
        margin: 0;
    }

    .table-container {
        background: var(--white);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--gray-200);
        overflow: hidden;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .table {
        margin-bottom: 0;
        min-width: 1000px;
    }

    .table th {
        background: var(--gray-50);
        border-bottom: 2px solid var(--gray-200);
        font-weight: 600;
        color: var(--gray-900);
        padding: var(--spacing-4);
    }

    .table td {
        padding: var(--spacing-4);
        border-bottom: 1px solid var(--gray-100);
        vertical-align: middle;
    }

    .table tbody tr:hover {
        background: var(--gray-25);
    }

    .customer-info {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-1);
    }

    .customer-name {
        font-weight: 500;
        color: var(--gray-900);
    }

    .customer-contact {
        font-size: var(--font-size-xs);
        color: var(--gray-500);
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: var(--spacing-1) var(--spacing-2);
        border-radius: var(--radius-sm);
        font-size: var(--font-size-xs);
        font-weight: 500;
        background: var(--warning-light);
        color: #92400e;
    }

    .action-buttons {
        display: flex;
        gap: var(--spacing-2);
        flex-wrap: wrap;
    }

    @media (max-width: 768px) {
        .page-header {
            flex-direction: column;
            align-items: flex-start;
            gap: var(--spacing-4);
        }

        .action-buttons {
            flex-direction: column;
            width: 100%;
        }

        .action-buttons .btn {
            width: 100%;
        }
    }
</style>
{% endblock %}

{% block content %}
<div class="page-header">
    <h1 class="page-title">Pending Policies</h1>
    <a href="{{ url_for('pending_policies.add_pending') }}" class="btn btn-primary">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-2">
            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
        </svg>
        Add Pending Policy
    </a>
</div>

<div class="table-container">
    {% if pending_policies %}
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Pending ID</th>
                    <th>Customer</th>
                    <th>Insurance Company</th>
                    <th>Product</th>
                    <th>Premium</th>
                    <th>Status</th>
                    <th>Created Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for pending in pending_policies %}
                <tr>
                    <td><strong>#{{ pending.pending_id }}</strong></td>
                    <td>
                        <div class="customer-info">
                            <div class="customer-name">{{ pending.customer_name or 'Unknown' }}</div>
                            {% if pending.customer_phone %}
                            <div class="customer-contact">{{ pending.customer_phone }}</div>
                            {% endif %}
                        </div>
                    </td>
                    <td>{{ pending.insurance_company }}</td>
                    <td>{{ pending.product_name }}</td>
                    <td>
                        {% if pending.gross_premium %}
                            ₹{{ "{:,.2f}".format(pending.gross_premium) }}
                        {% else %}
                            <span class="text-muted">Not specified</span>
                        {% endif %}
                    </td>
                    <td>
                        <span class="status-badge">Pending Payment</span>
                    </td>
                    <td>{{ pending.created_at[:10] | indian_date if pending.created_at else 'N/A' }}</td>
                    <td>
                        <div class="action-buttons">
                            <a href="{{ url_for('pending_policies.complete_pending', pending_id=pending.pending_id) }}" 
                               class="btn btn-sm btn-success">Complete</a>
                            <form method="POST" action="{{ url_for('pending_policies.delete_pending', pending_id=pending.pending_id) }}" 
                                  style="display: inline;" onsubmit="return confirm('Are you sure you want to delete this pending policy?')">
                                <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                            </form>
                        </div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    {% else %}
    <div class="empty-state">
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <h5>No pending policies</h5>
        <p>All policies have been processed or no pending policies have been added yet.</p>
        <a href="{{ url_for('pending_policies.add_pending') }}" class="btn btn-primary mt-3">Add Pending Policy</a>
    </div>
    {% endif %}
</div>
{% endblock %}



================================================
FILE: templates/pending_policies_backup.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pending Policies - {{ config.PORTAL_TITLE }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <style>
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--spacing-8);
        }
        
        .page-title {
            font-size: var(--font-size-3xl);
            font-weight: 700;
            color: var(--gray-900);
            margin: 0;
        }
        
        .page-subtitle {
            color: var(--gray-600);
            font-size: var(--font-size-lg);
            margin: var(--spacing-1) 0 0 0;
        }
        
        .stats-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: var(--spacing-4);
            margin-bottom: var(--spacing-6);
        }
        
        .stat-item {
            background: var(--white);
            border-radius: var(--radius-lg);
            padding: var(--spacing-4);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
            text-align: center;
        }
        
        .stat-number {
            font-size: var(--font-size-2xl);
            font-weight: 700;
            color: var(--warning);
            margin: 0;
        }
        
        .stat-label {
            color: var(--gray-600);
            font-size: var(--font-size-sm);
            font-weight: 500;
            margin: var(--spacing-1) 0 0 0;
        }
        
        .member-info {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-1);
        }
        
        .member-name {
            font-weight: 500;
            color: var(--gray-900);
        }
        
        .member-email {
            font-size: var(--font-size-xs);
            color: var(--gray-500);
        }
        
        .amount-display {
            font-weight: 600;
            color: var(--success);
            font-size: var(--font-size-sm);
        }
        
        .date-display {
            font-size: var(--font-size-sm);
            color: var(--gray-600);
        }
        
        .action-buttons {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-2);
        }
        
        @media (min-width: 768px) {
            .action-buttons {
                flex-direction: row;
                gap: var(--spacing-2);
            }
        }
        
        @media (max-width: 768px) {
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: var(--spacing-4);
            }
            
            .stats-row {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <div class="d-flex gap-2">
                <a href="{{ url_for('dashboard.index') }}" class="btn btn-outline">Dashboard</a>
                <a href="{{ url_for('existing_policies.list_all') }}" class="btn btn-outline">All Clients</a>
                <a href="{{ url_for('policies.add_policy') }}" class="btn btn-outline">Add Policy</a>
                <a href="{{ url_for('auth.logout') }}" class="btn btn-outline">Logout</a>
            </div>
        </div>
    </nav>

    <div class="page-container">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                <div class="alert alert-{{ 'danger' if category == 'error' else 'success' }} alert-dismissible fade show">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <div class="page-header">
            <div>
                <h1 class="page-title">Pending Policies</h1>
                <p class="page-subtitle">Track and manage pending policy applications</p>
            </div>
            <div class="d-flex gap-2">
                <a href="{{ url_for('pending_policies.add_pending') }}" class="btn btn-primary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-2">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                    </svg>
                    Add Pending Policy
                </a>
            </div>
        </div>

        <!-- Statistics Row -->
        <div class="stats-row">
            <div class="stat-item">
                <h3 class="stat-number">{{ pending_policies|length if pending_policies else 0 }}</h3>
                <p class="stat-label">Pending Applications</p>
            </div>
            <div class="stat-item">
                <h3 class="stat-number">0</h3>
                <p class="stat-label">Completed This Month</p>
            </div>
            <div class="stat-item">
                <h3 class="stat-number">0</h3>
                <p class="stat-label">Average Processing Time</p>
            </div>
        </div>

        <div class="table-container">
            {% if pending_policies %}
            <div class="mb-4">
                <span class="text-muted">Showing {{ pending_policies|length }} pending applications</span>
            </div>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Pending ID</th>
                            <th>Member</th>
                            <th>Company</th>
                            <th>Product</th>
                            <th>Agent</th>
                            <th>Net Premium</th>
                            <th>Payment Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for policy in pending_policies %}
                        <tr>
                            <td><strong>#{{ policy.pending_id }}</strong></td>
                            <td>
                                <div class="member-info">
                                    <div class="member-name">{{ policy.customer_name }}</div>
                                    <div class="member-email">{{ policy.customer_email }}</div>
                                </div>
                            </td>
                            <td>{{ policy.insurance_company }}</td>
                            <td>{{ policy.product_name or 'N/A' }}</td>
                            <td>{{ policy.agent_name or 'N/A' }}</td>
                            <td>
                                {% if policy.net_premium %}
                                <div class="amount-display">₹{{ '{:,.2f}'.format(policy.net_premium) }}</div>
                                {% else %}
                                <span class="text-muted">N/A</span>
                                {% endif %}
                            </td>
                            <td>
                                <div class="date-display">{{ policy.payment_date | indian_date }}</div>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <a href="{{ url_for('pending_policies.complete_pending', pending_id=policy.pending_id) }}"
                                       class="btn btn-success btn-sm">
                                        <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                        </svg>
                                        Complete
                                    </a>
                                    <form action="{{ url_for('pending_policies.delete_pending', pending_id=policy.pending_id) }}"
                                          method="POST" style="display: inline;">
                                        <button type="submit" class="btn btn-danger btn-sm"
                                                onclick="return confirm('Are you sure you want to delete this pending policy?')">
                                            <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                                                <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                                            </svg>
                                            Delete
                                        </button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            {% else %}
            <div class="empty-state">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                <h5>No pending policies</h5>
                <p>All policies have been processed. Great job!</p>
                <a href="{{ url_for('pending_policies.add_pending') }}" class="btn btn-primary mt-3">Add Pending Policy</a>
            </div>
            {% endif %}
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


================================================
FILE: templates/policy_history.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Policy History - {{ policy_data.current_policy.policy_number or 'Policy ' + policy_id|string }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .timeline {
            position: relative;
            padding: 20px 0;
        }
        .timeline-item {
            position: relative;
            padding-left: 40px;
            margin-bottom: 30px;
        }
        .timeline-item::before {
            content: '';
            position: absolute;
            left: 15px;
            top: 0;
            bottom: -30px;
            width: 2px;
            background: #dee2e6;
        }
        .timeline-item:last-child::before {
            display: none;
        }
        .timeline-icon {
            position: absolute;
            left: 0;
            top: 0;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
        }
        .timeline-icon.current {
            background: #28a745;
            color: white;
        }
        .timeline-icon.historical {
            background: #6c757d;
            color: white;
        }
        .card-header.current {
            background: #d4edda;
            border-color: #c3e6cb;
        }
        .card-header.historical {
            background: #f8f9fa;
            border-color: #dee2e6;
        }
        .field-comparison {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        .field-comparison:last-child {
            border-bottom: none;
        }
        .field-name {
            font-weight: 500;
            color: #495057;
            min-width: 150px;
        }
        .field-value {
            flex: 1;
            text-align: right;
        }
    </style>
</head>
<body>
    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2><i class="fas fa-history"></i> Policy History</h2>
                    <a href="{{ url_for('existing_policies.list_all') }}" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Policies
                    </a>
                </div>

                <!-- Current Policy Summary -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-file-contract"></i> 
                            {{ policy_data.current_policy.product_name or 'Insurance Policy' }}
                            {% if policy_data.current_policy.policy_number %}
                                - {{ policy_data.current_policy.policy_number }}
                            {% endif %}
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <strong>Client:</strong> {{ policy_data.current_policy.clients.name or 'N/A' }}
                            </div>
                            <div class="col-md-4">
                                <strong>Member:</strong> {{ policy_data.current_policy.members.member_name or 'N/A' }}
                            </div>
                            <div class="col-md-4">
                                <strong>Total Versions:</strong> {{ policy_data.total_versions }}
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Timeline -->
                <div class="timeline">
                    <!-- Current Version -->
                    <div class="timeline-item">
                        <div class="timeline-icon current">
                            <i class="fas fa-star"></i>
                        </div>
                        <div class="card">
                            <div class="card-header current">
                                <h6 class="mb-0">
                                    <i class="fas fa-check-circle"></i> Current Version
                                    <span class="badge bg-success ms-2">ACTIVE</span>
                                </h6>
                                <small class="text-muted">
                                    Last updated: {{ policy_data.current_policy.created_at[:10] if policy_data.current_policy.created_at else 'N/A' }}
                                </small>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="field-comparison">
                                            <span class="field-name">Insurance Company:</span>
                                            <span class="field-value">{{ policy_data.current_policy.insurance_company or 'N/A' }}</span>
                                        </div>
                                        <div class="field-comparison">
                                            <span class="field-name">Policy Period:</span>
                                            <span class="field-value">
                                                {{ policy_data.current_policy.policy_from or 'N/A' }} to {{ policy_data.current_policy.policy_to or 'N/A' }}
                                            </span>
                                        </div>
                                        <div class="field-comparison">
                                            <span class="field-name">Net Premium:</span>
                                            <span class="field-value">₹{{ "{:,.2f}".format(policy_data.current_policy.net_premium) if policy_data.current_policy.net_premium else 'N/A' }}</span>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="field-comparison">
                                            <span class="field-name">Gross Premium:</span>
                                            <span class="field-value">₹{{ "{:,.2f}".format(policy_data.current_policy.gross_premium) if policy_data.current_policy.gross_premium else 'N/A' }}</span>
                                        </div>
                                        <div class="field-comparison">
                                            <span class="field-name">Sum Insured:</span>
                                            <span class="field-value">₹{{ "{:,.2f}".format(policy_data.current_policy.sum_insured) if policy_data.current_policy.sum_insured else 'N/A' }}</span>
                                        </div>
                                        <div class="field-comparison">
                                            <span class="field-name">Agent:</span>
                                            <span class="field-value">{{ policy_data.current_policy.agent_name or 'N/A' }}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Historical Versions -->
                    {% for history_record in policy_data.history %}
                    <div class="timeline-item">
                        <div class="timeline-icon historical">
                            <i class="fas fa-archive"></i>
                        </div>
                        <div class="card">
                            <div class="card-header historical">
                                <h6 class="mb-0">
                                    <i class="fas fa-history"></i> Version from {{ history_record.archived_at[:10] if history_record.archived_at else 'Unknown Date' }}
                                    <span class="badge bg-secondary ms-2">{{ history_record.archived_reason|upper or 'ARCHIVED' }}</span>
                                </h6>
                                <small class="text-muted">
                                    {% if history_record.archived_by %}
                                        Archived by: {{ history_record.archived_by }}
                                    {% endif %}
                                    | Original period: {{ history_record.policy_from or 'N/A' }} to {{ history_record.policy_to or 'N/A' }}
                                </small>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="field-comparison">
                                            <span class="field-name">Insurance Company:</span>
                                            <span class="field-value">{{ history_record.insurance_company or 'N/A' }}</span>
                                        </div>
                                        <div class="field-comparison">
                                            <span class="field-name">Policy Number:</span>
                                            <span class="field-value">{{ history_record.policy_number or 'N/A' }}</span>
                                        </div>
                                        <div class="field-comparison">
                                            <span class="field-name">Net Premium:</span>
                                            <span class="field-value">₹{{ "{:,.2f}".format(history_record.net_premium) if history_record.net_premium else 'N/A' }}</span>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="field-comparison">
                                            <span class="field-name">Gross Premium:</span>
                                            <span class="field-value">₹{{ "{:,.2f}".format(history_record.gross_premium) if history_record.gross_premium else 'N/A' }}</span>
                                        </div>
                                        <div class="field-comparison">
                                            <span class="field-name">Sum Insured:</span>
                                            <span class="field-value">₹{{ "{:,.2f}".format(history_record.sum_insured) if history_record.sum_insured else 'N/A' }}</span>
                                        </div>
                                        <div class="field-comparison">
                                            <span class="field-name">Agent:</span>
                                            <span class="field-value">{{ history_record.agent_name or 'N/A' }}</span>
                                        </div>
                                    </div>
                                </div>
                                {% if history_record.remarks %}
                                <div class="mt-2">
                                    <strong>Remarks:</strong> {{ history_record.remarks }}
                                </div>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                    {% endfor %}

                    {% if not policy_data.history %}
                    <div class="timeline-item">
                        <div class="timeline-icon historical">
                            <i class="fas fa-info"></i>
                        </div>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i> No historical records found. This policy hasn't been renewed yet.
                        </div>
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>



================================================
FILE: templates/renewal_export.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Renewal Export - Insta Insurances Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <style>
        .export-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 24px;
        }

        .export-header {
            background: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb;
            margin-bottom: 24px;
        }

        .month-selector {
            background: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb;
            margin-bottom: 24px;
        }

        .results-container {
            background: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb;
            min-height: 400px;
        }

        .policy-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 16px;
        }

        .policy-table th,
        .policy-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e5e7eb;
        }

        .policy-table th {
            background-color: #f9fafb;
            font-weight: 600;
            color: #374151;
        }

        .policy-table tbody tr:hover {
            background-color: #f9fafb;
        }

        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid #e3e3e3;
            border-top: 2px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 8px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .alert {
            padding: var(--spacing-4);
            border-radius: var(--radius-md);
            margin-bottom: var(--spacing-4);
        }

        .alert-success {
            background-color: var(--success-light);
            color: var(--success-dark);
            border: 1px solid var(--success);
        }

        .alert-danger {
            background-color: var(--danger-light);
            color: var(--danger-dark);
            border: 1px solid var(--danger);
        }

        .alert-info {
            background-color: var(--info-light);
            color: var(--info-dark);
            border: 1px solid var(--info);
        }

        .form-select, .form-control {
            border: 1px solid var(--gray-300);
            border-radius: var(--radius-md);
            padding: var(--spacing-3);
            font-size: 14px;
        }

        .form-select:focus, .form-control:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 2px var(--primary-light);
            outline: none;
        }

        .stats-row {
            display: flex;
            gap: var(--spacing-4);
            margin-bottom: var(--spacing-4);
        }

        .stat-item {
            background: var(--gray-50);
            padding: var(--spacing-3);
            border-radius: var(--radius-md);
            text-align: center;
            flex: 1;
        }

        .stat-number {
            font-size: 24px;
            font-weight: 600;
            color: var(--primary);
        }

        .stat-label {
            font-size: 12px;
            color: var(--gray-600);
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
    </style>
</head>
<body>
    <div class="export-container">
        <!-- Header -->
        <div class="export-header">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-2">Renewal Export</h1>
                    <p class="text-muted mb-0">Export policies expiring in a specific month</p>
                </div>
                <a href="{{ url_for('dashboard.index') }}" class="btn btn-outline-secondary">
                    ← Back to Dashboard
                </a>
            </div>
        </div>

        <!-- Month Selector -->
        <div class="month-selector">
            <h5 class="mb-4">Select Month and Year</h5>
            <div class="row">
                <div class="col-md-4">
                    <label for="monthSelect" class="form-label">Month</label>
                    <select id="monthSelect" class="form-select">
                        <option value="">Select Month</option>
                        <option value="1">January</option>
                        <option value="2">February</option>
                        <option value="3">March</option>
                        <option value="4">April</option>
                        <option value="5">May</option>
                        <option value="6">June</option>
                        <option value="7">July</option>
                        <option value="8">August</option>
                        <option value="9">September</option>
                        <option value="10">October</option>
                        <option value="11">November</option>
                        <option value="12">December</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label for="yearSelect" class="form-label">Year</label>
                    <select id="yearSelect" class="form-select">
                        <option value="">Select Year</option>
                    </select>
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button id="loadDataBtn" class="btn btn-primary me-2">
                        <span class="loading-spinner" id="loadSpinner"></span>
                        Load Data
                    </button>
                    <button id="exportBtn" class="btn btn-success" disabled>
                        <span class="loading-spinner" id="exportSpinner"></span>
                        Export Excel
                    </button>
                </div>
            </div>
        </div>

        <!-- Results Container -->
        <div class="results-container">
            <div id="alertContainer"></div>
            
            <div id="initialMessage" class="text-center py-5">
                <div class="text-muted">
                    <h5>Select a month and year to view expiring policies</h5>
                    <p>Choose a month and year from the dropdown above, then click "Load Data" to see policies expiring in that period.</p>
                </div>
            </div>

            <div id="resultsContent" style="display: none;">
                <div class="stats-row">
                    <div class="stat-item">
                        <div class="stat-number" id="totalPolicies">0</div>
                        <div class="stat-label">Total Policies</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="selectedMonth">-</div>
                        <div class="stat-label">Selected Month</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="selectedYear">-</div>
                        <div class="stat-label">Selected Year</div>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="policy-table">
                        <thead>
                            <tr>
                                <th>Expiry Date</th>
                                <th>Member Name</th>
                                <th>Policy Number</th>
                                <th>Group</th>
                                <th>Sub-Group</th>
                                <th>Company</th>
                                <th>Remarks</th>
                            </tr>
                        </thead>
                        <tbody id="policyTableBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Initialize year dropdown
        function initializeYearDropdown() {
            const yearSelect = document.getElementById('yearSelect');
            const currentYear = new Date().getFullYear();
            
            // Add years from current year - 1 to current year + 3
            for (let year = currentYear - 1; year <= currentYear + 3; year++) {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                if (year === currentYear) {
                    option.selected = true;
                }
                yearSelect.appendChild(option);
            }
        }

        // Set current month as default
        function setCurrentMonth() {
            const monthSelect = document.getElementById('monthSelect');
            const currentMonth = new Date().getMonth() + 1; // JavaScript months are 0-indexed
            monthSelect.value = currentMonth;
        }

        // Show alert message
        function showAlert(message, type = 'info') {
            const alertContainer = document.getElementById('alertContainer');
            alertContainer.innerHTML = `
                <div class="alert alert-${type}">
                    ${message}
                </div>
            `;
            
            // Auto-hide success messages after 5 seconds
            if (type === 'success') {
                setTimeout(() => {
                    alertContainer.innerHTML = '';
                }, 5000);
            }
        }

        // Format date from YYYY-MM-DD to DD/MM/YYYY
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            try {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-GB'); // DD/MM/YYYY format
            } catch (e) {
                return dateString;
            }
        }

        // Load renewal data
        async function loadRenewalData() {
            const monthSelect = document.getElementById('monthSelect');
            const yearSelect = document.getElementById('yearSelect');
            const loadBtn = document.getElementById('loadDataBtn');
            const exportBtn = document.getElementById('exportBtn');
            const loadSpinner = document.getElementById('loadSpinner');
            
            const month = monthSelect.value;
            const year = yearSelect.value;
            
            if (!month || !year) {
                showAlert('Please select both month and year', 'danger');
                return;
            }
            
            // Show loading state
            loadBtn.disabled = true;
            loadSpinner.style.display = 'inline-block';
            exportBtn.disabled = true;
            
            try {
                const response = await fetch(`/api/get_renewal_data/${year}/${month}`);
                const data = await response.json();
                
                if (data.success) {
                    displayRenewalData(data.policies, month, year);
                    exportBtn.disabled = data.policies.length === 0;
                    
                    if (data.policies.length === 0) {
                        showAlert('No policies found expiring in the selected month', 'info');
                    } else {
                        showAlert(`Found ${data.policies.length} policies expiring in the selected month`, 'success');
                    }
                } else {
                    showAlert(data.message || 'Error loading renewal data', 'danger');
                }
            } catch (error) {
                showAlert('Network error occurred while loading data', 'danger');
                console.error('Error:', error);
            } finally {
                // Hide loading state
                loadBtn.disabled = false;
                loadSpinner.style.display = 'none';
            }
        }

        // Display renewal data in table
        function displayRenewalData(policies, month, year) {
            const initialMessage = document.getElementById('initialMessage');
            const resultsContent = document.getElementById('resultsContent');
            const tableBody = document.getElementById('policyTableBody');
            const totalPolicies = document.getElementById('totalPolicies');
            const selectedMonth = document.getElementById('selectedMonth');
            const selectedYear = document.getElementById('selectedYear');
            
            // Hide initial message and show results
            initialMessage.style.display = 'none';
            resultsContent.style.display = 'block';
            
            // Update stats
            totalPolicies.textContent = policies.length;
            const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                              'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            selectedMonth.textContent = monthNames[month - 1];
            selectedYear.textContent = year;
            
            // Clear and populate table
            tableBody.innerHTML = '';
            
            policies.forEach(policy => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${formatDate(policy.expiry_date)}</td>
                    <td>${policy.member_name}</td>
                    <td>${policy.policy_number}</td>
                    <td>${policy.group_name}</td>
                    <td>${policy.subgroup_name}</td>
                    <td>${policy.insurance_company}</td>
                    <td>${policy.remarks}</td>
                `;
                tableBody.appendChild(row);
            });
        }

        // Export to Excel
        async function exportToExcel() {
            const monthSelect = document.getElementById('monthSelect');
            const yearSelect = document.getElementById('yearSelect');
            const exportBtn = document.getElementById('exportBtn');
            const exportSpinner = document.getElementById('exportSpinner');
            
            const month = monthSelect.value;
            const year = yearSelect.value;
            
            if (!month || !year) {
                showAlert('Please select both month and year', 'danger');
                return;
            }
            
            // Show loading state
            exportBtn.disabled = true;
            exportSpinner.style.display = 'inline-block';
            
            try {
                const response = await fetch(`/api/export_renewal_excel/${year}/${month}`);
                
                if (response.ok) {
                    // Create download link
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    
                    // Get filename from response headers or create default
                    const contentDisposition = response.headers.get('content-disposition');
                    let filename = `Renewal_Export_${month}_${year}.xlsx`;
                    if (contentDisposition) {
                        const filenameMatch = contentDisposition.match(/filename="?([^"]+)"?/);
                        if (filenameMatch) {
                            filename = filenameMatch[1];
                        }
                    }
                    
                    a.download = filename;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    
                    showAlert('Excel file downloaded successfully!', 'success');
                } else {
                    const errorData = await response.json();
                    showAlert(errorData.message || 'Error exporting to Excel', 'danger');
                }
            } catch (error) {
                showAlert('Network error occurred while exporting', 'danger');
                console.error('Export error:', error);
            } finally {
                // Hide loading state
                exportBtn.disabled = false;
                exportSpinner.style.display = 'none';
            }
        }

        // Event listeners
        document.getElementById('loadDataBtn').addEventListener('click', loadRenewalData);
        document.getElementById('exportBtn').addEventListener('click', exportToExcel);

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializeYearDropdown();
            setCurrentMonth();
        });
    </script>
</body>
</html>



================================================
FILE: templates/renewal_page.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Renew Policy - {{ config.PORTAL_TITLE }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        .renewal-container {
            max-width: 1000px;
            margin: var(--spacing-10) auto;
        }
        
        .page-header {
            text-align: center;
            margin-bottom: var(--spacing-8);
        }
        
        .page-title {
            font-size: var(--font-size-3xl);
            font-weight: 700;
            color: var(--gray-900);
            margin-bottom: var(--spacing-2);
        }
        
        .page-subtitle {
            color: var(--gray-600);
            font-size: var(--font-size-lg);
        }
        
        .policy-card {
            background: var(--white);
            border-radius: var(--radius-lg);
            padding: var(--spacing-8);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
            margin-bottom: var(--spacing-6);
        }
        
        .policy-card h4 {
            font-size: var(--font-size-2xl);
            font-weight: 600;
            color: var(--gray-900);
            margin-bottom: var(--spacing-6);
            display: flex;
            align-items: center;
            gap: var(--spacing-2);
        }
        
        .policy-card h5 {
            font-size: var(--font-size-lg);
            font-weight: 600;
            color: var(--gray-900);
            margin-bottom: var(--spacing-4);
            padding-bottom: var(--spacing-2);
            border-bottom: 2px solid var(--gray-200);
            display: flex;
            align-items: center;
            gap: var(--spacing-2);
        }
        
        .section-icon {
            width: 20px;
            height: 20px;
            color: var(--primary-blue);
        }
        
        .detail-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: var(--spacing-3) 0;
            border-bottom: 1px solid var(--gray-100);
        }
        
        .detail-row:last-child {
            border-bottom: none;
        }
        
        .detail-label {
            font-weight: 500;
            color: var(--gray-600);
            font-size: var(--font-size-sm);
            display: flex;
            align-items: center;
            gap: var(--spacing-2);
        }
        
        .detail-value {
            color: var(--gray-900);
            font-size: var(--font-size-sm);
            font-weight: 500;
        }
        
        .contact-icon {
            width: 16px;
            height: 16px;
            color: var(--gray-500);
        }
        
        .badge-renewed {
            background: var(--success-light);
            color: #065f46;
            padding: var(--spacing-2) var(--spacing-4);
            border-radius: var(--radius-sm);
            font-weight: 500;
            font-size: var(--font-size-sm);
        }
        
        .badge-pending {
            background: var(--warning-light);
            color: #92400e;
            padding: var(--spacing-2) var(--spacing-4);
            border-radius: var(--radius-sm);
            font-weight: 500;
            font-size: var(--font-size-sm);
        }
        
        .form-section {
            background: var(--gray-50);
            border-radius: var(--radius-lg);
            padding: var(--spacing-6);
            margin-bottom: var(--spacing-6);
            border: 1px solid var(--gray-200);
        }
        
        .form-section h5 {
            color: var(--gray-900);
            margin-bottom: var(--spacing-4);
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: var(--spacing-2);
        }
        
        .btn-renew {
            background: var(--success);
            border: none;
            color: var(--white);
            padding: var(--spacing-3) var(--spacing-6);
            font-weight: 500;
            border-radius: var(--radius-md);
            display: inline-flex;
            align-items: center;
            gap: var(--spacing-2);
        }
        
        .btn-renew:hover {
            background: #059669;
            color: var(--white);
        }
        
        .history-item {
            background: var(--white);
            padding: var(--spacing-4);
            border-radius: var(--radius-md);
            margin-bottom: var(--spacing-3);
            border: 1px solid var(--gray-200);
        }
        
        .history-label {
            font-weight: 600;
            color: var(--gray-700);
            font-size: var(--font-size-sm);
            margin-bottom: var(--spacing-1);
        }
        
        .history-value {
            color: var(--gray-900);
            font-size: var(--font-size-sm);
        }
        
        .warning-section {
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            border: 2px solid var(--warning);
            border-radius: var(--radius-lg);
            padding: var(--spacing-6);
            margin: var(--spacing-6) 0;
        }
        
        .warning-icon {
            width: 20px;
            height: 20px;
            color: var(--warning);
        }
        
        .required-indicator {
            color: var(--danger);
        }
        
        .form-help {
            font-size: var(--font-size-sm);
            color: var(--gray-500);
            margin-top: var(--spacing-1);
        }
        
        @media (max-width: 768px) {
            .renewal-container {
                margin: var(--spacing-6) auto;
                padding: var(--spacing-4);
            }
            
            .policy-card {
                padding: var(--spacing-6);
            }
            
            .detail-row {
                flex-direction: column;
                align-items: flex-start;
                gap: var(--spacing-1);
            }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <div class="d-flex gap-2">
                <a href="{{ url_for('existing_policies.list_all') }}" class="btn btn-outline">Back to Clients</a>
                <a href="{{ url_for('auth.logout') }}" class="btn btn-outline">Logout</a>
            </div>
        </div>
    </nav>

    <div class="renewal-container">
        <div class="page-header">
            <h1 class="page-title">Policy Renewal</h1>
            <p class="page-subtitle">Update policy information and upload new documents</p>
        </div>

        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                <div class="alert alert-{{ 'danger' if category == 'error' else 'success' }} alert-dismissible fade show">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <!-- Policy Information -->
        <div class="policy-card">
            <h4>
                <svg class="section-icon" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                </svg>
                Current Policy Information
            </h4>
            
            <div class="detail-row">
                <span class="detail-label">Policy ID:</span>
                <span class="detail-value">#{{ policy.policy_id }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Client Name:</span>
                <span class="detail-value">{{ client.name }} ({{ client.client_id }})</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Member Name:</span>
                <span class="detail-value">{{ member.member_name }}</span>
            </div>
            {% if client.email %}
            <div class="detail-row">
                <span class="detail-label">
                    <svg class="contact-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
                    </svg>
                    Email:
                </span>
                <span class="detail-value">{{ client.email }}</span>
            </div>
            {% endif %}
            {% if client.phone %}
            <div class="detail-row">
                <span class="detail-label">
                    <svg class="contact-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
                    </svg>
                    Phone:
                </span>
                <span class="detail-value">{{ client.phone }}</span>
            </div>
            {% endif %}
            <div class="detail-row">
                <span class="detail-label">Company Name:</span>
                <span class="detail-value">{{ policy.insurance_company }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Policy Type:</span>
                <span class="detail-value">{{ policy.product_name }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Current Expiry Date:</span>
                <span class="detail-value">{{ policy.policy_to | indian_date }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Policy Number:</span>
                <span class="detail-value">{{ policy.policy_number or 'N/A' }}</span>
            </div>
            {% if policy.last_reminder_sent %}
            <div class="detail-row">
                <span class="detail-label">Last Reminder Sent:</span>
                <span class="detail-value">{{ policy.last_reminder_sent[:19] }}</span>
            </div>
            {% endif %}
        </div>

        <!-- Renewal History -->
        {% if history %}
        <div class="policy-card">
            <h5>
                <svg class="section-icon" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
                Renewal History
            </h5>
            {% if history.last_renewed %}
            <div class="history-item">
                <div class="history-label">Last Renewed:</div>
                <div class="history-value">{{ history.last_renewed[:19] }}</div>
            </div>
            {% endif %}
            {% if history.last_reminder_sent %}
            <div class="history-item">
                <div class="history-label">Last Reminder Sent:</div>
                <div class="history-value">{{ history.last_reminder_sent[:19] }}</div>
            </div>
            {% endif %}
        </div>
        {% endif %}

        <!-- Edit Policy Details Section -->
        <div class="policy-card">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4>
                    <svg class="section-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                    </svg>
                    Edit Policy Details
                </h4>
                <button type="button" class="btn btn-outline" id="toggleEditBtn" onclick="toggleEditMode()">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                    </svg>
                    Edit Details
                </button>
            </div>
            
            <div id="editDetailsSection" style="display: none;">
                <p class="text-muted mb-4">Update policy information before renewal. Changes will be saved when you click "Save Changes".</p>
                
                <form id="policyDetailsForm">
                    <input type="hidden" id="editPolicyId" value="{{ policy.policy_id }}">
                    
                    <!-- Basic Policy Information -->
                    <div class="row g-3 mb-4">
                        <div class="col-md-6">
                            <label for="editInsuranceCompany" class="form-label">Insurance Company</label>
                            <select class="form-select" id="editInsuranceCompany">
                                <option value="">Select insurance company...</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="editProductName" class="form-label">Product Type</label>
                            <input type="text" class="form-control" id="editProductName" value="{{ policy.product_name or '' }}">
                        </div>
                        <div class="col-md-6">
                            <label for="editAgentName" class="form-label">Agent Name</label>
                            <select class="form-select" id="editAgentName">
                                <option value="">Select agent name...</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="editBusinessType" class="form-label">Business Type</label>
                            <select class="form-control" id="editBusinessType">
                                <option value="NEW" {{ 'selected' if policy.business_type == 'NEW' else '' }}>New</option>
                                <option value="RENEWAL" {{ 'selected' if policy.business_type == 'RENEWAL' else '' }}>Renewal</option>
                                <option value="ROLL OVER" {{ 'selected' if policy.business_type == 'ROLL OVER' else '' }}>Roll Over</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Premium and Financial Information -->
                    <div class="row g-3 mb-4">
                        <div class="col-md-4">
                            <label for="editSumInsured" class="form-label">Sum Insured</label>
                            <input type="number" class="form-control" id="editSumInsured" value="{{ policy.sum_insured or '' }}" step="0.01">
                        </div>
                        <div class="col-md-4">
                            <label for="editNetPremium" class="form-label">Net Premium</label>
                            <input type="number" class="form-control" id="editNetPremium" value="{{ policy.net_premium or '' }}" step="0.01">
                        </div>
                        <div class="col-md-4">
                            <label for="editGrossPremium" class="form-label">Gross Premium</label>
                            <input type="number" class="form-control" id="editGrossPremium" value="{{ policy.gross_premium or '' }}" step="0.01">
                        </div>
                    </div>
                    
                    <!-- Policy Dates -->
                    <div class="row g-3 mb-4">
                        <div class="col-md-4">
                            <label for="editPolicyFrom" class="form-label">Policy Start Date</label>
                            <input type="text" class="form-control date-picker" id="editPolicyFrom" value="{{ policy.policy_from | indian_date if policy.policy_from else '' }}" placeholder="DD/MM/YYYY">
                        </div>
                        <div class="col-md-4">
                            <label for="editPolicyTo" class="form-label">Policy End Date</label>
                            <input type="text" class="form-control date-picker" id="editPolicyTo" value="{{ policy.policy_to | indian_date if policy.policy_to else '' }}" placeholder="DD/MM/YYYY">
                        </div>
                        <div class="col-md-4">
                            <label for="editPaymentDate" class="form-label">Payment Date</label>
                            <input type="text" class="form-control date-picker" id="editPaymentDate" value="{{ policy.payment_date | indian_date if policy.payment_date else '' }}" placeholder="DD/MM/YYYY">
                        </div>
                    </div>
                    
                    <!-- Additional Information -->
                    <div class="row g-3 mb-4">
                        <div class="col-md-6">
                            <label for="editGroupName" class="form-label">Group Name</label>
                            <input type="text" class="form-control" id="editGroupName" value="{{ policy.group_name or '' }}">
                        </div>
                        <div class="col-md-6">
                            <label for="editSubgroupName" class="form-label">Subgroup Name</label>
                            <input type="text" class="form-control" id="editSubgroupName" value="{{ policy.subgroup_name or '' }}">
                        </div>
                        <div class="col-12">
                            <label for="editRemarks" class="form-label">Remarks</label>
                            <textarea class="form-control" id="editRemarks" rows="3">{{ policy.remarks or '' }}</textarea>
                        </div>
                    </div>
                    
                    <!-- Health Insurance Details -->
                    {% if health_details or not health_details %}
                    <div class="mb-4">
                        <h6 class="mb-3">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-2">
                                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                            </svg>
                            Health Insurance Details
                        </h6>
                        
                        <div class="row g-3 mb-3">
                            <div class="col-md-6">
                                <label for="editHealthPlanType" class="form-label">Plan Type</label>
                                <select class="form-control" id="editHealthPlanType">
                                    <option value="">No Health Insurance</option>
                                    <option value="FLOATER" {{ 'selected' if health_details and health_details.plan_type == 'FLOATER' else '' }}>Floater</option>
                                    <option value="INDIVIDUAL" {{ 'selected' if health_details and health_details.plan_type == 'INDIVIDUAL' else '' }}>Individual</option>
                                </select>
                            </div>
                        </div>
                        
                        <!-- Floater-specific fields -->
                        <div id="floaterFieldsSection" style="display: none;">
                            <div class="row g-3 mb-3">
                                <div class="col-md-6">
                                    <label for="editFloaterSumInsured" class="form-label">Floater Sum Insured</label>
                                    <input type="number" step="0.01" id="editFloaterSumInsured" class="form-control" placeholder="Total sum insured for all members" value="{{ health_details.floater_sum_insured or '' if health_details else '' }}">
                                    <small class="text-muted">This amount applies to all members in the floater policy</small>
                                </div>
                                <div class="col-md-6">
                                    <label for="editFloaterBonus" class="form-label">Floater Bonus</label>
                                    <input type="number" step="0.01" id="editFloaterBonus" class="form-control" placeholder="Total bonus for all members" value="{{ health_details.floater_bonus or '' if health_details else '' }}">
                                    <small class="text-muted">This bonus applies to all members in the floater policy</small>
                                </div>
                            </div>
                        </div>
                        
                        <div id="healthMembersSection">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <label class="form-label mb-0">Health Insured Members</label>
                                <button type="button" class="btn btn-sm btn-outline" onclick="addHealthMember()">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                                    </svg>
                                    Add Member
                                </button>
                            </div>
                            
                            <div id="healthMembersList">
                                {% if health_members %}
                                    {% for member in health_members %}
                                    <div class="health-member-item border rounded p-3 mb-3">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <h6 class="mb-0">Member {{ loop.index }}</h6>
                                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeHealthMember(this)">
                                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                                    <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                                                </svg>
                                            </button>
                                        </div>
                                        <div class="row g-3">
                                            <div class="col-md-4">
                                                <label class="form-label">Member Name</label>
                                                <input type="text" class="form-control health-member-name" value="{{ member.member_name or '' }}">
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label">Sum Insured</label>
                                                <input type="number" class="form-control health-member-sum" value="{{ member.sum_insured or '' }}" step="0.01">
                                            </div>
                                            <div class="col-md-4">
                                                <label class="form-label">Bonus</label>
                                                <input type="number" class="form-control health-member-bonus" value="{{ member.bonus or '' }}" step="0.01">
                                            </div>
                                        </div>
                                    </div>
                                    {% endfor %}
                                {% endif %}
                            </div>
                        </div>
                    </div>
                    {% endif %}
                    
                    <!-- Factory Insurance Details -->
                    {% if factory_details or not factory_details %}
                    <div class="mb-4">
                        <h6 class="mb-3">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-2">
                                <path d="M12 3L2 12h3v8h14v-8h3L12 3zm0 2.69L18 11v7h-3v-6H9v6H6v-7l6-5.31z"/>
                            </svg>
                            Factory Insurance Details
                        </h6>
                        
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="editFactoryBuilding" class="form-label">Building Coverage</label>
                                <input type="number" class="form-control" id="editFactoryBuilding" value="{{ factory_details.building if factory_details else '' }}" step="0.01" placeholder="Enter building coverage amount">
                            </div>
                            <div class="col-md-6">
                                <label for="editFactoryPlantMachinery" class="form-label">Plant & Machinery Coverage</label>
                                <input type="number" class="form-control" id="editFactoryPlantMachinery" value="{{ factory_details.plant_machinery if factory_details else '' }}" step="0.01" placeholder="Enter plant & machinery coverage">
                            </div>
                            <div class="col-md-6">
                                <label for="editFactoryFurnitureFittings" class="form-label">Furniture & Fittings Coverage</label>
                                <input type="number" class="form-control" id="editFactoryFurnitureFittings" value="{{ factory_details.furniture_fittings if factory_details else '' }}" step="0.01" placeholder="Enter furniture & fittings coverage">
                            </div>
                            <div class="col-md-6">
                                <label for="editFactoryStocks" class="form-label">Stocks Coverage</label>
                                <input type="number" class="form-control" id="editFactoryStocks" value="{{ factory_details.stocks if factory_details else '' }}" step="0.01" placeholder="Enter stocks coverage">
                            </div>
                            <div class="col-md-6">
                                <label for="editFactoryElectrical" class="form-label">Electrical Installations Coverage</label>
                                <input type="number" class="form-control" id="editFactoryElectrical" value="{{ factory_details.electrical_installations if factory_details else '' }}" step="0.01" placeholder="Enter electrical installations coverage">
                            </div>
                        </div>
                    </div>
                    {% endif %}
                    
                    <div class="d-flex gap-3 mt-4">
                        <button type="button" class="btn btn-success" onclick="saveDetailsChanges()">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"/>
                            </svg>
                            Save Changes
                        </button>
                        <button type="button" class="btn btn-outline" onclick="cancelEdit()">
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Renewal Form -->
        <div class="form-section">
            <h5>
                <svg class="section-icon" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                </svg>
                Upload Renewed Policy
            </h5>
            <p class="text-muted mb-4">Upload the new policy PDF document. This will replace the current policy document.</p>
            
            <form id="renewalForm" enctype="multipart/form-data">
                <input type="hidden" id="policyId" name="policy_id" value="{{ policy.policy_id }}">
                
                <div class="row g-3">
                    <div class="col-md-6">
                        <label for="renewedFile" class="form-label">New Policy PDF <span class="required-indicator">*</span></label>
                        <input type="file" class="form-control" id="renewedFile" name="renewed_file" accept=".pdf" required>
                        <div class="form-help">Upload the renewed policy document (PDF only, max 10MB)</div>
                    </div>
                    
                    <div class="col-md-6">
                        <label for="newExpiryDate" class="form-label">New Expiry Date</label>
                        <input type="text" class="form-control date-picker" id="newExpiryDate" name="new_expiry_date" placeholder="DD/MM/YYYY">
                        <div class="form-help">Leave empty to keep current expiry date</div>
                    </div>
                    
                    <div class="col-md-6">
                        <label for="newPolicyNumber" class="form-label">New Policy Number</label>
                        <input type="text" class="form-control" id="newPolicyNumber" name="new_policy_number" placeholder="Enter new policy number">
                        <div class="form-help">Leave empty to keep current policy number</div>
                    </div>
                </div>
                
                <div class="warning-section">
                    <div class="d-flex align-items-start gap-3">
                        <svg class="warning-icon" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"/>
                        </svg>
                        <div>
                            <strong>Important:</strong> This action will permanently replace the current policy document. 
                            The old document will be deleted from Google Drive and cannot be recovered.
                        </div>
                    </div>
                </div>
                
                <div class="d-flex gap-3 mt-4">
                    <button type="button" class="btn btn-renew" onclick="renewPolicy()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                        </svg>
                        Renew Policy
                    </button>
                    <a href="{{ url_for('existing_policies.list_all') }}" class="btn btn-outline">Cancel</a>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="{{ url_for('static', filename='dropdown_manager.js') }}?v=2.0"></script>
    <script>
        // Initialize date pickers with DD/MM/YYYY format
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize insurance company dropdown
            initializeInsuranceCompanyDropdown('editInsuranceCompany');
            
            // Initialize agent name dropdown  
            initializeAgentNameDropdown('editAgentName');
            
            // Set current values after dropdowns are initialized
            setTimeout(() => {
                const insuranceCompany = '{{ policy.insurance_company or "" }}';
                const agentName = '{{ policy.agent_name or "" }}';
                
                if (insuranceCompany) {
                    document.getElementById('editInsuranceCompany').value = insuranceCompany;
                }
                if (agentName) {
                    document.getElementById('editAgentName').value = agentName;
                }
            }, 100);
            flatpickr('.date-picker', {
                dateFormat: 'd/m/Y',
                altInput: false,
                allowInput: true,
                locale: {
                    firstDayOfWeek: 1
                }
            });
        });
    </script>
    <script>
        // Edit mode functions
        function toggleEditMode() {
            const editSection = document.getElementById('editDetailsSection');
            const toggleBtn = document.getElementById('toggleEditBtn');
            
            if (editSection.style.display === 'none') {
                editSection.style.display = 'block';
                toggleBtn.innerHTML = `
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                    </svg>
                    Close Edit
                `;
            } else {
                editSection.style.display = 'none';
                toggleBtn.innerHTML = `
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>
                    </svg>
                    Edit Details
                `;
            }
        }
        
        function cancelEdit() {
            // Reset form to original values
            document.getElementById('editInsuranceCompany').value = '{{ policy.insurance_company or "" }}';
            document.getElementById('editProductName').value = '{{ policy.product_name or "" }}';
            document.getElementById('editAgentName').value = '{{ policy.agent_name or "" }}';
            document.getElementById('editBusinessType').value = '{{ policy.business_type or "" }}';
            
            // Close edit section
            toggleEditMode();
        }
        
        async function saveDetailsChanges() {
            const button = event.target;
            const originalText = button.innerHTML;
            
            // Show loading state
            button.disabled = true;
            button.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Saving...';
            
            try {
                const data = {
                    policy_id: document.getElementById('editPolicyId').value,
                    insurance_company: document.getElementById('editInsuranceCompany').value,
                    product_name: document.getElementById('editProductName').value,
                    agent_name: document.getElementById('editAgentName').value,
                    business_type: document.getElementById('editBusinessType').value,
                    sum_insured: document.getElementById('editSumInsured').value,
                    net_premium: document.getElementById('editNetPremium').value,
                    gross_premium: document.getElementById('editGrossPremium').value,
                    policy_from: document.getElementById('editPolicyFrom').value,
                    policy_to: document.getElementById('editPolicyTo').value,
                    payment_date: document.getElementById('editPaymentDate').value,
                    group_name: document.getElementById('editGroupName').value,
                    subgroup_name: document.getElementById('editSubgroupName').value,
                    remarks: document.getElementById('editRemarks').value
                };
                
                // Add health insurance data
                const healthData = collectHealthData();
                if (healthData) {
                    data.health_details = healthData;
                }
                
                // Add factory insurance data
                const factoryData = collectFactoryData();
                if (factoryData) {
                    data.factory_details = factoryData;
                }
                
                const response = await fetch('/api/update_policy_details', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Policy details updated successfully!');
                    // Reload page to show updated information
                    window.location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to save changes. Please try again.');
            } finally {
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }
        
        // Health member management functions
        function addHealthMember() {
            const membersList = document.getElementById('healthMembersList');
            const memberCount = membersList.children.length + 1;
            
            // Check current plan type to determine field visibility
            const planType = document.getElementById('editHealthPlanType').value;
            const isFloaterPlan = planType === 'FLOATER';
            const sumInsuredDisplay = isFloaterPlan ? 'none' : 'block';
            const bonusDisplay = isFloaterPlan ? 'none' : 'block';
            
            const memberDiv = document.createElement('div');
            memberDiv.className = 'health-member-item border rounded p-3 mb-3';
            memberDiv.innerHTML = `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0">Member ${memberCount}</h6>
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeHealthMember(this)">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                        </svg>
                    </button>
                </div>
                <div class="row g-3">
                    <div class="col-md-4">
                        <label class="form-label">Member Name</label>
                        <input type="text" class="form-control health-member-name" placeholder="Enter member name">
                    </div>
                    <div class="col-md-4" style="display: ${sumInsuredDisplay}">
                        <label class="form-label">Sum Insured</label>
                        <input type="number" class="form-control health-member-sum" step="0.01" placeholder="Enter sum insured">
                    </div>
                    <div class="col-md-4" style="display: ${bonusDisplay}">
                        <label class="form-label">Bonus</label>
                        <input type="number" class="form-control health-member-bonus" step="0.01" placeholder="Enter bonus">
                    </div>
                </div>
            `;
            
            membersList.appendChild(memberDiv);
        }
        
        function removeHealthMember(button) {
            const memberItem = button.closest('.health-member-item');
            memberItem.remove();
            
            // Update member numbers
            const membersList = document.getElementById('healthMembersList');
            const members = membersList.querySelectorAll('.health-member-item');
            members.forEach((member, index) => {
                const title = member.querySelector('h6');
                title.textContent = `Member ${index + 1}`;
            });
        }
        
        // Handle health plan type changes
        document.addEventListener('DOMContentLoaded', function() {
            const planTypeSelect = document.getElementById('editHealthPlanType');
            if (planTypeSelect) {
                planTypeSelect.addEventListener('change', handleHealthPlanTypeChange);
                // Initialize on page load
                handleHealthPlanTypeChange();
            }
        });
        
        function handleHealthPlanTypeChange() {
            const planType = document.getElementById('editHealthPlanType').value;
            const floaterFieldsSection = document.getElementById('floaterFieldsSection');
            const healthMembersSection = document.getElementById('healthMembersSection');
            
            if (planType === 'FLOATER') {
                // Show floater fields, hide individual member sum_insured/bonus fields
                floaterFieldsSection.style.display = 'block';
                
                // Hide sum_insured and bonus fields for individual members
                const memberSumFields = document.querySelectorAll('.health-member-sum');
                const memberBonusFields = document.querySelectorAll('.health-member-bonus');
                
                memberSumFields.forEach(field => {
                    const colDiv = field.closest('.col-md-4');
                    if (colDiv) colDiv.style.display = 'none';
                });
                
                memberBonusFields.forEach(field => {
                    const colDiv = field.closest('.col-md-4');
                    if (colDiv) colDiv.style.display = 'none';
                });
                
            } else if (planType === 'INDIVIDUAL') {
                // Hide floater fields, show individual member sum_insured/bonus fields
                floaterFieldsSection.style.display = 'none';
                
                // Show sum_insured and bonus fields for individual members
                const memberSumFields = document.querySelectorAll('.health-member-sum');
                const memberBonusFields = document.querySelectorAll('.health-member-bonus');
                
                memberSumFields.forEach(field => {
                    const colDiv = field.closest('.col-md-4');
                    if (colDiv) colDiv.style.display = 'block';
                });
                
                memberBonusFields.forEach(field => {
                    const colDiv = field.closest('.col-md-4');
                    if (colDiv) colDiv.style.display = 'block';
                });
                
            } else {
                // No health insurance selected
                floaterFieldsSection.style.display = 'none';
            }
        }
        
        // Collect health insurance data
        function collectHealthData() {
            const planType = document.getElementById('editHealthPlanType').value;
            if (!planType) return null;
            
            const healthData = {
                plan_type: planType
            };
            
            // Add floater-specific fields if it's a floater plan
            if (planType === 'FLOATER') {
                const floaterSumInsured = document.getElementById('editFloaterSumInsured').value;
                const floaterBonus = document.getElementById('editFloaterBonus').value;
                
                if (floaterSumInsured) healthData.floater_sum_insured = floaterSumInsured;
                if (floaterBonus) healthData.floater_bonus = floaterBonus;
            }
            
            const members = [];
            const memberItems = document.querySelectorAll('.health-member-item');
            
            memberItems.forEach(item => {
                const name = item.querySelector('.health-member-name').value;
                const sumInsured = item.querySelector('.health-member-sum').value;
                const bonus = item.querySelector('.health-member-bonus').value;
                
                if (name) {  // Only add if name is provided
                    const memberData = { member_name: name };
                    
                    // For individual plans, include sum_insured and bonus per member
                    // For floater plans, only include member names
                    if (planType === 'INDIVIDUAL') {
                        if (sumInsured) memberData.sum_insured = sumInsured;
                        if (bonus) memberData.bonus = bonus;
                    }
                    
                    members.push(memberData);
                }
            });
            
            healthData.members = members;
            return healthData;
        }
        
        // Collect factory insurance data
        function collectFactoryData() {
            const building = document.getElementById('editFactoryBuilding').value;
            const plantMachinery = document.getElementById('editFactoryPlantMachinery').value;
            const furnitureFittings = document.getElementById('editFactoryFurnitureFittings').value;
            const stocks = document.getElementById('editFactoryStocks').value;
            const electrical = document.getElementById('editFactoryElectrical').value;
            
            // Only return data if at least one field has a value
            if (building || plantMachinery || furnitureFittings || stocks || electrical) {
                return {
                    building: building,
                    plant_machinery: plantMachinery,
                    furniture_fittings: furnitureFittings,
                    stocks: stocks,
                    electrical_installations: electrical
                };
            }
            return null;
        }
    </script>
    <script>
        async function renewPolicy() {
            const form = document.getElementById('renewalForm');
            const formData = new FormData(form);
            const button = event.target;
            const originalText = button.innerHTML;
            
            // Validate file
            const fileInput = document.getElementById('renewedFile');
            if (!fileInput.files[0]) {
                alert('Please select a PDF file to upload');
                return;
            }
            
            if (!fileInput.files[0].name.toLowerCase().endsWith('.pdf')) {
                alert('Please select a PDF file');
                return;
            }
            
            // Confirm action
            if (!confirm('Are you sure you want to renew this policy? This will replace the current policy document permanently.')) {
                return;
            }
            
            // Disable button and show loading
            button.disabled = true;
            button.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Renewing...';
            
            try {
                const response = await fetch('/api/renew_policy', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Policy renewed successfully!\n\n' + result.message);
                    // Reload the page to show updated information
                    window.location.reload();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to renew policy. Please try again.');
            } finally {
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }
    </script>
</body>
</html>



================================================
FILE: templates/view_all_clients.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Clients - {{ config.PORTAL_TITLE }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <style>
        .client-card {
            background: var(--white);
            border-radius: var(--radius-lg);
            border: 1px solid var(--gray-200);
            margin-bottom: var(--spacing-6);
            overflow: hidden;
            transition: all 0.2s ease;
        }
        
        .client-card:hover {
            box-shadow: var(--shadow-md);
            border-color: var(--primary-blue);
        }
        
        .client-header {
            background: linear-gradient(135deg, var(--primary-blue) 0%, #4f46e5 100%);
            color: var(--white);
            padding: var(--spacing-6);
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: var(--spacing-4);
        }
        
        .client-info h3 {
            margin: 0;
            font-size: var(--font-size-xl);
            font-weight: 600;
        }
        
        .client-id {
            font-size: var(--font-size-sm);
            opacity: 0.9;
            font-weight: 500;
        }
        
        .client-stats {
            display: flex;
            gap: var(--spacing-4);
            font-size: var(--font-size-sm);
        }
        
        .stat-item {
            display: flex;
            align-items: center;
            gap: var(--spacing-1);
        }
        
        .expand-icon {
            width: 20px;
            height: 20px;
            transition: transform 0.2s ease;
        }
        
        .expand-icon.expanded {
            transform: rotate(180deg);
        }
        
        .client-details {
            padding: var(--spacing-6);
            border-top: 1px solid var(--gray-100);
            background: var(--gray-50);
        }
        
        .contact-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: var(--spacing-4);
            margin-bottom: var(--spacing-6);
        }
        
        .contact-item {
            display: flex;
            align-items: center;
            gap: var(--spacing-2);
            font-size: var(--font-size-sm);
            color: var(--gray-600);
        }
        
        .contact-icon {
            width: 16px;
            height: 16px;
            color: var(--gray-500);
        }
        
        .member-section {
            margin-bottom: var(--spacing-6);
        }
        
        .member-header {
            background: var(--white);
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-md);
            padding: var(--spacing-4);
            margin-bottom: var(--spacing-4);
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.2s ease;
        }
        
        .member-header:hover {
            background: var(--secondary-blue);
            border-color: var(--primary-blue);
        }
        
        .member-name {
            font-weight: 600;
            color: var(--gray-900);
        }
        
        .policy-count {
            background: var(--primary-blue);
            color: var(--white);
            padding: var(--spacing-1) var(--spacing-3);
            border-radius: var(--radius-full);
            font-size: var(--font-size-xs);
            font-weight: 500;
        }
        
        .policies-list {
            background: var(--white);
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-md);
            overflow: hidden;
        }
        
        .policy-item {
            padding: var(--spacing-4);
            border-bottom: 1px solid var(--gray-100);
            display: grid;
            grid-template-columns: 1fr 1fr 1fr auto;
            gap: var(--spacing-4);
            align-items: center;
        }
        
        .policy-item:last-child {
            border-bottom: none;
        }
        
        .policy-item:hover {
            background: var(--gray-50);
        }
        
        .policy-company {
            font-weight: 600;
            color: var(--gray-900);
        }
        
        .policy-product {
            color: var(--gray-600);
            font-size: var(--font-size-sm);
        }
        
        .policy-expiry {
            font-size: var(--font-size-sm);
            color: var(--gray-600);
        }
        
        .policy-actions {
            display: flex;
            gap: var(--spacing-2);
        }
        
        .search-section {
            background: var(--white);
            border-radius: var(--radius-lg);
            padding: var(--spacing-6);
            margin-bottom: var(--spacing-6);
            border: 1px solid var(--gray-200);
        }
        
        .search-box {
            position: relative;
        }
        
        .search-icon {
            position: absolute;
            left: var(--spacing-3);
            top: 50%;
            transform: translateY(-50%);
            width: 20px;
            height: 20px;
            color: var(--gray-400);
        }
        
        .search-input {
            padding-left: 3rem;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius-md);
            font-size: var(--font-size-base);
        }
        
        .summary-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: var(--spacing-4);
            margin-bottom: var(--spacing-6);
        }
        
        .summary-card {
            background: var(--white);
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-md);
            padding: var(--spacing-4);
            text-align: center;
        }
        
        .summary-number {
            font-size: var(--font-size-2xl);
            font-weight: 700;
            color: var(--primary-blue);
        }
        
        .summary-label {
            font-size: var(--font-size-sm);
            color: var(--gray-600);
            margin-top: var(--spacing-1);
        }
        
        .export-btn {
            background: rgba(255,255,255,0.2) !important;
            color: white !important;
            border: 1px solid rgba(255,255,255,0.3) !important;
            padding: 6px 12px !important;
            border-radius: 6px !important;
            text-decoration: none !important;
            font-size: 12px !important;
            font-weight: 500 !important;
            transition: all 0.2s ease !important;
            display: inline-flex !important;
            align-items: center !important;
            gap: 4px !important;
        }
        
        .export-btn:hover {
            background: rgba(255,255,255,0.3) !important;
            border-color: rgba(255,255,255,0.5) !important;
            color: white !important;
            transform: translateY(-1px) !important;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2) !important;
        }
        
        @media (max-width: 768px) {
            .policy-item {
                grid-template-columns: 1fr;
                gap: var(--spacing-2);
            }
            
            .client-header {
                flex-direction: column;
                align-items: flex-start;
                gap: var(--spacing-2);
            }
            
            .client-stats {
                align-self: stretch;
                justify-content: space-between;
            }
            
            .export-btn {
                font-size: 11px !important;
                padding: 4px 8px !important;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <div class="d-flex gap-2">
                <a href="{{ url_for('dashboard.index') }}" class="btn btn-outline">Dashboard</a>
                <a href="{{ url_for('policies.add_policy') }}" class="btn btn-outline">Add Policy</a>
                <a href="{{ url_for('pending_policies.list_pending') }}" class="btn btn-outline">Pending Policies</a>
                <a href="{{ url_for('auth.logout') }}" class="btn btn-outline">Logout</a>
            </div>
        </div>
    </nav>

    <div class="page-container">
        <div class="page-header">
            <h1>All Clients</h1>
            <p>Manage your clients, members, and their policies</p>
        </div>

        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                <div class="alert alert-{{ 'danger' if category == 'error' else 'success' }} alert-dismissible fade show">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <!-- Search Section -->
        <div class="search-section">
            <form method="GET" action="{{ url_for('existing_policies.list_all') }}">
                <div class="search-box">
                    <svg class="search-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                    </svg>
                    <input type="text" name="search" class="form-control search-input" 
                           placeholder="Search clients, members, policies..." 
                           value="{{ current_search }}">
                </div>
                <button type="submit" class="btn btn-primary mt-3">Search</button>
                {% if current_search %}
                <a href="{{ url_for('existing_policies.list_all') }}" class="btn btn-outline mt-3">Clear</a>
                {% endif %}
            </form>
        </div>

        <!-- Summary Stats -->
        <div class="summary-stats">
            <div class="summary-card">
                <div class="summary-number">{{ total_clients }}</div>
                <div class="summary-label">Total Clients</div>
            </div>
            <div class="summary-card">
                <div class="summary-number">{{ clients|sum(attribute='member_count') }}</div>
                <div class="summary-label">Total Members</div>
            </div>
            <div class="summary-card">
                <div class="summary-number">{{ clients|sum(attribute='total_policies') }}</div>
                <div class="summary-label">Total Policies</div>
            </div>
        </div>

        <!-- Clients List -->
        {% if clients %}
            {% for client in clients %}
            <div class="client-card">
                <div class="client-header" onclick="toggleClient('client-{{ loop.index }}')">
                    <div class="client-info">
                        <h3>{{ client.name }} <span class="client-id">({{ client.client_id }})</span></h3>
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        <div class="client-stats">
                            <div class="stat-item">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                                </svg>
                                {{ client.member_count }} Members
                            </div>
                            <div class="stat-item">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                                </svg>
                                {{ client.total_policies }} Policies
                            </div>
                        </div>
                        {% if client.total_policies > 0 %}
                        <a href="{{ url_for('client_export.export_client_data', client_id=client.client_id) }}" 
                           class="export-btn"
                           title="Export {{ client.client_id }} data to Excel"
                           onclick="event.stopPropagation();">
                            <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                            </svg>
                            Export Data
                        </a>
                        {% endif %}
                        <svg class="expand-icon" id="icon-client-{{ loop.index }}" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M7.41 8.84L12 13.42l4.59-4.58L18 10.25l-6 6-6-6z"/>
                        </svg>
                    </div>
                </div>
                
                <div class="client-details" id="client-{{ loop.index }}" style="display: none;">
                    <!-- Contact Information -->
                    <div class="contact-info mb-4">
                        {% if client.email %}
                        <div class="contact-item">
                            <svg class="contact-icon" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
                            </svg>
                            <strong>Email:</strong> {{ client.email }}
                        </div>
                        {% endif %}
                        {% if client.phone %}
                        <div class="contact-item">
                            <svg class="contact-icon" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
                            </svg>
                            <strong>Phone:</strong> {{ client.phone }}
                        </div>
                        {% endif %}
                    </div>
                    
                    {% for member in client.members %}
                    <div class="member-section">
                        <div class="member-header" onclick="toggleMember('member-{{ client.client_id }}-{{ member.member_id }}')">
                            <div class="member-name">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-2">
                                    <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                                </svg>
                                {{ member.member_name }}
                            </div>
                            <div class="d-flex align-items-center gap-2">
                                <span class="policy-count">{{ member.policy_count }} Policies</span>
                                <svg class="expand-icon" id="icon-member-{{ client.client_id }}-{{ member.member_id }}" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M7.41 8.84L12 13.42l4.59-4.58L18 10.25l-6 6-6-6z"/>
                                </svg>
                            </div>
                        </div>
                        
                        <div class="policies-list" id="member-{{ client.client_id }}-{{ member.member_id }}" style="display: none;">
                            {% if member.policies %}
                                {% for policy in member.policies %}
                                <div class="policy-item">
                                    <div>
                                        <div class="policy-company">{{ policy.insurance_company }}</div>
                                        <div class="policy-product">{{ policy.product_name }}</div>
                                        {% if policy.policy_number %}
                                        <div class="policy-product">Policy #{{ policy.policy_number }}</div>
                                        {% endif %}
                                    </div>
                                    <div>
                                        <div class="policy-expiry">
                                            <strong>Expiry:</strong> {{ policy.policy_to | indian_date if policy.policy_to else 'N/A' }}
                                        </div>
                                        {% if policy.net_premium %}
                                        <div class="policy-product">Premium: ₹{{ policy.net_premium }}</div>
                                        {% endif %}
                                    </div>
                                    <div>
                                        {% if policy.payment_date %}
                                        <span class="badge bg-success">Paid</span>
                                        {% elif policy.net_premium and policy.drive_url %}
                                        <span class="badge bg-success">Active</span>
                                        {% else %}
                                        <span class="badge bg-warning">Pending</span>
                                        {% endif %}
                                    </div>
                                    <div class="policy-actions">
                                        {% if policy.drive_url %}
                                        <a href="{{ policy.drive_url }}" target="_blank" class="btn btn-sm btn-outline" title="View Document">
                                            <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                                                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                                            </svg>
                                        </a>
                                        {% endif %}
                                        <a href="{{ url_for('existing_policies.view_policy', policy_id=policy.policy_id) }}" class="btn btn-sm btn-outline" title="View Details">
                                            <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                                                <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                                            </svg>
                                        </a>
                                        <a href="{{ url_for('renewal.renewal_page', policy_id=policy.policy_id) }}" class="btn btn-sm btn-success" title="Renew Policy">
                                            <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                                                <path d="M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z"/>
                                            </svg>
                                        </a>
                                    </div>
                                </div>
                                {% endfor %}
                            {% else %}
                                <div class="policy-item">
                                    <div class="text-muted">No policies found for this member</div>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                    {% endfor %}
                    
                    {% if not client.members %}
                    <div class="text-muted text-center py-4">
                        No members found for this client
                    </div>
                    {% endif %}
                </div>
            </div>
            {% endfor %}
        {% else %}
            <div class="empty-state">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                </svg>
                <h5>No clients found</h5>
                <p>{% if current_search %}No clients match your search criteria.{% else %}Start by adding your first client and policy.{% endif %}</p>
                <a href="{{ url_for('policies.add_policy') }}" class="btn btn-primary mt-3">Add First Policy</a>
            </div>
        {% endif %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function toggleClient(clientId) {
            const element = document.getElementById(clientId);
            const icon = document.getElementById('icon-' + clientId);
            
            // Check if element is hidden (either style.display is 'none' or empty/not set)
            const isHidden = element.style.display === 'none' || 
                           window.getComputedStyle(element).display === 'none';
            
            if (isHidden) {
                element.style.display = 'block';
                icon.classList.add('expanded');
            } else {
                element.style.display = 'none';
                icon.classList.remove('expanded');
            }
        }
        
        function toggleMember(memberId) {
            const element = document.getElementById(memberId);
            const icon = document.getElementById('icon-' + memberId);
            
            // Check if element is hidden (either style.display is 'none' or empty/not set)
            const isHidden = element.style.display === 'none' || 
                           window.getComputedStyle(element).display === 'none';
            
            if (isHidden) {
                element.style.display = 'block';
                icon.classList.add('expanded');
            } else {
                element.style.display = 'none';
                icon.classList.remove('expanded');
            }
        }
    </script>
</body>
</html>



================================================
FILE: templates/view_all_policies.html
================================================
{% extends "base.html" %}

{% block title %}View All Policies - Insta Insurances Portal{% endblock %}

{% block extra_css %}
<style>
    .search-container {
        background: var(--white);
        border-radius: var(--radius-lg);
        padding: var(--spacing-6);
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--gray-200);
        margin-bottom: var(--spacing-6);
    }

    .search-form {
        display: flex;
        gap: var(--spacing-3);
        align-items: center;
    }

    .search-input {
        flex: 1;
        max-width: 400px;
    }

    .policies-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--spacing-4);
    }

    .policies-count {
        color: var(--gray-600);
        font-size: var(--font-size-sm);
    }

    .table-container {
        background: var(--white);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--gray-200);
        overflow: hidden;
    }

    .table-responsive {
        overflow-x: auto;
    }

    .table {
        margin-bottom: 0;
        min-width: 1200px;
    }

    .table th {
        background: var(--gray-50);
        border-bottom: 2px solid var(--gray-200);
        font-weight: 600;
        color: var(--gray-900);
        padding: var(--spacing-4);
    }

    .table td {
        padding: var(--spacing-4);
        border-bottom: 1px solid var(--gray-100);
        vertical-align: middle;
    }

    .table tbody tr:hover {
        background: var(--gray-25);
    }

    /* Column widths */
    .table th:nth-child(1), .table td:nth-child(1) { width: 8%; }  /* Policy ID */
    .table th:nth-child(2), .table td:nth-child(2) { width: 18%; } /* Member Name */
    .table th:nth-child(3), .table td:nth-child(3) { width: 16%; } /* Insurance Company */
    .table th:nth-child(4), .table td:nth-child(4) { width: 14%; } /* Product */
    .table th:nth-child(5), .table td:nth-child(5) { width: 12%; } /* Policy Number */
    .table th:nth-child(6), .table td:nth-child(6) { width: 10%; } /* Policy From */
    .table th:nth-child(7), .table td:nth-child(7) { width: 10%; } /* Policy To */
    .table th:nth-child(8), .table td:nth-child(8) { width: 8%; }  /* Status */
    .table th:nth-child(9), .table td:nth-child(9) { width: 4%; }  /* Actions */

    .member-info {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-1);
    }

    .member-name {
        font-weight: 500;
        color: var(--gray-900);
    }

    .member-contact {
        font-size: var(--font-size-xs);
        color: var(--gray-500);
    }

    .policy-badge {
        display: inline-flex;
        align-items: center;
        gap: var(--spacing-1);
        padding: var(--spacing-1) var(--spacing-2);
        border-radius: var(--radius-sm);
        font-size: var(--font-size-xs);
        font-weight: 500;
    }

    .policy-badge.active {
        background: #d1fae5;
        color: #065f46;
    }

    .policy-badge.expiring-soon {
        background: #fef3c7;
        color: #92400e;
    }

    .policy-badge.expired {
        background: #fee2e2;
        color: #dc2626;
    }

    .policy-badge.pending {
        background: var(--warning-light);
        color: #92400e;
    }

    .policy-badge.unknown {
        background: #f3f4f6;
        color: #6b7280;
    }

    .pagination-container {
        padding: var(--spacing-4);
        border-top: 1px solid var(--gray-200);
        background: var(--gray-50);
    }

    .pagination {
        margin: 0;
        justify-content: center;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: var(--spacing-6);
    }

    .page-title {
        font-size: var(--font-size-2xl);
        font-weight: 700;
        color: var(--gray-900);
        margin: 0;
    }

    @media (max-width: 768px) {
        .search-form {
            flex-direction: column;
            align-items: stretch;
        }

        .search-input {
            max-width: none;
        }

        .page-header {
            flex-direction: column;
            align-items: flex-start;
            gap: var(--spacing-4);
        }

        .policies-header {
            flex-direction: column;
            align-items: flex-start;
            gap: var(--spacing-2);
        }
    }
</style>
{% endblock %}

{% block content %}
<div class="page-header">
    <h1 class="page-title">All Policies</h1>
    <div class="d-flex gap-2">
        <a href="{{ url_for('policies.add_policy') }}" class="btn btn-outline">Add Policy</a>
        <a href="{{ url_for('dashboard.index') }}" class="btn btn-primary">Back to Dashboard</a>
    </div>
</div>

<!-- Search -->
<div class="search-container">
    <form method="GET" class="search-form">
        <input type="text" name="search" class="form-control search-input" 
               placeholder="Search by member name, company, product, or policy number..." 
               value="{{ current_search }}">
        <button type="submit" class="btn btn-primary">Search</button>
        {% if current_search %}
        <a href="{{ url_for('dashboard.view_all_policies') }}" class="btn btn-outline">Clear</a>
        {% endif %}
    </form>
</div>

<!-- Policies Header -->
<div class="policies-header">
    <div class="policies-count">
        Showing {{ policies|length }} of {{ total_policies }} policies
        {% if current_search %}(filtered by "{{ current_search }}"){% endif %}
    </div>
    <div class="d-flex gap-2">
        <span class="text-muted">Page {{ page }} of {{ total_pages }}</span>
    </div>
</div>

<!-- Policies Table -->
<div class="table-container">
    {% if policies %}
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>Policy ID</th>
                    <th>Member Name</th>
                    <th>Insurance Company</th>
                    <th>Product</th>
                    <th>Policy Number</th>
                    <th>Policy From</th>
                    <th>Policy To</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for policy in policies %}
                <tr>
                    <td><strong>#{{ policy.policy_id }}</strong></td>
                    <td>
                        <div class="member-info">
                            <div class="member-name">{{ policy.member_name or 'Unknown' }}</div>
                            {% if policy.customer_phone %}
                            <div class="member-contact">{{ policy.customer_phone }}</div>
                            {% endif %}
                        </div>
                    </td>
                    <td>{{ policy.insurance_company }}</td>
                    <td>{{ policy.product_name }}</td>
                    <td>{{ policy.policy_number or 'N/A' }}</td>
                    <td>{{ policy.policy_from | indian_date if policy.policy_from else 'N/A' }}</td>
                    <td>{{ policy.policy_to | indian_date if policy.policy_to else 'N/A' }}</td>
                    <td>
                        {% set status_info = policy | policy_status %}
                        <span class="policy-badge {{ status_info.class }}">{{ status_info.label }}</span>
                    </td>
                    <td>
                        <a href="{{ url_for('policies.view_policy', policy_id=policy.policy_id) }}" 
                           class="btn btn-sm btn-outline">View</a>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    {% if total_pages > 1 %}
    <div class="pagination-container">
        <nav aria-label="Policies pagination">
            <ul class="pagination">
                {% if has_prev %}
                <li class="page-item">
                    <a class="page-link" href="{{ url_for('dashboard.view_all_policies', page=prev_page, search=current_search) }}">Previous</a>
                </li>
                {% endif %}

                {% for page_num in page_range %}
                <li class="page-item {% if page_num == page %}active{% endif %}">
                    <a class="page-link" href="{{ url_for('dashboard.view_all_policies', page=page_num, search=current_search) }}">{{ page_num }}</a>
                </li>
                {% endfor %}

                {% if has_next %}
                <li class="page-item">
                    <a class="page-link" href="{{ url_for('dashboard.view_all_policies', page=next_page, search=current_search) }}">Next</a>
                </li>
                {% endif %}
            </ul>
        </nav>
    </div>
    {% endif %}

    {% else %}
    <div class="empty-state">
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                  d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <h5>No policies found</h5>
        <p>{% if current_search %}No policies match your search criteria.{% else %}No policies have been added yet.{% endif %}</p>
        <a href="{{ url_for('policies.add_policy') }}" class="btn btn-primary mt-3">Add First Policy</a>
    </div>
    {% endif %}
</div>
{% endblock %}

{% block extra_js %}
<script src="{{ url_for('static', filename='js/performance.js') }}?v=2.0"></script>
{% endblock %}



================================================
FILE: templates/view_all_policies_backup.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View All Policies - Insta Insurances Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <style>
        .search-container {
            background: var(--white);
            border-radius: var(--radius-lg);
            padding: var(--spacing-6);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
            margin-bottom: var(--spacing-6);
        }

        .search-form {
            display: flex;
            gap: var(--spacing-3);
            align-items: center;
        }

        .search-input {
            flex: 1;
            max-width: 400px;
        }

        .policies-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--spacing-4);
        }

        .policies-count {
            color: var(--gray-600);
            font-size: var(--font-size-sm);
        }

        .table-container {
            background: var(--white);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--gray-200);
            overflow: hidden;
        }

        .table-responsive {
            overflow-x: auto;
        }

        .table {
            margin-bottom: 0;
            min-width: 1200px;
        }

        .table th {
            background: var(--gray-50);
            border-bottom: 2px solid var(--gray-200);
            font-weight: 600;
            color: var(--gray-900);
            padding: var(--spacing-4);
        }

        .table td {
            padding: var(--spacing-4);
            border-bottom: 1px solid var(--gray-100);
            vertical-align: middle;
        }

        .table tbody tr:hover {
            background: var(--gray-25);
        }

        /* Column widths */
        .table th:nth-child(1), .table td:nth-child(1) { width: 8%; }  /* Policy ID */
        .table th:nth-child(2), .table td:nth-child(2) { width: 18%; } /* Member Name */
        .table th:nth-child(3), .table td:nth-child(3) { width: 16%; } /* Insurance Company */
        .table th:nth-child(4), .table td:nth-child(4) { width: 14%; } /* Product */
        .table th:nth-child(5), .table td:nth-child(5) { width: 12%; } /* Policy Number */
        .table th:nth-child(6), .table td:nth-child(6) { width: 10%; } /* Policy From */
        .table th:nth-child(7), .table td:nth-child(7) { width: 10%; } /* Policy To */
        .table th:nth-child(8), .table td:nth-child(8) { width: 8%; }  /* Status */
        .table th:nth-child(9), .table td:nth-child(9) { width: 4%; }  /* Actions */

        .member-info {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-1);
        }

        .member-name {
            font-weight: 500;
            color: var(--gray-900);
        }

        .member-contact {
            font-size: var(--font-size-xs);
            color: var(--gray-500);
        }

        .policy-badge {
            display: inline-flex;
            align-items: center;
            gap: var(--spacing-1);
            padding: var(--spacing-1) var(--spacing-2);
            border-radius: var(--radius-sm);
            font-size: var(--font-size-xs);
            font-weight: 500;
        }

        .policy-badge.paid {
            background: var(--success-light);
            color: #065f46;
        }

        .policy-badge.pending {
            background: var(--warning-light);
            color: #92400e;
        }

        .pagination-container {
            padding: var(--spacing-4);
            background: var(--gray-50);
            border-top: 1px solid var(--gray-200);
        }

        .pagination {
            margin: 0;
            justify-content: center;
        }

        .pagination .page-link {
            border: 1px solid var(--gray-300);
            color: var(--gray-700);
            padding: var(--spacing-2) var(--spacing-3);
        }

        .pagination .page-item.active .page-link {
            background: var(--primary-blue);
            border-color: var(--primary-blue);
            color: white;
        }

        .pagination .page-link:hover {
            background: var(--gray-100);
            border-color: var(--gray-400);
        }

        .pagination-info {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: var(--spacing-3);
            font-size: var(--font-size-sm);
            color: var(--gray-600);
        }

        .empty-state {
            text-align: center;
            padding: var(--spacing-12) var(--spacing-6);
            color: var(--gray-500);
        }

        .empty-state svg {
            width: 64px;
            height: 64px;
            margin-bottom: var(--spacing-4);
            color: var(--gray-300);
        }

        .empty-state h5 {
            color: var(--gray-700);
            margin-bottom: var(--spacing-2);
        }

        @media (max-width: 768px) {
            .search-form {
                flex-direction: column;
                align-items: stretch;
            }

            .search-input {
                max-width: none;
            }

            .policies-header {
                flex-direction: column;
                align-items: flex-start;
                gap: var(--spacing-3);
            }

            .table th, .table td {
                padding: var(--spacing-2);
                font-size: var(--font-size-sm);
            }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <div class="d-flex gap-2">
                <a href="{{ url_for('dashboard.index') }}" class="btn btn-outline">Dashboard</a>
                <a href="{{ url_for('pending_policies.list_pending') }}" class="btn btn-outline">Pending Policies</a>
                <a href="{{ url_for('existing_policies.list_all') }}" class="btn btn-outline">All Clients</a>
                <a href="{{ url_for('claims.index') }}" class="btn btn-outline">Claims</a>
                <a href="{{ url_for('policies.add_policy') }}" class="btn btn-outline">Add Policy</a>
                <a href="{{ url_for('pending_policies.add_pending') }}" class="btn btn-primary">Add Pending</a>
                <a href="{{ url_for('auth.logout') }}" class="btn btn-outline">Logout</a>
            </div>
        </div>
    </nav>

    <div class="page-container">
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="page-title">View All Policies</h1>
            <a href="{{ url_for('policies.add_policy') }}" class="btn btn-primary">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                </svg>
                Add New Policy
            </a>
        </div>

        <!-- Search Container -->
        <div class="search-container">
            <form method="GET" class="search-form">
                <div class="search-input">
                    <input type="text" 
                           name="search" 
                           class="form-control" 
                           placeholder="Search by member name, insurance company, product, or policy number..." 
                           value="{{ current_search }}"
                           autocomplete="off">
                </div>
                <button type="submit" class="btn btn-primary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                        <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                    </svg>
                    Search
                </button>
                {% if current_search %}
                <a href="{{ url_for('dashboard.view_all_policies') }}" class="btn btn-outline">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                    </svg>
                    Clear
                </a>
                {% endif %}
            </form>
        </div>

        <!-- Policies Table -->
        <div class="table-container">
            <div class="policies-header p-4 border-bottom">
                <div class="policies-count">
                    {% if current_search %}
                        Showing {{ policies|length }} of {{ total_policies }} policies matching "{{ current_search }}"
                    {% else %}
                        Showing {{ policies|length }} of {{ total_policies }} total policies
                    {% endif %}
                    {% if total_pages > 1 %}
                        (Page {{ page }} of {{ total_pages }})
                    {% endif %}
                </div>
            </div>

            {% if policies %}
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Policy ID</th>
                            <th>Member Name</th>
                            <th>Insurance Company</th>
                            <th>Product</th>
                            <th>Policy Number</th>
                            <th>Policy From</th>
                            <th>Policy To</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for policy in policies %}
                        <tr>
                            <td><strong>#{{ policy.policy_id }}</strong></td>
                            <td>
                                <div class="member-info">
                                    <div class="member-name">{{ policy.member_name }}</div>
                                    {% if policy.customer_phone %}
                                    <div class="member-contact">{{ policy.customer_phone }}</div>
                                    {% endif %}
                                </div>
                            </td>
                            <td>{{ policy.insurance_company or 'N/A' }}</td>
                            <td>{{ policy.product_name or 'N/A' }}</td>
                            <td>{{ policy.policy_number or 'N/A' }}</td>
                            <td>
                                {% if policy.policy_from %}
                                    {{ policy.policy_from | indian_date }}
                                {% else %}
                                    <span class="text-muted">N/A</span>
                                {% endif %}
                            </td>
                            <td>
                                {% if policy.policy_to %}
                                    {{ policy.policy_to | indian_date }}
                                {% else %}
                                    <span class="text-muted">N/A</span>
                                {% endif %}
                            </td>
                            <td>
                                {% if policy.payment_date %}
                                    <span class="policy-badge paid">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                                        </svg>
                                        Paid
                                    </span>
                                {% else %}
                                    <span class="policy-badge pending">
                                        <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                                        </svg>
                                        Pending
                                    </span>
                                {% endif %}
                            </td>
                            <td>
                                <a href="{{ url_for('existing_policies.view_policy', policy_id=policy.policy_id) }}" 
                                   class="btn btn-sm btn-outline" 
                                   title="View Policy Details">
                                    <svg width="14" height="14" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                                    </svg>
                                </a>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            {% if total_pages > 1 %}
            <div class="pagination-container">
                <div class="pagination-info">
                    <div>
                        Showing {{ ((page - 1) * per_page + 1) }} to {{ (page * per_page) if (page * per_page) <= total_policies else total_policies }} of {{ total_policies }} policies
                    </div>
                </div>
                <nav aria-label="Policies pagination">
                    <ul class="pagination">
                        {% if has_prev %}
                        <li class="page-item">
                            <a class="page-link" href="{{ url_for('dashboard.view_all_policies', page=prev_page, search=current_search) }}">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
                                </svg>
                                Previous
                            </a>
                        </li>
                        {% endif %}

                        {% for page_num in page_range %}
                        <li class="page-item {% if page_num == page %}active{% endif %}">
                            <a class="page-link" href="{{ url_for('dashboard.view_all_policies', page=page_num, search=current_search) }}">
                                {{ page_num }}
                            </a>
                        </li>
                        {% endfor %}

                        {% if has_next %}
                        <li class="page-item">
                            <a class="page-link" href="{{ url_for('dashboard.view_all_policies', page=next_page, search=current_search) }}">
                                Next
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
                                </svg>
                            </a>
                        </li>
                        {% endif %}
                    </ul>
                </nav>
            </div>
            {% endif %}

            {% else %}
            <div class="empty-state">
                {% if current_search %}
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                <h5>No policies found</h5>
                <p>No policies match your search criteria "{{ current_search }}"</p>
                <a href="{{ url_for('dashboard.view_all_policies') }}" class="btn btn-outline mt-3">Clear Search</a>
                {% else %}
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <h5>No policies found</h5>
                <p>There are no policies in the system yet.</p>
                <a href="{{ url_for('policies.add_policy') }}" class="btn btn-primary mt-3">Add First Policy</a>
                {% endif %}
            </div>
            {% endif %}
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/performance.js') }}?v=2.0"></script>
</body>
</html>



================================================
FILE: templates/view_claim.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Claim #{{ claim.claim_id }} - Insta Insurance Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        .detail-row {
            display: flex;
            justify-content: space-between;
            padding: 12px 0;
            border-bottom: 1px solid #f1f5f9;
        }
        .detail-row:last-child {
            border-bottom: none;
        }
        .detail-label {
            font-weight: 500;
            color: #718096;
            font-size: 15px;
        }
        .detail-value {
            color: #1a202c;
            font-size: 15px;
            font-weight: 500;
        }
        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        .status-PENDING { background-color: var(--warning-light); color: #92400e; }
        .status-PROCESSING { background-color: var(--info-light); color: #1e40af; }
        .status-APPROVED { background-color: #cce5ff; color: #004085; }
        .status-SETTLED { background-color: var(--success-light); color: #065f46; }
        .status-REJECTED { background-color: var(--danger-light); color: #991b1b; }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <a href="{{ url_for('claims.index') }}" class="btn btn-outline">Back to Claims</a>
        </div>
    </nav>

    <div class="detail-container">
        <div class="content-header">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1>Claim Details <span class="text-muted">{{ claim.claim_number or ('#' + claim.claim_id|string) }}</span></h1>
                    <span class="status-badge status-{{ claim.status }}">{{ claim.status }}</span>
                </div>
            </div>
        </div>

        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                <div class="alert alert-{{ 'danger' if category == 'error' else category }} alert-dismissible fade show" role="alert">
                    {% if 'Claim Number:' in message %}
                        <strong><i class="fas fa-check-circle"></i> {{ message.split('Claim Number:')[0] }}</strong>
                        <br><span class="fs-5 fw-bold text-primary">Claim Number: {{ message.split('Claim Number:')[1] }}</span>
                    {% else %}
                        {{ message }}
                    {% endif %}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <div class="row">
            <!-- Left Column: Claim Details -->
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Claim Information</h5>
                        <div class="detail-row"><span class="detail-label">Client Name</span> <span class="detail-value">{{ claim.policies.clients.name }}</span></div>
                        <div class="detail-row"><span class="detail-label">Member Name</span> <span class="detail-value">{{ claim.member_name }}</span></div>
                        <div class="detail-row"><span class="detail-label">Policy Number</span> <span class="detail-value">{{ claim.policies.policy_number }}</span></div>
                        <div class="detail-row"><span class="detail-label">Claim Number</span> <span class="detail-value">{{ claim.claim_number or 'Not set' }}</span></div>
                        <div class="detail-row"><span class="detail-label">Claim Type</span> <span class="detail-value">{{ claim.claim_type }}</span></div>
                        <div class="detail-row"><span class="detail-label">Diagnosis</span> <span class="detail-value">{{ claim.diagnosis or '-' }}</span></div>
                        <div class="detail-row"><span class="detail-label">Hospital Name</span> <span class="detail-value">{{ claim.hospital_name or '-' }}</span></div>
                        <div class="detail-row"><span class="detail-label">Admission Date</span> <span class="detail-value">{{ claim.admission_date | indian_date if claim.admission_date else '-' }}</span></div>
                        <div class="detail-row"><span class="detail-label">Discharge Date</span> <span class="detail-value">{{ claim.discharge_date | indian_date if claim.discharge_date else '-' }}</span></div>
                        <div class="detail-row"><span class="detail-label">Claimed Amount</span> <span class="detail-value">₹{{ "{:,.2f}".format(claim.claimed_amount) if claim.claimed_amount else '-' }}</span></div>
                        <div class="detail-row"><span class="detail-label">Approved Amount</span> <span class="detail-value">₹{{ "{:,.2f}".format(claim.approved_amount or claim.settled_amount) if (claim.approved_amount or claim.settled_amount) else '-' }}</span></div>
                        <div class="detail-row"><span class="detail-label">Remarks</span> <span class="detail-value">{{ claim.remarks or '-' }}</span></div>
                    </div>
                </div>

                {% if claim.status == 'SETTLED' %}
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Settlement Information</h5>
                        <div class="detail-row"><span class="detail-label">Settled Amount</span> <span class="detail-value">₹{{ "{:,.2f}".format(claim.settled_amount) if claim.settled_amount else '-' }}</span></div>
                        <div class="detail-row"><span class="detail-label">Settlement Date</span> <span class="detail-value">{{ claim.settlement_date | indian_date if claim.settlement_date else '-' }}</span></div>
                        <div class="detail-row"><span class="detail-label">UTR No.</span> <span class="detail-value">{{ claim.utr_no or '-' }}</span></div>
                    </div>
                </div>
                {% endif %}

                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Claim Documents</h5>
                        <ul class="list-group list-group-flush">
                            {% for doc in documents %}
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>{{ doc.document_name }} <small class="text-muted">({{ doc.document_type }})</small></span>
                                <a href="{{ doc.drive_url }}" target="_blank" class="btn btn-sm btn-outline-primary">View</a>
                            </li>
                            {% else %}
                            <li class="list-group-item text-muted">No documents have been uploaded for this claim.</li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Right Column: Update Forms -->
            <div class="col-lg-4">
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Update Status</h5>
                        <form method="POST" action="{{ url_for('claims.update_claim_status', claim_id=claim.claim_id) }}">
                            <div class="mb-3">
                                <label for="claim_number_update" class="form-label">Claim Number</label>
                                <input type="text" id="claim_number_update" name="claim_number" class="form-control" value="{{ claim.claim_number or '' }}" placeholder="Enter claim number from insurance company">
                                <div class="form-text">Update if claim number was provided by insurance company.</div>
                            </div>
                            <div class="mb-3">
                                <label for="status" class="form-label">New Status</label>
                                <select id="status" name="status" class="form-select" onchange="toggleStatusFields()">
                                    <option value="PENDING" {% if claim.status == 'PENDING' %}selected{% endif %}>Pending</option>
                                    <option value="PROCESSING" {% if claim.status == 'PROCESSING' %}selected{% endif %}>Processing</option>
                                    <option value="APPROVED" {% if claim.status == 'APPROVED' %}selected{% endif %}>Approved</option>
                                    <option value="REJECTED" {% if claim.status == 'REJECTED' %}selected{% endif %}>Rejected</option>
                                    <option value="SETTLED" {% if claim.status == 'SETTLED' %}selected{% endif %}>Settled</option>
                                </select>
                            </div>

                            <div id="approvedFields" style="display:{{ 'block' if claim.status == 'APPROVED' else 'none' }};">
                                <div class="mb-3">
                                    <label for="approved_amount" class="form-label">Approved Amount</label>
                                    <input type="number" step="0.01" id="approved_amount" name="approved_amount" class="form-control" value="{{ claim.approved_amount or '' }}">
                                </div>
                            </div>

                            <div id="settlementFields" style="display:{{ 'block' if claim.status == 'SETTLED' else 'none' }};">
                                <div class="mb-3">
                                    <label for="settled_amount" class="form-label">Settled Amount</label>
                                    <input type="number" step="0.01" id="settled_amount" name="settled_amount" class="form-control" value="{{ claim.settled_amount or '' }}">
                                </div>
                                <div class="mb-3">
                                    <label for="settlement_date" class="form-label">Settlement Date</label>
                                    <input type="text" id="settlement_date" name="settlement_date" class="form-control date-picker" value="{{ claim.settlement_date | indian_date if claim.settlement_date else '' }}">
                                </div>
                                <div class="mb-3">
                                    <label for="utr_no" class="form-label">UTR No.</label>
                                    <input type="text" id="utr_no" name="utr_no" class="form-control" value="{{ claim.utr_no or '' }}">
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="remarks" class="form-label">Remarks (Optional)</label>
                                <textarea name="remarks" class="form-control" rows="3">{{ claim.remarks or '' }}</textarea>
                            </div>
                            
                            <button type="submit" class="btn btn-primary w-100">Update Status</button>
                        </form>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Upload Additional Document</h5>
                        <form method="POST" action="{{ url_for('claims.upload_document', claim_id=claim.claim_id) }}" enctype="multipart/form-data" id="uploadDocForm">
                            <div class="mb-3">
                                <label for="document_type" class="form-label">Document Type</label>
                                <div class="input-group">
                                    <select name="document_type" id="document_type" class="form-select">
                                        <option value="MEDICAL_BILL">Medical Bill</option>
                                        <option value="DISCHARGE_SUMMARY">Discharge Summary</option>
                                        <option value="PRESCRIPTION">Prescription</option>
                                        <option value="LAB_REPORT">Lab Report</option>
                                        <option value="OTHER">Other (Custom)</option>
                                    </select>
                                    <button class="btn btn-outline-secondary" type="button" onclick="toggleCustomDocType()" title="Add Custom Type">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>
                                    </button>
                                </div>
                                <input type="text" id="custom_document_type" name="custom_document_type" class="form-control mt-2" placeholder="Enter custom document type" style="display:none;">
                            </div>
                            <div class="mb-3">
                                <label for="document" class="form-label">File</label>
                                <input type="file" name="document" class="form-control" required>
                            </div>
                            <button type="submit" class="btn btn-secondary w-100">Upload Document</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            flatpickr('.date-picker', {
                dateFormat: 'd/m/Y',
                allowInput: true,  // Allow manual typing
                clickOpens: true,  // Still allow clicking to open calendar
                altInput: false,   // Don't use alternative input
                parseDate: function(datestr, format) {
                    // Custom date parsing for DD/MM/YYYY format
                    if (datestr.match(/^\d{1,2}\/\d{1,2}\/\d{4}$/)) {
                        const parts = datestr.split('/');
                        return new Date(parts[2], parts[1] - 1, parts[0]);
                    }
                    return null;
                }
            });
        });

        function toggleStatusFields() {
            const status = document.getElementById('status').value;
            const approvedFields = document.getElementById('approvedFields');
            const settlementFields = document.getElementById('settlementFields');
            
            // Hide all fields first
            approvedFields.style.display = 'none';
            settlementFields.style.display = 'none';
            
            // Show relevant fields based on status
            if (status === 'APPROVED') {
                approvedFields.style.display = 'block';
            } else if (status === 'SETTLED') {
                settlementFields.style.display = 'block';
            }
        }

        function toggleCustomDocType() {
            const select = document.getElementById('document_type');
            const customInput = document.getElementById('custom_document_type');
            
            if (customInput.style.display === 'none') {
                customInput.style.display = 'block';
                customInput.focus();
                select.value = 'OTHER';
            } else {
                customInput.style.display = 'none';
                customInput.value = '';
                select.value = 'MEDICAL_BILL';
            }
        }

        // Handle document type selection
        document.getElementById('document_type').addEventListener('change', function() {
            const customInput = document.getElementById('custom_document_type');
            if (this.value === 'OTHER') {
                customInput.style.display = 'block';
                customInput.required = true;
            } else {
                customInput.style.display = 'none';
                customInput.required = false;
                customInput.value = '';
            }
        });
    </script>
</body>
</html>


================================================
FILE: templates/view_policy.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Policy Details - {{ config.PORTAL_TITLE }}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="{{ url_for('static', filename='styles.css') }}?v=2.0" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
        }
        .navbar {
            background: white !important;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 16px 0;
        }
        .navbar-brand {
            color: #1a202c !important;
            font-weight: 600;
            font-size: 20px;
        }
        .btn-outline {
            background: white;
            border: 1px solid #e2e8f0;
            color: #4a5568;
            padding: 10px 24px;
            font-weight: 500;
            border-radius: 8px;
        }
        .detail-container {
            max-width: 900px;
            margin: 40px auto;
        }
        .detail-card {
            background: white;
            border-radius: 12px;
            padding: 40px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            margin-bottom: 24px;
        }
        .detail-card h4 {
            font-size: 24px;
            font-weight: 600;
            color: #1a202c;
            margin-bottom: 24px;
        }
        .detail-card h5 {
            font-size: 18px;
            font-weight: 600;
            color: #1a202c;
            margin-bottom: 16px;
            padding-bottom: 8px;
            border-bottom: 2px solid #e2e8f0;
        }
        .detail-row {
            display: flex;
            justify-content: space-between;
            padding: 12px 0;
            border-bottom: 1px solid #f1f5f9;
        }
        .detail-row:last-child {
            border-bottom: none;
        }
        .detail-label {
            font-weight: 500;
            color: #718096;
            font-size: 15px;
        }
        .detail-value {
            color: #1a202c;
            font-size: 15px;
            font-weight: 500;
        }
        .badge-active {
            background: #d1fae5;
            color: #065f46;
            padding: 8px 16px;
            border-radius: 6px;
            font-weight: 500;
            font-size: 14px;
        }
        .btn-danger {
            background: #ef4444;
            border: none;
        }
        .btn-danger:hover {
            background: #dc2626;
        }
        .btn-whatsapp {
            background: #25D366;
            border: none;
            color: white;
            padding: 8px 16px;
            font-size: 13px;
            border-radius: 6px;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }
        .btn-whatsapp:hover {
            background: #128C7E;
            color: white;
        }
        .btn-email {
            background: #ea4335;
            border: none;
            color: white;
            padding: 8px 16px;
            font-size: 13px;
            border-radius: 6px;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }
        .btn-email:hover {
            background: #d33b2c;
            color: white;
        }
        .whatsapp-icon, .email-icon {
            width: 16px;
            height: 16px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid px-4">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <img src="{{ url_for('static', filename=config.LOGO_PATH) }}" alt="{{ config.COMPANY_NAME }}" class="me-2">
                {{ config.PORTAL_NAME }}
            </a>
            <a href="{{ url_for('existing_policies.list_all') }}" class="btn btn-outline">Back to All Clients</a>
        </div>
    </nav>

    <div class="detail-container">
        <div class="detail-card">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4>Policy Details</h4>
                <span class="badge-active">Active Policy</span>
            </div>

            <h5>Policy Information</h5>
            <div class="detail-row">
                <span class="detail-label">Policy ID:</span>
                <span class="detail-value">#{{ policy.policy_id }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Insurance Company:</span>
                <span class="detail-value">{{ policy.insurance_company }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Product:</span>
                <span class="detail-value">{{ policy.product_name }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Policy Number:</span>
                <span class="detail-value">{{ policy.policy_number or 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Agent:</span>
                <span class="detail-value">{{ policy.agent_name or 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Policy From:</span>
                <span class="detail-value">{{ policy.policy_from | indian_date }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Policy To (Expiry):</span>
                <span class="detail-value">{{ policy.policy_to | indian_date }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Payment Date:</span>
                <span class="detail-value">{{ policy.payment_date | indian_date }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">One-time Insurance:</span>
                <span class="detail-value">{{ 'Yes' if policy.one_time_insurance else 'No' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Payment Details:</span>
                <span class="detail-value">{{ policy.payment_details or 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Net Premium/OD:</span>
                <span class="detail-value">{{ policy.net_premium | currency }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Addon Premium:</span>
                <span class="detail-value">{{ policy.addon_premium | currency }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">TP/TR Premium:</span>
                <span class="detail-value">{{ policy.tp_tr_premium | currency }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">GST %:</span>
                <span class="detail-value">{% if policy.gst_percentage %}{{ policy.gst_percentage }}%{% else %}N/A{% endif %}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Gross Premium:</span>
                <span class="detail-value">{{ policy.gross_premium | currency }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Commission %:</span>
                <span class="detail-value">{% if policy.commission_percentage %}{{ policy.commission_percentage }}%{% else %}N/A{% endif %}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Commission Amount:</span>
                <span class="detail-value">{{ policy.commission_amount | currency }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Commission Received:</span>
                <span class="detail-value">{{ 'Yes' if policy.commission_received else 'No' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Business Type:</span>
                <span class="detail-value">{{ policy.business_type or 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Group:</span>
                <span class="detail-value">{{ policy.group_name or 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Subgroup:</span>
                <span class="detail-value">{{ policy.subgroup_name or 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Sum Insured:</span>
                <span class="detail-value">{{ policy.sum_insured | currency }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Remarks:</span>
                <span class="detail-value">{{ policy.remarks or 'N/A' }}</span>
            </div>

            <h5 class="mt-4">Timeline Information</h5>
            <div class="detail-row">
                <span class="detail-label">Created At:</span>
                <span class="detail-value">{{ policy.created_at | indian_date if policy.created_at else 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Last Updated:</span>
                <span class="detail-value">{{ policy.updated_at | indian_date if policy.updated_at else 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Last Renewed:</span>
                <span class="detail-value">{{ policy.renewed_at | indian_date if policy.renewed_at else 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Last Reminder Sent:</span>
                <span class="detail-value">{{ policy.last_reminder_sent | indian_date if policy.last_reminder_sent else 'Never' }}</span>
            </div>

            <h5 class="mt-4">Customer Information</h5>
            <div class="detail-row">
                <span class="detail-label">Client Name:</span>
                <span class="detail-value">{{ policy.customer_name }}</span>
            </div>
            {% if policy.member_name %}
            <div class="detail-row">
                <span class="detail-label">Member:</span>
                <span class="detail-value">{{ policy.member_name }}</span>
            </div>
            {% endif %}
            <div class="detail-row">
                <span class="detail-label">📧 Email:</span>
                <span class="detail-value">{{ policy.customer_email or 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Phone:</span>
                <span class="detail-value">{{ policy.customer_phone or 'N/A' }}</span>
            </div>

            <h5 class="mt-4">Document Information</h5>
            <div class="detail-row">
                <span class="detail-label">File Name:</span>
                <span class="detail-value">{{ policy.file_path or 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Drive Path:</span>
                <span class="detail-value">{{ policy.drive_path or 'N/A' }}</span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Drive File ID:</span>
                <span class="detail-value">{{ policy.drive_file_id or 'N/A' }}</span>
            </div>
            {% if policy.drive_url %}
            <div class="detail-row">
                <span class="detail-label">Document:</span>
                <span class="detail-value">
                    <a href="{{ policy.drive_url }}" target="_blank" class="btn btn-sm btn-primary">View on Google Drive</a>
                </span>
            </div>
            {% endif %}

            <div class="mt-4 d-flex gap-2">
                <a href="{{ url_for('existing_policies.list_all') }}" class="btn btn-outline">Back to Clients</a>
                {% if policy.customer_phone %}
                <button class="btn btn-whatsapp send-whatsapp-btn" data-policy-id="{{ policy.policy_id }}">
                    <svg class="whatsapp-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
                    </svg>
                    <svg class="email-icon" viewBox="0 0 24 24" fill="currentColor" style="margin-left: 4px;">
                        <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
                    </svg>
                    Send via WhatsApp & Email
                </button>
                {% endif %}
                {% if policy.customer_email %}
                <button class="btn btn-email send-email-btn" data-policy-id="{{ policy.policy_id }}">
                    <svg class="email-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
                    </svg>
                    Send via Email Only
                </button>
                {% endif %}
                <a href="{{ url_for('renewal.renewal_page', policy_id=policy.policy_id) }}" class="btn btn-success">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="me-1">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    Renew Policy
                </a>
                <form action="{{ url_for('existing_policies.delete_policy', policy_id=policy.policy_id) }}" method="POST" style="display: inline;">
                    <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this policy? This action cannot be undone.')">
                        Delete Policy
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        async function sendPolicyWhatsApp(policyId) {
            const button = event.target.closest('button');
            const originalText = button.innerHTML;
            
            // Disable button and show loading
            button.disabled = true;
            button.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Sending...';
            
            try {
                const response = await fetch('/api/send_policy_whatsapp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ policy_id: policyId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Policy sent successfully!\n\n' + result.message);
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to send policy. Please try again.');
            } finally {
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }
        
        async function sendPolicyEmail(policyId) {
            const button = event.target.closest('button');
            const originalText = button.innerHTML;
            
            // Disable button and show loading
            button.disabled = true;
            button.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Sending...';
            
            try {
                const response = await fetch('/api/send_policy_email', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ policy_id: policyId })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Policy sent successfully via email!\n\n' + result.message);
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to send policy. Please try again.');
            } finally {
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }
        
        // Event delegation for send buttons
        document.addEventListener('click', function(e) {
            if (e.target.closest('.send-whatsapp-btn')) {
                const btn = e.target.closest('.send-whatsapp-btn');
                const policyId = btn.dataset.policyId;
                sendPolicyWhatsApp(policyId);
            }
            
            if (e.target.closest('.send-email-btn')) {
                const btn = e.target.closest('.send-email-btn');
                const policyId = btn.dataset.policyId;
                sendPolicyEmail(policyId);
            }
        });
    </script>
</body>
</html>


================================================
FILE: templates/whatsapp_logs.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Message Logs - Insurance Portal</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}?v=2.0">
    <link rel="icon" type="image/x-icon" href="{{ url_for('static', filename=config.LOGO_PATH) }}?v=2.0">
    <style>
        .logs-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #2563eb;
        }
        
        .stat-label {
            color: #6b7280;
            margin-top: 5px;
        }
        
        .filters-section {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .filters-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            align-items: end;
        }
        
        .filter-group {
            display: flex;
            flex-direction: column;
        }
        
        .filter-group label {
            margin-bottom: 5px;
            font-weight: 500;
            color: #374151;
        }
        
        .filter-group input,
        .filter-group select {
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .logs-table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .logs-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .logs-table th {
            background: #f9fafb;
            padding: 12px;
            text-align: left;
            font-weight: 600;
            color: #374151;
            border-bottom: 1px solid #e5e7eb;
        }
        
        .logs-table td {
            padding: 12px;
            border-bottom: 1px solid #f3f4f6;
            vertical-align: top;
        }
        
        .logs-table tr:hover {
            background: #f9fafb;
        }
        
        .status-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            text-transform: uppercase;
        }
        
        .status-queued { background: #fef3c7; color: #92400e; }
        .status-sending { background: #dbeafe; color: #1e40af; }
        .status-sent { background: #d1fae5; color: #065f46; }
        .status-delivered { background: #dcfce7; color: #166534; }
        .status-read { background: #f0f9ff; color: #0c4a6e; }
        .status-failed { background: #fee2e2; color: #991b1b; }
        .status-undelivered { background: #fef2f2; color: #b91c1c; }
        
        .message-type-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: 500;
            text-transform: uppercase;
        }
        
        .type-policy_document { background: #e0f2fe; color: #01579b; }
        .type-renewal_reminder { background: #fff3e0; color: #e65100; }
        .type-general { background: #f3e5f5; color: #4a148c; }
        
        .message-content {
            max-width: 300px;
            word-wrap: break-word;
            font-size: 13px;
            color: #6b7280;
        }
        
        .phone-number {
            font-family: monospace;
            font-weight: 500;
        }
        
        .timestamp {
            font-size: 12px;
            color: #6b7280;
        }
        
        .error-message {
            color: #dc2626;
            font-size: 12px;
            font-style: italic;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin-top: 20px;
            padding: 20px;
        }
        
        .pagination button {
            padding: 8px 16px;
            border: 1px solid #d1d5db;
            background: white;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .pagination button:hover:not(:disabled) {
            background: #f9fafb;
        }
        
        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .refresh-btn {
            background: #10b981;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
        }
        
        .refresh-btn:hover {
            background: #059669;
        }
        
        .refresh-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .actions-section {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            align-items: center;
        }
        
        .loading {
            display: none;
            color: #6b7280;
            font-style: italic;
        }
        
        .message-details {
            cursor: pointer;
            color: #2563eb;
            text-decoration: underline;
        }
        
        .message-details:hover {
            color: #1d4ed8;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: black;
        }
    </style>
</head>
<body>
    <div class="logs-container">
        <h1>WhatsApp Message Logs</h1>
        
        <!-- Statistics Section -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number">{{ summary.total_messages or 0 }}</div>
                <div class="stat-label">Total Messages</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{{ summary.status_counts.delivered or 0 }}</div>
                <div class="stat-label">Delivered</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{{ summary.status_counts.read or 0 }}</div>
                <div class="stat-label">Read</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{{ summary.success_rate or 0 }}%</div>
                <div class="stat-label">Success Rate</div>
            </div>
        </div>
        
        <!-- Actions Section -->
        <div class="actions-section">
            <button class="refresh-btn" onclick="refreshAllStatuses()">
                Refresh All Statuses
            </button>
            <button class="refresh-btn" onclick="previewCleanup()" style="background: #f59e0b;">
                Preview File Cleanup
            </button>
            <button class="refresh-btn" onclick="runCleanup()" style="background: #dc2626;">
                Clean Up Files
            </button>
            <button class="refresh-btn" id="realtimeToggle" onclick="toggleRealtimeService()" style="background: #059669;">
                Start Real-time Cleanup
            </button>
            <div class="loading" id="refreshLoading">Refreshing statuses...</div>
            <div class="loading" id="cleanupLoading">Processing cleanup...</div>
            <div class="loading" id="realtimeLoading">Managing service...</div>
        </div>
        
        <!-- Filters Section -->
        <div class="filters-section">
            <form method="GET" id="filtersForm">
                <div class="filters-grid">
                    <div class="filter-group">
                        <label for="status_filter">Status</label>
                        <select name="status_filter" id="status_filter">
                            <option value="all" {{ 'selected' if request.args.get('status_filter') == 'all' else '' }}>All Statuses</option>
                            <option value="queued" {{ 'selected' if request.args.get('status_filter') == 'queued' else '' }}>Queued</option>
                            <option value="sending" {{ 'selected' if request.args.get('status_filter') == 'sending' else '' }}>Sending</option>
                            <option value="sent" {{ 'selected' if request.args.get('status_filter') == 'sent' else '' }}>Sent</option>
                            <option value="delivered" {{ 'selected' if request.args.get('status_filter') == 'delivered' else '' }}>Delivered</option>
                            <option value="read" {{ 'selected' if request.args.get('status_filter') == 'read' else '' }}>Read</option>
                            <option value="failed" {{ 'selected' if request.args.get('status_filter') == 'failed' else '' }}>Failed</option>
                            <option value="undelivered" {{ 'selected' if request.args.get('status_filter') == 'undelivered' else '' }}>Undelivered</option>
                        </select>
                    </div>
                    
                    <div class="filter-group">
                        <label for="message_type_filter">Message Type</label>
                        <select name="message_type_filter" id="message_type_filter">
                            <option value="all" {{ 'selected' if request.args.get('message_type_filter') == 'all' else '' }}>All Types</option>
                            <option value="policy_document" {{ 'selected' if request.args.get('message_type_filter') == 'policy_document' else '' }}>Policy Document</option>
                            <option value="renewal_reminder" {{ 'selected' if request.args.get('message_type_filter') == 'renewal_reminder' else '' }}>Renewal Reminder</option>
                            <option value="general" {{ 'selected' if request.args.get('message_type_filter') == 'general' else '' }}>General</option>
                        </select>
                    </div>
                    
                    <div class="filter-group">
                        <label for="phone_filter">Phone Number</label>
                        <input type="text" name="phone_filter" id="phone_filter" value="{{ request.args.get('phone_filter', '') }}" placeholder="Search phone...">
                    </div>
                    
                    <div class="filter-group">
                        <label for="date_from">From Date</label>
                        <input type="date" name="date_from" id="date_from" value="{{ request.args.get('date_from', '') }}">
                    </div>
                    
                    <div class="filter-group">
                        <label for="date_to">To Date</label>
                        <input type="date" name="date_to" id="date_to" value="{{ request.args.get('date_to', '') }}">
                    </div>
                    
                    <div class="filter-group">
                        <button type="submit" class="refresh-btn">Apply Filters</button>
                    </div>
                </div>
            </form>
        </div>
        
        <!-- Logs Table -->
        <div class="logs-table-container">
            <table class="logs-table">
                <thead>
                    <tr>
                        <th>Sent At</th>
                        <th>Phone</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Customer</th>
                        <th>Policy</th>
                        <th>Message</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for log in logs %}
                    <tr>
                        <td>
                            <div class="timestamp">{{ log.sent_at | format_datetime }}</div>
                            {% if log.delivered_at %}
                                <div class="timestamp">Delivered: {{ log.delivered_at | format_datetime }}</div>
                            {% endif %}
                            {% if log.read_at %}
                                <div class="timestamp">Read: {{ log.read_at | format_datetime }}</div>
                            {% endif %}
                        </td>
                        <td>
                            <div class="phone-number">{{ log.phone_number }}</div>
                        </td>
                        <td>
                            <span class="message-type-badge type-{{ log.message_type }}">
                                {{ log.message_type.replace('_', ' ').title() }}
                            </span>
                        </td>
                        <td>
                            <span class="status-badge status-{{ log.status }}">
                                {{ log.status }}
                            </span>
                            {% if log.error_message %}
                                <div class="error-message">{{ log.error_message }}</div>
                            {% endif %}
                        </td>
                        <td>
                            {% if log.clients %}
                                <div>{{ log.clients.name }}</div>
                                {% if log.clients.email %}
                                    <div class="timestamp">{{ log.clients.email }}</div>
                                {% endif %}
                            {% else %}
                                <span class="timestamp">-</span>
                            {% endif %}
                        </td>
                        <td>
                            {% if log.policies %}
                                <div>{{ log.policies.policy_number }}</div>
                                <div class="timestamp">{{ log.policies.product_name }}</div>
                                <div class="timestamp">{{ log.policies.insurance_company }}</div>
                            {% else %}
                                <span class="timestamp">-</span>
                            {% endif %}
                        </td>
                        <td>
                            <div class="message-content">
                                {{ (log.message_content[:100] + '...') if log.message_content and log.message_content|length > 100 else (log.message_content or '-') }}
                            </div>
                        </td>
                        <td>
                            <button class="message-details" onclick="showMessageDetails('{{ log.message_sid }}')">
                                View Details
                            </button>
                            <br>
                            <button class="message-details" onclick="refreshSingleStatus('{{ log.message_sid }}')">
                                Refresh Status
                            </button>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="8" style="text-align: center; padding: 40px; color: #6b7280;">
                            No WhatsApp logs found. Messages will appear here once you start sending WhatsApp messages.
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        {% if logs %}
        <div class="pagination">
            <button onclick="changePage({{ page - 1 }})" {% if not has_prev %}disabled{% endif %}>
                Previous
            </button>
            <span>Page {{ page }} of {{ total_pages }}</span>
            <button onclick="changePage({{ page + 1 }})" {% if not has_next %}disabled{% endif %}>
                Next
            </button>
        </div>
        {% endif %}
    </div>
    
    <!-- Message Details Modal -->
    <div id="messageModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Message Details</h2>
            <div id="messageDetails">Loading...</div>
        </div>
    </div>
    
    <script>
        function changePage(page) {
            const url = new URL(window.location);
            url.searchParams.set('page', page);
            window.location.href = url.toString();
        }
        
        function refreshAllStatuses() {
            const btn = document.querySelector('.refresh-btn');
            const loading = document.getElementById('refreshLoading');
            
            btn.disabled = true;
            loading.style.display = 'inline';
            
            fetch('/api/whatsapp/refresh_all_statuses', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`Updated ${data.updated_count} out of ${data.total_count} messages`);
                    location.reload();
                } else {
                    alert('Error refreshing statuses: ' + data.message);
                }
            })
            .catch(error => {
                alert('Error refreshing statuses: ' + error.message);
            })
            .finally(() => {
                btn.disabled = false;
                loading.style.display = 'none';
            });
        }
        
        function refreshSingleStatus(messageSid) {
            fetch('/api/whatsapp/refresh_status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message_sid: messageSid
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error refreshing status: ' + data.message);
                }
            })
            .catch(error => {
                alert('Error refreshing status: ' + error.message);
            });
        }
        
        function showMessageDetails(messageSid) {
            const modal = document.getElementById('messageModal');
            const details = document.getElementById('messageDetails');
            
            modal.style.display = 'block';
            details.innerHTML = 'Loading...';
            
            fetch(`/api/whatsapp/message_details/${messageSid}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    details.innerHTML = `
                        <h3>Message SID: ${data.message.sid}</h3>
                        <p><strong>Status:</strong> ${data.message.status}</p>
                        <p><strong>Direction:</strong> ${data.message.direction}</p>
                        <p><strong>Price:</strong> ${data.message.price || 'N/A'} ${data.message.price_unit || ''}</p>
                        <p><strong>Segments:</strong> ${data.message.num_segments || 'N/A'}</p>
                        <p><strong>Date Sent:</strong> ${data.message.date_sent || 'N/A'}</p>
                        <p><strong>Date Updated:</strong> ${data.message.date_updated || 'N/A'}</p>
                        ${data.message.error_code ? `<p><strong>Error Code:</strong> ${data.message.error_code}</p>` : ''}
                        ${data.message.error_message ? `<p><strong>Error Message:</strong> ${data.message.error_message}</p>` : ''}
                    `;
                } else {
                    details.innerHTML = `<p>Error loading details: ${data.message}</p>`;
                }
            })
            .catch(error => {
                details.innerHTML = `<p>Error loading details: ${error.message}</p>`;
            });
        }
        
        function closeModal() {
            document.getElementById('messageModal').style.display = 'none';
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('messageModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }
        
        // Auto-submit form when filters change
        document.getElementById('status_filter').addEventListener('change', function() {
            document.getElementById('filtersForm').submit();
        });
        
        document.getElementById('message_type_filter').addEventListener('change', function() {
            document.getElementById('filtersForm').submit();
        });
        
        // File cleanup functions
        function previewCleanup() {
            const loading = document.getElementById('cleanupLoading');
            loading.style.display = 'inline';
            
            fetch('/api/whatsapp/cleanup_preview')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const preview = data.preview;
                    const sizeMB = (preview.estimated_size_freed / (1024 * 1024)).toFixed(2);
                    
                    let message = `Files ready for cleanup:\n\n`;
                    message += `• Status-based cleanup: ${preview.status_based_files.length} files\n`;
                    message += `• Orphaned files: ${preview.orphaned_files.length} files\n`;
                    message += `• Total files: ${preview.total_files}\n`;
                    message += `• Estimated space freed: ${sizeMB} MB\n\n`;
                    
                    if (preview.total_files > 0) {
                        message += `Would you like to proceed with cleanup?`;
                        if (confirm(message)) {
                            runCleanup();
                        }
                    } else {
                        alert('No files need cleanup at this time.');
                    }
                } else {
                    alert('Error previewing cleanup: ' + data.message);
                }
            })
            .catch(error => {
                alert('Error previewing cleanup: ' + error.message);
            })
            .finally(() => {
                loading.style.display = 'none';
            });
        }
        
        function runCleanup() {
            if (!confirm('Are you sure you want to clean up renewal files? This action cannot be undone.')) {
                return;
            }
            
            const loading = document.getElementById('cleanupLoading');
            loading.style.display = 'inline';
            
            fetch('/api/whatsapp/cleanup_files', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    dry_run: false
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const results = data.results;
                    const statusDeleted = results.status_based_cleanup.deleted_files.length;
                    const orphanedDeleted = results.orphaned_cleanup.deleted_orphaned.length;
                    const totalSizeMB = (results.total_size_freed / (1024 * 1024)).toFixed(2);
                    
                    let message = `Cleanup completed successfully!\n\n`;
                    message += `• Status-based files deleted: ${statusDeleted}\n`;
                    message += `• Orphaned files deleted: ${orphanedDeleted}\n`;
                    message += `• Total space freed: ${totalSizeMB} MB`;
                    
                    alert(message);
                } else {
                    alert('Error during cleanup: ' + data.message);
                }
            })
            .catch(error => {
                alert('Error during cleanup: ' + error.message);
            })
            .finally(() => {
                loading.style.display = 'none';
            });
        }
        
        // Real-time service functions
        let realtimeServiceRunning = false;
        
        function checkRealtimeServiceStatus() {
            fetch('/api/whatsapp/realtime_service_status')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    realtimeServiceRunning = data.service_running;
                    updateRealtimeButton();
                }
            })
            .catch(error => {
                console.error('Error checking service status:', error);
            });
        }
        
        function updateRealtimeButton() {
            const button = document.getElementById('realtimeToggle');
            if (realtimeServiceRunning) {
                button.textContent = 'Stop Real-time Cleanup';
                button.style.background = '#dc2626';
            } else {
                button.textContent = 'Start Real-time Cleanup';
                button.style.background = '#059669';
            }
        }
        
        function toggleRealtimeService() {
            const loading = document.getElementById('realtimeLoading');
            loading.style.display = 'inline';
            
            const endpoint = realtimeServiceRunning ? 
                '/api/whatsapp/stop_realtime_service' : 
                '/api/whatsapp/start_realtime_service';
            
            const method = 'POST';
            const body = realtimeServiceRunning ? null : JSON.stringify({
                interval_seconds: 60
            });
            
            fetch(endpoint, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: body
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    realtimeServiceRunning = data.service_running;
                    updateRealtimeButton();
                    
                    let message = realtimeServiceRunning ? 
                        'Real-time cleanup service started! Files will be deleted automatically:\n\n• 1 minute after delivery/read\n• 1 minute after failure\n• 5 minutes if stuck in queue\n• 30 minutes if sent but not delivered' :
                        'Real-time cleanup service stopped.';
                    
                    alert(message);
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                alert('Error managing service: ' + error.message);
            })
            .finally(() => {
                loading.style.display = 'none';
            });
        }
        
        // Check service status on page load
        document.addEventListener('DOMContentLoaded', function() {
            checkRealtimeServiceStatus();
        });
    </script>
</body>
</html>



================================================
FILE: templates/email/policy_issued_template.html
================================================
<div>
    <br>
</div>
<br>
<div id="Zm-_Id_-Sgn" data-zbluepencil-ignore="true" data-sigid="484685000000009001">
    <table width="100%" cellpadding="0" cellspacing="0" style="background-color:rgb(244, 244, 244); padding:20px 0; font-family: Arial, sans-serif;">
        <tbody>
            <tr>
                <td align="center">
                    <table width="600" cellpadding="0" cellspacing="0" style="background-color:rgb(255, 255, 255); border-radius:8px; overflow:hidden; border: 1px solid #e2e8f0;">
                        <tbody>
                            <!-- Banner Header with White Background -->
                            <tr>
                                <td style="background-color:#FFFFFF; padding:30px; text-align:center; border-bottom: 1px solid #e2e8f0;">
                                    <img src="{{ app_base_url }}/static/images/email-banner.jpg"
                                         alt="Insta Insurance Consultancy Banner"
                                         width="400" height="auto"
                                         style="max-width:400px; height:auto; display:block; margin:0 auto;">
                                </td>
                            </tr>

                            <!-- Main Message -->
                            <tr>
                                <td style="padding:40px 30px">
                                    <p style="font-size:16px; color:#333; margin:0 0 20px 0;">
                                        Dear <b>{{ client_name }}</b>,
                                    </p>

                                    <p style="font-size:15px; color:#333; line-height:1.8; margin:0 0 20px 0;">
                                        We are pleased to share your <b>{{ policy_type }}</b> policy document. Please find the details below:
                                    </p>

                                    <!-- ========== UPDATED SECTION START ========== -->
                                    <ul style="font-size:15px; color:#333; line-height:1.8; margin:0 0 20px 20px; padding:0;">
                                        <li>Policy No: <b>{{ policy_no }}</b></li>
                                        <li>Insured Item / Vehicle / Asset: <b>{{ asset }}</b></li>
                                        <li>Effective Date: <b>{{ start_date }}</b></li>
                                        <li>Expiry Date: <b>{{ expiry_date }}</b></li>
                                    </ul>
                                    <!-- ========== UPDATED SECTION END ========== -->

                                    <p style="font-size:15px; color:#333; line-height:1.8; margin:0 0 20px 0;">
                                        The policy document is attached for your convenience. Should you have any questions or require assistance, please feel free to reach out.
                                    </p>

                                    <p style="font-size:15px; color:#333; line-height:1.8; margin:0;">
                                        Thank you!<br>
                                        <b>Insta Insurance Consultancy</b>
                                    </p>
                                </td>
                            </tr>

                            <!-- Self-Service Section -->
                            <tr>
                                <td style="padding:0 30px 30px 30px">
                                    <table width="100%" cellpadding="0" cellspacing="0" style="background-color:rgb(224, 242, 254); border-radius:8px; padding:25px;">
                                        <tbody>
                                            <tr>
                                                <td align="center">
                                                    <p style="background-color:rgb(2,132,199); color:#fff; display:inline-block; padding:8px 20px; border-radius:20px; margin:0 0 20px 0; font-size:14px; font-weight:bold;">
                                                        Making self-service easier for you!
                                                    </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <table width="100%" cellpadding="10" cellspacing="0">
                                                        <tbody>
                                                            <tr>
                                                                <td width="50%" align="center" style="border-right:1px solid rgb(2,132,199); padding:15px;">
                                                                    <a href="https://wa.me/919833929565?text=Hi" target="_blank" style="text-decoration:none; color:#333; display:block;">
                                                                        <img src="https://cdn-icons-png.flaticon.com/128/733/733585.png" alt="WhatsApp" width="50" height="50" style="margin-bottom:10px; display:block; margin-left:auto; margin-right:auto;">
                                                                        <p style="margin:0; font-size:14px; font-weight:bold;">WhatsApp</p>
                                                                        <p style="margin:5px 0 0 0; font-size:12px; color:#666;">Send "Hi" to +91 98339 29565</p>
                                                                    </a>
                                                                </td>
                                                                <td width="50%" align="center" style="padding:15px;">
                                                                    <a href="mailto:info@instainsure.in" target="_blank" style="text-decoration:none; color:#333; display:block;">
                                                                        <img src="https://cdn-icons-png.flaticon.com/128/561/561127.png" alt="Email" width="50" height="50" style="margin-bottom:10px; display:block; margin-left:auto; margin-right:auto;">
                                                                        <p style="margin:0; font-size:14px; font-weight:bold;">Email Us</p>
                                                                        <p style="margin:5px 0 0 0; font-size:12px; color:#666;">info@instainsure.in</p>
                                                                    </a>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                            
                            <!-- Footer -->
                            <tr>
                                <td style="background-color:rgb(248, 250, 252); padding:25px 30px; border-top:1px solid rgb(226, 232, 240); font-size:13px; color:#333; line-height: 1.6;">
                                    <div><b>Insta Insurance Consultancy</b></div>
                                    <div>1-B-83 Phoenix Paragon Plaza, Phoenix Market City Mall,</div>
                                    <div>L.B.S. Marg, Kurla (W), Mumbai - 400070</div>
                                    <div style="margin-top:10px;">
                                        <b>Phone:</b> +91 22 40155261 | +91 98921 98121
                                    </div>
                                    <div>
                                        <b>Email:</b>
                                        <a href="mailto:info@instainsure.in" target="_blank" style="color:rgb(59,130,246); text-decoration:none;">
                                            info@instainsure.in
                                        </a>
                                    </div>
                                </td>
                            </tr>

                            <!-- Auto-generated notice -->
                            <tr>
                                <td style="background-color:rgb(30, 41, 59); padding:20px 30px; text-align:center;">
                                    <p style="font-size:11px; color:rgb(203, 213, 225); margin:0;">
                                        Please note: This is an auto-generated mail, please do not reply to this mail.
                                    </p>
                                </td>
                            </tr>

                        </tbody>
                    </table>
                </td>
            </tr>
        </tbody>
    </table>
    <div><br></div>
</div>


================================================
FILE: templates/email/renewal_reminder_template.html
================================================
<div>
    <br>
</div>
<br>
<div id="Zm-_Id_-Sgn" data-zbluepencil-ignore="true" data-sigid="484685000000009001">
    <table width="100%" cellpadding="0" cellspacing="0" style="background-color:rgb(244, 244, 244); padding:20px 0; font-family: Arial, sans-serif;">
        <tbody>
            <tr>
                <td align="center">
                    <table width="600" cellpadding="0" cellspacing="0" style="background-color:rgb(255, 255, 255); border-radius:8px; overflow:hidden; border: 1px solid #e2e8f0;">
                        <tbody>
                            <!-- ========== MODIFIED SECTION START ========== -->
                            <!-- Banner Header with White Background -->
                            <tr>
                                <td style="background-color:#FFFFFF; padding:30px; text-align:center; border-bottom: 1px solid #e2e8f0;">
                                     <img src="{{ app_base_url }}/static/images/email-banner.jpg"
                                         alt="Insta Insurance Consultancy Banner"
                                         width="400" height="auto"
                                         style="max-width:400px; height:auto; display:block; margin:0 auto;">
                                </td>
                            </tr>
                            <!-- ========== MODIFIED SECTION END ========== -->

                            <!-- Main Message -->
                            <tr>
                                <td style="padding:40px 30px">
                                    <p style="font-size:16px; color:#333; margin:0 0 20px 0;">
                                        Dear <b>{{ client_name }}</b>,
                                    </p>

                                    <p style="font-size:15px; color:#333; line-height:1.8; margin:0 0 20px 0;">
                                        This is a gentle reminder regarding your insurance renewal:
                                    </p>

                                    <ul style="font-size:15px; color:#333; line-height:1.8; margin:0 0 20px 20px; padding:0;">
                                        <li>Policy No: <b>{{ policy_no }}</b></li>
                                        <li>Vehicle / Asset: <b>{{ asset }}</b></li>
                                        <li>Company: <b>{{ company }}</b></li>
                                        <li>Expiry Date: <b>{{ expiry_date }}</b></li>
                                    </ul>

                                    <p style="font-size:15px; color:#333; line-height:1.8; margin:0 0 20px 0;">
                                        Kindly share your renewal instructions at your earliest convenience. Please let us know if you require any assistance.
                                    </p>

                                    <p style="font-size:15px; color:#333; line-height:1.8; margin:0;">
                                        Thank you!<br>
                                        <b>Insta Insurance Consultancy</b>
                                    </p>
                                </td>
                            </tr>

                            <!-- Self-Service Section -->
                            <tr>
                                <td style="padding:0 30px 30px 30px">
                                    <table width="100%" cellpadding="0" cellspacing="0" style="background-color:rgb(224, 242, 254); border-radius:8px; padding:25px;">
                                        <tbody>
                                            <tr>
                                                <td align="center">
                                                    <p style="background-color:rgb(2,132,199); color:#fff; display:inline-block; padding:8px 20px; border-radius:20px; margin:0 0 20px 0; font-size:14px; font-weight:bold;">
                                                        Making self-service easier for you!
                                                    </p>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <table width="100%" cellpadding="10" cellspacing="0">
                                                        <tbody>
                                                            <tr>
                                                                <td width="50%" align="center" style="border-right:1px solid rgb(2,132,199); padding:15px;">
                                                                    <a href="https://wa.me/919833929565?text=Hi" target="_blank" style="text-decoration:none; color:#333; display:block;">
                                                                        <img src="https://cdn-icons-png.flaticon.com/128/733/733585.png" alt="WhatsApp" width="50" height="50" style="margin-bottom:10px; display:block; margin-left:auto; margin-right:auto;">
                                                                        <p style="margin:0; font-size:14px; font-weight:bold;">WhatsApp</p>
                                                                        <p style="margin:5px 0 0 0; font-size:12px; color:#666;">Send "Hi" to +91 98339 29565</p>
                                                                    </a>
                                                                </td>
                                                                <td width="50%" align="center" style="padding:15px;">
                                                                    <a href="mailto:info@instainsure.in" target="_blank" style="text-decoration:none; color:#333; display:block;">
                                                                        <img src="https://cdn-icons-png.flaticon.com/128/561/561127.png" alt="Email" width="50" height="50" style="margin-bottom:10px; display:block; margin-left:auto; margin-right:auto;">
                                                                        <p style="margin:0; font-size:14px; font-weight:bold;">Email Us</p>
                                                                        <p style="margin:5px 0 0 0; font-size:12px; color:#666;">info@instainsure.in</p>
                                                                    </a>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                            
                            <!-- Footer -->
                            <tr>
                                <td style="background-color:rgb(248, 250, 252); padding:25px 30px; border-top:1px solid rgb(226, 232, 240); font-size:13px; color:#333; line-height: 1.6;">
                                    <div><b>Insta Insurance Consultancy</b></div>
                                    <div>1-B-83 Phoenix Paragon Plaza, Phoenix Market City Mall,</div>
                                    <div>L.B.S. Marg, Kurla (W), Mumbai - 400070</div>
                                    <div style="margin-top:10px;">
                                        <b>Phone:</b> +91 22 40155261 | +91 98921 98121
                                    </div>
                                    <div>
                                        <b>Email:</b>
                                        <a href="mailto:info@instainsure.in" target="_blank" style="color:rgb(59,130,246); text-decoration:none;">
                                            info@instainsure.in
                                        </a>
                                    </div>
                                </td>
                            </tr>

                            <!-- Auto-generated notice -->
                            <tr>
                                <td style="background-color:rgb(30, 41, 59); padding:20px 30px; text-align:center;">
                                    <p style="font-size:11px; color:rgb(203, 213, 225); margin:0;">
                                        Please note: This is an auto-generated mail, please do not reply to this mail.
                                    </p>
                                </td>
                            </tr>

                        </tbody>
                    </table>
                </td>
            </tr>
        </tbody>
    </table>
    <div><br></div>
</div>


================================================
FILE: templates/settings/index.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings - Admin Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}?v=2.0">
    <style>
        .settings-nav {
            border-right: 1px solid #dee2e6;
            min-height: 600px;
        }
        .settings-nav .nav-link {
            color: #495057;
            border-radius: 0;
            border-bottom: 1px solid #f8f9fa;
        }
        .settings-nav .nav-link.active {
            background-color: #007bff;
            color: white;
        }
        .settings-content {
            min-height: 600px;
        }
        .setting-item {
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            background: #f8f9fa;
        }
        .setting-item.sensitive {
            border-color: #ffc107;
            background: #fff3cd;
        }
        .setting-value {
            font-family: monospace;
            background: white;
            border: 1px solid #ced4da;
            border-radius: 4px;
            padding: 8px;
        }
        .user-card {
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }
        .role-badge {
            font-size: 0.8em;
            padding: 4px 8px;
        }
        .role-admin {
            background-color: #dc3545;
            color: white;
        }
        .role-member {
            background-color: #28a745;
            color: white;
        }
        .btn-sm {
            font-size: 0.8em;
            padding: 4px 8px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container-fluid">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <i class="fas fa-arrow-left me-2"></i>Back to Dashboard
            </a>
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3">
                    <i class="fas fa-user-cog me-1"></i>{{ current_user.name }} (Admin)
                </span>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-md-3">
                <div class="settings-nav">
                    <h5 class="p-3 mb-0 border-bottom">Settings Categories</h5>
                    <div class="nav flex-column nav-pills" id="settings-nav" role="tablist">
                        <button class="nav-link active" data-bs-toggle="pill" data-bs-target="#company-settings" type="button" role="tab">
                            <i class="fas fa-building me-2"></i>Company Information
                        </button>
                        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#email-settings" type="button" role="tab">
                            <i class="fas fa-envelope me-2"></i>Email Configuration
                        </button>
                        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#whatsapp-settings" type="button" role="tab">
                            <i class="fab fa-whatsapp me-2"></i>WhatsApp Settings
                        </button>
                        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#twilio-settings" type="button" role="tab">
                            <i class="fas fa-phone me-2"></i>Twilio Configuration
                        </button>
                        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#drive-settings" type="button" role="tab">
                            <i class="fab fa-google-drive me-2"></i>Google Drive
                        </button>
                        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#app-settings" type="button" role="tab">
                            <i class="fas fa-cog me-2"></i>Application Settings
                        </button>
                        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#business-settings" type="button" role="tab">
                            <i class="fas fa-chart-line me-2"></i>Business Settings
                        </button>
                        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#user-management" type="button" role="tab">
                            <i class="fas fa-users me-2"></i>User Management
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-9">
                <div class="settings-content">
                    <div class="tab-content" id="settings-content">
                        <!-- Company Settings -->
                        <div class="tab-pane fade show active" id="company-settings" role="tabpanel">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h4><i class="fas fa-building me-2"></i>Company Information</h4>
                                <button class="btn btn-primary" onclick="saveCategory('company')">
                                    <i class="fas fa-save me-1"></i>Save Changes
                                </button>
                            </div>
                            <div id="company-settings-content">
                                <!-- Settings will be loaded here -->
                            </div>
                        </div>

                        <!-- Email Settings -->
                        <div class="tab-pane fade" id="email-settings" role="tabpanel">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h4><i class="fas fa-envelope me-2"></i>Email Configuration</h4>
                                <button class="btn btn-primary" onclick="saveCategory('email')">
                                    <i class="fas fa-save me-1"></i>Save Changes
                                </button>
                            </div>
                            <div id="email-settings-content">
                                <!-- Settings will be loaded here -->
                            </div>
                        </div>

                        <!-- WhatsApp Settings -->
                        <div class="tab-pane fade" id="whatsapp-settings" role="tabpanel">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h4><i class="fab fa-whatsapp me-2"></i>WhatsApp Settings</h4>
                                <button class="btn btn-primary" onclick="saveCategory('whatsapp')">
                                    <i class="fas fa-save me-1"></i>Save Changes
                                </button>
                            </div>
                            <div id="whatsapp-settings-content">
                                <!-- Settings will be loaded here -->
                            </div>
                        </div>

                        <!-- Twilio Settings -->
                        <div class="tab-pane fade" id="twilio-settings" role="tabpanel">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h4><i class="fas fa-phone me-2"></i>Twilio Configuration</h4>
                                <button class="btn btn-primary" onclick="saveCategory('twilio')">
                                    <i class="fas fa-save me-1"></i>Save Changes
                                </button>
                            </div>
                            <div id="twilio-settings-content">
                                <!-- Settings will be loaded here -->
                            </div>
                        </div>

                        <!-- Google Drive Settings -->
                        <div class="tab-pane fade" id="drive-settings" role="tabpanel">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h4><i class="fab fa-google-drive me-2"></i>Google Drive Configuration</h4>
                                <button class="btn btn-primary" onclick="saveCategory('google_drive')">
                                    <i class="fas fa-save me-1"></i>Save Changes
                                </button>
                            </div>
                            <div id="drive-settings-content">
                                <!-- Settings will be loaded here -->
                            </div>
                        </div>

                        <!-- App Settings -->
                        <div class="tab-pane fade" id="app-settings" role="tabpanel">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h4><i class="fas fa-cog me-2"></i>Application Settings</h4>
                                <button class="btn btn-primary" onclick="saveCategory('app')">
                                    <i class="fas fa-save me-1"></i>Save Changes
                                </button>
                            </div>
                            <div id="app-settings-content">
                                <!-- Settings will be loaded here -->
                            </div>
                        </div>

                        <!-- Business Settings -->
                        <div class="tab-pane fade" id="business-settings" role="tabpanel">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h4><i class="fas fa-chart-line me-2"></i>Business Settings</h4>
                                <button class="btn btn-primary" onclick="saveCategory('business')">
                                    <i class="fas fa-save me-1"></i>Save Changes
                                </button>
                            </div>
                            <div id="business-settings-content">
                                <!-- Settings will be loaded here -->
                            </div>
                        </div>

                        <!-- User Management -->
                        <div class="tab-pane fade" id="user-management" role="tabpanel">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h4><i class="fas fa-users me-2"></i>User Management</h4>
                                <button class="btn btn-success" onclick="showCreateUserModal()">
                                    <i class="fas fa-user-plus me-1"></i>Add New User
                                </button>
                            </div>
                            <div id="user-management-content">
                                <!-- Users will be loaded here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Create User Modal -->
    <div class="modal fade" id="createUserModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="createUserForm">
                        <div class="mb-3">
                            <label for="userEmail" class="form-label">Email Address</label>
                            <input type="email" class="form-control" id="userEmail" required>
                        </div>
                        <div class="mb-3">
                            <label for="userName" class="form-label">Full Name</label>
                            <input type="text" class="form-control" id="userName" required>
                        </div>
                        <div class="mb-3">
                            <label for="userPassword" class="form-label">Password</label>
                            <input type="password" class="form-control" id="userPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="userRole" class="form-label">Role</label>
                            <select class="form-select" id="userRole" required>
                                <option value="member">Member</option>
                                <option value="admin">Admin</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="createUser()">Create User</button>
                </div>
            </div>
        </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/performance.js') }}?v=2.0"></script>
    <script>
        let currentSettings = {};
        let currentUsers = [];

        // Global error handler
        window.addEventListener('error', function(event) {
            console.error('Global JavaScript error:', event.error);
        });
        
        window.addEventListener('unhandledrejection', function(event) {
            console.error('Unhandled promise rejection:', event.reason);
        });

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadCategorySettings('company');
            loadUsers();
            
            // Add event listeners for tab changes
            document.querySelectorAll('[data-bs-toggle="pill"]').forEach(tab => {
                tab.addEventListener('shown.bs.tab', function(event) {
                    const targetId = event.target.getAttribute('data-bs-target');
                    const category = targetId.replace('#', '').replace('-settings', '').replace('-', '_');
                    
                    if (category === 'user_management') {
                        loadUsers();
                    } else {
                        loadCategorySettings(category);
                    }
                });
            });
        });

        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 10000; min-width: 300px;';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.parentNode.removeChild(alertDiv);
                }
            }, 5000);
        }

        async function loadCategorySettings(category, retryCount = 0) {
            const contentDiv = document.getElementById(`${category.replace('_', '-')}-settings-content`);
            
            try {
                console.log(`Loading settings for category: ${category} (attempt ${retryCount + 1})`);
                
                // Show inline loading state
                if (contentDiv && retryCount === 0) {
                    contentDiv.innerHTML = '<div class="text-center py-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2 text-muted">Loading settings...</p></div>';
                }
                
                const response = await fetch(`/settings/api/get/${category}`);
                console.log(`Response status: ${response.status}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log(`Response data:`, data);
                
                if (data.success) {
                    // Handle null or undefined settings
                    if (!data.settings || data.settings === null) {
                        console.warn(`Settings is null/undefined for category: ${category}`);
                        currentSettings[category] = {};
                        
                        if (contentDiv) {
                            contentDiv.innerHTML = '<div class="alert alert-info"><i class="fas fa-info-circle me-2"></i>No settings configured for this category yet. Settings will be created when you save.</div>';
                        }
                        return;
                    }
                    
                    currentSettings[category] = data.settings;
                    console.log(`Settings loaded for ${category}:`, data.settings);
                    
                    // Check if settings object is empty
                    const settingsCount = Object.keys(data.settings).length;
                    if (settingsCount === 0) {
                        console.warn(`Empty settings object for category: ${category}`);
                        
                        // Retry once if this is the first attempt
                        if (retryCount === 0) {
                            console.log(`Retrying to load settings for ${category} after default creation...`);
                            setTimeout(() => {
                                loadCategorySettings(category, 1);
                            }, 1000);
                            return;
                        }
                        
                        if (contentDiv) {
                            contentDiv.innerHTML = '<div class="alert alert-info"><i class="fas fa-info-circle me-2"></i>No settings configured for this category yet. Default settings will be created when you save.</div>';
                        }
                    } else {
                        // Render settings
                        try {
                            renderCategorySettings(category, data.settings);
                        } catch (renderError) {
                            console.error(`Error rendering settings for ${category}:`, renderError);
                            if (contentDiv) {
                                contentDiv.innerHTML = '<div class="alert alert-warning"><i class="fas fa-exclamation-triangle me-2"></i>Error displaying settings. Please refresh the page.</div>';
                            }
                        }
                    }
                } else {
                    console.error(`Failed to load settings: ${data.error}`);
                    if (contentDiv) {
                        contentDiv.innerHTML = `<div class="alert alert-danger"><i class="fas fa-times-circle me-2"></i>Failed to load settings: ${data.error || 'Unknown error'}</div>`;
                    }
                }
            } catch (error) {
                console.error(`Error loading settings for ${category}:`, error);
                
                // Retry once if this is the first attempt
                if (retryCount === 0) {
                    console.log(`Retrying to load settings for ${category} after error...`);
                    setTimeout(() => {
                        loadCategorySettings(category, 1);
                    }, 2000);
                    return;
                }
                
                // Show error in content div
                if (contentDiv) {
                    contentDiv.innerHTML = '<div class="alert alert-danger"><i class="fas fa-times-circle me-2"></i>Failed to load settings. Please try refreshing the page.</div>';
                }
            }
        }

        function renderCategorySettings(category, settings) {
            try {
                console.log(`Rendering settings for category: ${category}`);
                const contentDiv = document.getElementById(`${category.replace('_', '-')}-settings-content`);
                if (!contentDiv) {
                    console.error(`Content div not found for category: ${category}, looking for: ${category.replace('_', '-')}-settings-content`);
                    throw new Error(`Content div not found for category: ${category}`);
                }
                
                let html = '';
                
                if (!settings || typeof settings !== 'object') {
                    console.error(`Invalid settings data for category ${category}:`, settings);
                    contentDiv.innerHTML = '<div class="alert alert-warning">No settings found for this category.</div>';
                    return;
                }
                
                const entries = Object.entries(settings);
                if (entries.length === 0) {
                    contentDiv.innerHTML = '<div class="alert alert-info"><i class="fas fa-info-circle me-2"></i>No settings configured for this category yet.</div>';
                    return;
                }
                
                for (const [key, data] of entries) {
                    try {
                        if (!data || typeof data !== 'object') {
                            console.warn(`Invalid data for setting ${key}:`, data);
                            continue;
                        }
                        
                        const isSensitive = data.is_sensitive || false;
                        const inputType = isSensitive ? 'password' : getInputType(data.data_type);
                        
                        html += `
                            <div class="setting-item ${isSensitive ? 'sensitive' : ''}">
                                <div class="row">
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">${formatKey(key)}</label>
                                        ${isSensitive ? '<i class="fas fa-lock text-warning ms-1" title="Sensitive setting"></i>' : ''}
                                        ${data.description ? `<small class="text-muted d-block">${escapeHtml(data.description)}</small>` : ''}
                                    </div>
                                    <div class="col-md-8">
                                        ${renderInput(category, key, data.value, inputType, data.data_type)}
                                    </div>
                                </div>
                            </div>
                        `;
                    } catch (error) {
                        console.error(`Error rendering setting ${key}:`, error);
                    }
                }
                
                if (html) {
                    contentDiv.innerHTML = html;
                    console.log(`Successfully rendered ${entries.length} settings for category: ${category}`);
                } else {
                    contentDiv.innerHTML = '<div class="alert alert-warning">Unable to render settings for this category.</div>';
                }
            } catch (error) {
                console.error(`Error in renderCategorySettings for ${category}:`, error);
                throw error; // Re-throw to be caught by caller
            }
        }

        function getInputType(dataType) {
            switch (dataType) {
                case 'number': return 'number';
                case 'boolean': return 'checkbox';
                case 'json': return 'textarea';
                default: return 'text';
            }
        }

        function renderInput(category, key, value, inputType, dataType) {
            try {
                const inputId = `${category}_${key}`;
                
                if (inputType === 'checkbox') {
                    return `
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="${inputId}" ${value ? 'checked' : ''}>
                            <label class="form-check-label" for="${inputId}">
                                ${value ? 'Enabled' : 'Disabled'}
                            </label>
                        </div>
                    `;
                } else if (inputType === 'textarea') {
                    let jsonValue = '';
                    try {
                        if (typeof value === 'object' && value !== null) {
                            jsonValue = JSON.stringify(value, null, 2);
                        } else {
                            jsonValue = value || '';
                        }
                    } catch (e) {
                        jsonValue = String(value || '');
                    }
                    // Escape HTML entities for textarea
                    const escapedValue = String(jsonValue).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                    return `
                        <textarea class="form-control" id="${inputId}" rows="4">${escapedValue}</textarea>
                    `;
                } else {
                    // Handle all types of values safely
                    let safeValue = '';
                    try {
                        if (value === null || value === undefined) {
                            safeValue = '';
                        } else {
                            safeValue = String(value).replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                        }
                    } catch (e) {
                        console.warn(`Could not convert value for ${key}:`, value);
                        safeValue = '';
                    }
                    
                    return `
                        <input type="${inputType}" class="form-control" id="${inputId}" value="${safeValue}" 
                               ${inputType === 'password' ? 'placeholder="Enter new value to change"' : ''}>
                    `;
                }
            } catch (error) {
                console.error(`Error rendering input for ${category}.${key}:`, error);
                return `<div class="alert alert-warning">Unable to render field: ${key}</div>`;
            }
        }

        // Helper function to escape HTML
        function escapeHtml(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function formatKey(key) {
            try {
                if (!key || typeof key !== 'string') {
                    return String(key || 'Unknown');
                }
                return key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
            } catch (error) {
                console.error('Error formatting key:', key, error);
                return String(key || 'Unknown');
            }
        }

        async function saveCategory(category) {
            const saveBtn = event.target;
            const originalText = saveBtn.innerHTML;
            
            try {
                // Show inline loading on button
                saveBtn.disabled = true;
                saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Saving...';
                
                const settings = {};
                const settingsData = currentSettings[category] || {};
                
                for (const key of Object.keys(settingsData)) {
                    const inputId = `${category}_${key}`;
                    const input = document.getElementById(inputId);
                    
                    if (input) {
                        let value;
                        if (input.type === 'checkbox') {
                            value = input.checked;
                        } else if (input.tagName === 'TEXTAREA') {
                            try {
                                value = JSON.parse(input.value);
                            } catch {
                                value = input.value;
                            }
                        } else if (input.type === 'number') {
                            value = parseFloat(input.value) || 0;
                        } else {
                            // For password fields, only update if value is provided
                            if (input.type === 'password' && !input.value.trim()) {
                                continue;
                            }
                            value = input.value;
                        }
                        
                        settings[key] = value;
                    }
                }
                
                const response = await fetch('/settings/api/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({[category]: settings})
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert('Settings saved successfully!', 'success');
                    // Reload the category to get updated values
                    await loadCategorySettings(category);
                } else {
                    showAlert('Failed to save settings: ' + data.error, 'danger');
                }
            } catch (error) {
                showAlert('Error saving settings: ' + error.message, 'danger');
            } finally {
                saveBtn.disabled = false;
                saveBtn.innerHTML = originalText;
            }
        }

        async function loadUsers() {
            try {
                const response = await fetch('/settings/api/users');
                const data = await response.json();
                
                if (data.success) {
                    currentUsers = data.users;
                    renderUsers(data.users);
                } else {
                    showAlert('Failed to load users: ' + data.error, 'danger');
                }
            } catch (error) {
                showAlert('Error loading users: ' + error.message, 'danger');
            }
        }

        function renderUsers(users) {
            const contentDiv = document.getElementById('user-management-content');
            if (!contentDiv) return;
            
            let html = '';
            
            users.forEach(user => {
                const isCurrentUser = user.email === '{{ current_user.email }}';
                html += `
                    <div class="user-card">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <h6 class="mb-1">${user.name}</h6>
                                <small class="text-muted">${user.email}</small>
                                <div class="mt-1">
                                    <span class="badge role-badge role-${user.role}">${user.role.toUpperCase()}</span>
                                    ${user.last_login ? `<small class="text-muted ms-2">Last login: ${new Date(user.last_login).toLocaleDateString()}</small>` : ''}
                                </div>
                            </div>
                            <div class="col-md-6 text-end">
                                ${!isCurrentUser ? `
                                    <button class="btn btn-outline-primary btn-sm me-1" onclick="changeUserRole('${user.email}', '${user.role === 'admin' ? 'member' : 'admin'}')">
                                        <i class="fas fa-user-cog me-1"></i>Make ${user.role === 'admin' ? 'Member' : 'Admin'}
                                    </button>
                                    <button class="btn btn-outline-warning btn-sm me-1" onclick="resetUserPassword('${user.email}')">
                                        <i class="fas fa-key me-1"></i>Reset Password
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" onclick="deleteUser('${user.email}')">
                                        <i class="fas fa-trash me-1"></i>Delete
                                    </button>
                                ` : `
                                    <span class="text-muted">Current User</span>
                                `}
                            </div>
                        </div>
                    </div>
                `;
            });
            
            contentDiv.innerHTML = html;
        }

        function showCreateUserModal() {
            new bootstrap.Modal(document.getElementById('createUserModal')).show();
        }

        async function createUser() {
            try {
                const email = document.getElementById('userEmail').value;
                const name = document.getElementById('userName').value;
                const password = document.getElementById('userPassword').value;
                const role = document.getElementById('userRole').value;
                
                if (!email || !name || !password || !role) {
                    showAlert('Please fill in all fields', 'warning');
                    return;
                }
                
                const response = await fetch('/settings/api/users/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        email: email,
                        name: name,
                        password: password,
                        role: role
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert('User created successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('createUserModal')).hide();
                    document.getElementById('createUserForm').reset();
                    loadUsers();
                } else {
                    showAlert('Failed to create user: ' + data.error, 'danger');
                }
            } catch (error) {
                showAlert('Error creating user: ' + error.message, 'danger');
            }
        }

        async function changeUserRole(email, newRole) {
            if (!confirm(`Are you sure you want to change this user's role to ${newRole}?`)) {
                return;
            }
            
            try {
                const response = await fetch('/settings/api/users/update-role', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        email: email,
                        role: newRole
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert('User role updated successfully!', 'success');
                    loadUsers();
                } else {
                    showAlert('Failed to update user role: ' + data.error, 'danger');
                }
            } catch (error) {
                showAlert('Error updating user role: ' + error.message, 'danger');
            }
        }

        async function resetUserPassword(email) {
            const newPassword = prompt('Enter new password for this user:');
            if (!newPassword) {
                return;
            }
            
            try {
                const response = await fetch('/settings/api/users/reset-password', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        email: email,
                        password: newPassword
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert('Password reset successfully!', 'success');
                } else {
                    showAlert('Failed to reset password: ' + data.error, 'danger');
                }
            } catch (error) {
                showAlert('Error resetting password: ' + error.message, 'danger');
            }
        }

        async function deleteUser(email) {
            if (!confirm(`Are you sure you want to delete the user ${email}? This action cannot be undone.`)) {
                return;
            }
            
            try {
                const response = await fetch('/settings/api/users/delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        email: email
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showAlert('User deleted successfully!', 'success');
                    loadUsers();
                } else {
                    showAlert('Failed to delete user: ' + data.error, 'danger');
                }
            } catch (error) {
                showAlert('Error deleting user: ' + error.message, 'danger');
            }
        }
    </script>
</body>
</html>


